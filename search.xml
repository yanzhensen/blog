<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>mybatis防止sql注入原理</title>
      <link href="/blog/2022/08/09/mybatis-sql-inject/"/>
      <url>/blog/2022/08/09/mybatis-sql-inject/</url>
      
        <content type="html"><![CDATA[<h1 id="mybatis-防止sql注入原理"><a href="#mybatis-防止sql注入原理" class="headerlink" title="mybatis 防止sql注入原理"></a>mybatis 防止sql注入原理</h1><h2 id="一、SQL注入"><a href="#一、SQL注入" class="headerlink" title="一、SQL注入"></a>一、SQL注入</h2><p>​        SQL注入是在Web页面的查询入口传入SQL非法参数，在事先定义好的查询语句的结尾上添加额外的SQL语句，修改拼接成SQL语句，传递给Web服务器，进而传给数据库服务器执行，威胁数据库数据信息安全。</p><h2 id="二、SQL注入方法"><a href="#二、SQL注入方法" class="headerlink" title="二、SQL注入方法"></a>二、SQL注入方法</h2><p>​        由于编写程序时未对用户输入数据的合理性进行判断，导致攻击者能在SQL的注入点中夹杂代码进行执行，并通过页面返回的提示，获取进行下一步攻击所需的信息。根据输入的参数，可将SQL注入方式大致分为两类：数字型注入、字符型注入。</p><ul><li><strong>数字型注入</strong><br>当输入的参数为整型时，如ID、年龄、页码等，如果存在注入漏洞，则可以认为是数字型注入。这种数字型注入最多出现在ASP、PHP等弱类型语言中，弱类型语言会自动推导变量类型，例如，参数id=8，PHP会自动推导变量id的数据类型为int类型，那么id=8 and 1=1，则会推导为string类型，这是弱类型语言的特性。而对于Java、C#这类强类型语言，如果试图把一个字符串转换为int类型，则会抛出异常，无法继续执行。所以，强类型的语言很少存在数字型注入漏洞。</li><li><strong>字符型注入</strong><br>当输入参数为字符串时，称为字符型。数字型与字符型注入最大的区别在于：数字型不需要单引号闭合，而字符串类型一般要使用单引号来闭合。</li></ul><h2 id="三、mybatis中的-和-的区别"><a href="#三、mybatis中的-和-的区别" class="headerlink" title="三、mybatis中的#和$的区别"></a>三、mybatis中的#和$的区别</h2><p><strong>让我们看两个例子：</strong></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectUser<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java.util.Map<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>BaseResultMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select id, username, password from user    where username = #&#123;username,jdbcType=VARCHAR&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectUser<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java.util.Map<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>BaseResultMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select id, username, password from user    where username = $&#123;username,jdbcType=VARCHAR&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>#将传入的数据都当成一个字符串，会对自动传入的数据加一个双引号。<br>如：where username=#{username}，如果传入的值是111,那么解析成sql时的值为where username=”111”, 如果传入的值是id，则解析成的sql为where username=”id”。</li><li>$将传入的数据直接显示生成在sql中。<br>如：where username=${username}，如果传入的值是111,那么解析成sql时的值为where username=111；<br>如果传入的值是;drop table user;，则解析成的sql为：select id, username, password, role from user where username=;drop table user;</li><li>#方式能够很大程度防止sql注入，$方式无法防止Sql注入。</li><li>$方式一般用于传入数据库对象，例如传入表名。</li><li>一般能用#的就别用$，若不得不使用“${xxx}”这样的参数，要手工地做好过滤工作，来防止sql注入攻击。</li><li>在MyBatis中，“${xxx}”这样格式的参数会直接参与SQL编译，从而不能避免注入攻击。但涉及到动态表名和列名时，只能使用“${xxx}”这样的参数格式。所以，这样的参数需要我们在代码中手工进行处理来防止注入。</li></ul><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>​        在编写MyBatis的映射语句时，尽量采用“#{xxx}”这样的格式。若不得不使用“${xxx}”这样的参数，要手工地做好过滤工作，来防止SQL注入攻击。</p><h2 id="四、MyBatis如何防止SQL注入"><a href="#四、MyBatis如何防止SQL注入" class="headerlink" title="四、MyBatis如何防止SQL注入"></a>四、MyBatis如何防止SQL注入</h2><p>​        <a href="https://mybatis.github.io/mybatis-3/">MyBatis</a>框架作为一款半自动化的持久层框架，其SQL语句都要我们自己手动编写，这个时候当然需要防止SQL注入。其实，MyBatis的SQL是一个具有”<strong>输入+输出</strong>“的功能，类似于函数的结构，参考上面的两个例子。其中，parameterType表示了输入的参数类型，resultType表示了输出的参数类型。回应上文，如果我们想防止SQL注入，理所当然地要在输入参数上下功夫。</p><p>​        上面代码中使用”#{}”的即输入参数在SQL中拼接的部分，传入参数后，打印出执行的SQL语句，会看到SQL是这样的：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> id<span class="token punctuation">,</span> username<span class="token punctuation">,</span> password <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">where</span> username<span class="token operator">=</span>?<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        不管输入什么参数，打印出的SQL都是这样的。这是因为MyBatis启用了预编译功能，在SQL执行前，会先将上面的SQL发送给数据库进行编译；执行时，直接使用编译好的SQL，替换占位符“?”就可以了。因为SQL注入只能对编译过程起作用，所以这样的方式就很好地避免了SQL注入的问题。</p><h2 id="五、mybatis底层实现原理"><a href="#五、mybatis底层实现原理" class="headerlink" title="五、mybatis底层实现原理"></a>五、mybatis底层实现原理</h2><p>​        MyBatis是如何做到SQL预编译的呢？其实在框架底层，是JDBC中的PreparedStatement类在起作用，PreparedStatement是我们很熟悉的Statement的子类，它的对象包含了编译好的SQL语句。这种“准备好”的方式不仅能提高安全性，而且在多次执行同一个SQL时，能够提高效率。原因是SQL已编译好，再次执行时无需再编译。</p><ul><li>“${}”：表示拼接sql串，将接收到的参数的内容不加修饰拼接在sql中，可能引发sql注入。</li><li>“#{}”：是预编译处理，mybatis在处理“#{}”时，它会将sql中的“#{}”替换为占位符“?”，然后调用PreparedStatement的set方法来赋值。传入字符串后，会在值的两边加上单引号，使用占位符的方式提高效率，防止sql注入。</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>​        总的来说，#{}是经过预编译的，是安全的；${}是未经过预编译的，仅仅是取变量的值，是非安全的，存在SQL注入。因此在编写mybatis的映射语句时，尽量采用“#{xxx}”这样的格式。若不得不使用“${xxx}”这样的参数，要手工地做好过滤工作，来防止sql注入攻击。</p>]]></content>
      
      
      
        <tags>
            
            <tag> mybaits </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java设计模式-代理模式</title>
      <link href="/blog/2022/08/03/design-proxy/"/>
      <url>/blog/2022/08/03/design-proxy/</url>
      
        <content type="html"><![CDATA[<h1 id="Java设计模式-代理模式"><a href="#Java设计模式-代理模式" class="headerlink" title="Java设计模式-代理模式"></a>Java设计模式-代理模式</h1><h2 id="什么是代理模式"><a href="#什么是代理模式" class="headerlink" title="什么是代理模式"></a>什么是代理模式</h2><p>代理模式是通过创建一个代理对象，用这个代理对象去代表真实的对象，客户端得到这个代理对象后，对客户端并没有什么影响，就跟得到了真实对象一样来使用。</p><p>当客户端操作这个代理对象的时候，实际上功能最终还是会由真实的对象来完成，只不过是通过代理操作的，也就是客户端操作代理，代理操作真正的对象。</p><p>正是因为有代理对象夹在客户端和被代理的真实对象中间，相当于一个中转，那么在中转的时候就有很多花招可以玩，比如，判断一下权限，如果没有足够的权限那就不给你中转了，等等。</p><h2 id="代理分类"><a href="#代理分类" class="headerlink" title="代理分类"></a>代理分类</h2><p>事实上代理又被分成多种，大致有如下一些。</p><ul><li>虚代理：根据需要来创建开销很大的对象，该对象只有在需要的时候才会被真正创建。</li><li>远程代理：用来在不同的地址空间上代表同一个对象，这个不同的地址空间可以是在本机，也可以在其他机器上。在java里面最典型的就是rmi技术。</li><li>抄写代理：在客户端操作的时候，只有对象确实改变了，才会真的拷贝(或克隆)一个目标对象，算是虚代理的一个分支。</li><li>保护代理：控制对原始对象的访问，如果有需要，可以给不同的用户提供不同的访问权限，以控制他们对原始对象的访问。</li><li>缓存代理：为那些昂贵操作的结果提供临时的存储空间，以便多个客户端可以共享这些结果。</li><li>防火墙代理：保护对象不被恶意用户访问和操作。</li><li>同步代理：使多个用户能够同时访问目标对象而没有冲突。</li><li>智能指引：在访问对象时执行一些附加操作，比如，对指向实际对象的引用计数、第一次引用一个持久对象时，将它装入内存等。</li></ul><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><p>代理模式在客户和被客户访问的对象之间，引入了一定程度的间接性，客户是直接使用代理，让代理来与被访问的对象进行交互。不同的代理类型，这种附加的间接性有不同的用途，也就具有不同的特点。</p><ul><li>【远程代理】隐藏了一个对象存在于不同的地址空间的事实，也即是客户通过远程代理去访问一个对象，根本就不关心这个对象在哪里，也不关心如何通过网络去访问到这个对象。从客户的角度来讲，它只是在使用代理对象而已。</li><li>【虚代理】可以根据需要来创建“大”对象，只有到必须创建对象的时候，虚代理才会创建对象，从而大大加快程序运行速度，并节省资源。通过虚代理可以对系统进行优化。</li><li>【保护代理】可以在访问一个对象的前后，执行很多附加的操作，除了进行权限控制之外，还可以进行很多跟业务相关的处理，而不需要修改被代理的对象。也就是说，可以通过代理来给目标对象增加功能。</li><li>【智能指引】和保护代理类似，也是允许在访问一个对象的前后，执行很多附加的操作，这样一来就可以做很多额外的事情，比如，引用计数等。</li></ul><h3 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h3><p><img src="proxy-1.png" alt="proxy-1"></p><h2 id="何时使用"><a href="#何时使用" class="headerlink" title="何时使用"></a>何时使用</h2><p>建议在如下情况时选用代理模式</p><ul><li><p>需要为一个对象在不同的地址空间提供局部代表的时候，可以使用远程代理。</p></li><li><p>需要按照需要创建开销很大的对象的时候，可以使用虚代理。</p></li><li><p>需要控制对原始对象的访问的时候，可以使用保护代理。</p></li><li><p>需要在访问对象执行一些附加操作的时候，可以使用智能指引代理。</p></li></ul><h2 id="具体实现-懒加载示例"><a href="#具体实现-懒加载示例" class="headerlink" title="具体实现 - 懒加载示例"></a>具体实现 - 懒加载示例</h2><h3 id="用户类"><a href="#用户类" class="headerlink" title="用户类"></a>用户类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span></span><span class="token punctuation">;</span><span class="token comment">/** * @Author: Sam * @Date: 2022-08-03 09:53 * @Description: 用户类 */</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserModel</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> userId<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> deptId<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> sex<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="定义用户对象接口"><a href="#定义用户对象接口" class="headerlink" title="定义用户对象接口"></a>定义用户对象接口</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Author: Sam * @Date: 2022-08-03 09:51 * @Description: 定义用户对象接口 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserModelApi</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> <span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">setUserId</span><span class="token punctuation">(</span><span class="token class-name">String</span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> <span class="token function">getDeptId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">setDeptId</span><span class="token punctuation">(</span><span class="token class-name">String</span> deptId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> <span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">setSex</span><span class="token punctuation">(</span><span class="token class-name">String</span> sex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="模拟数据库用户表"><a href="#模拟数据库用户表" class="headerlink" title="模拟数据库用户表"></a>模拟数据库用户表</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span><span class="token comment">/** * @Author: Sam * @Date: 2022-08-03 10:23 * @Description: 模拟数据库用户表 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDB</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 模式数据库用户数据     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserModel</span><span class="token punctuation">></span></span> USER_DB_LIST <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">UserModel</span> u1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        u1<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span><span class="token string">"1001"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        u1<span class="token punctuation">.</span><span class="token function">setDeptId</span><span class="token punctuation">(</span><span class="token string">"100"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        u1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        u1<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span><span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        USER_DB_LIST<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>u1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">UserModel</span> u2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        u2<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span><span class="token string">"1002"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        u2<span class="token punctuation">.</span><span class="token function">setDeptId</span><span class="token punctuation">(</span><span class="token string">"100"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        u2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        u2<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span><span class="token string">"女"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        USER_DB_LIST<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>u2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">UserModel</span> u3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        u3<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span><span class="token string">"1003"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        u3<span class="token punctuation">.</span><span class="token function">setDeptId</span><span class="token punctuation">(</span><span class="token string">"200"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        u3<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"王五"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        u3<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span><span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        USER_DB_LIST<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>u3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="实现示例要求的功能"><a href="#实现示例要求的功能" class="headerlink" title="实现示例要求的功能"></a>实现示例要求的功能</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Collection</span></span><span class="token punctuation">;</span><span class="token comment">/** * @Author: Sam * @Date: 2022-08-03 09:56 * @Description: 实现示例要求的功能 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserManager</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 根据部门id查询用户信息     *     * @param deptId 部门id     * @return     */</span>    <span class="token keyword">public</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserModelApi</span><span class="token punctuation">></span></span> <span class="token function">getUserByDeptId</span><span class="token punctuation">(</span><span class="token class-name">String</span> deptId<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserModelApi</span><span class="token punctuation">></span></span> col <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//模拟请求数据库</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">UserModel</span> db <span class="token operator">:</span> <span class="token class-name">UserDB</span><span class="token punctuation">.</span>USER_DB_LIST<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>db<span class="token punctuation">.</span><span class="token function">getDeptId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>deptId<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Proxy</span> proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UserModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                proxy<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span>db<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                proxy<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>db<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                col<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>proxy<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> col<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="代理类"><a href="#代理类" class="headerlink" title="代理类"></a>代理类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Author: Sam * @Date: 2022-08-03 09:55 * @Description: 代理类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Proxy</span> <span class="token keyword">implements</span> <span class="token class-name">UserModelApi</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 被代理对象     */</span>    <span class="token keyword">private</span> <span class="token class-name">UserModel</span> realSubject <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 标识是否重载过数据     */</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> loaded <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span><span class="token class-name">UserModel</span> realSubject<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>realSubject <span class="token operator">=</span> realSubject<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> realSubject<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUserId</span><span class="token punctuation">(</span><span class="token class-name">String</span> userId<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        realSubject<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getDeptId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>loaded<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//从数据库中重载对象</span>            <span class="token function">reload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//设置重载标志为true</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>loaded <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> realSubject<span class="token punctuation">.</span><span class="token function">getDeptId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDeptId</span><span class="token punctuation">(</span><span class="token class-name">String</span> deptId<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        realSubject<span class="token punctuation">.</span><span class="token function">setDeptId</span><span class="token punctuation">(</span>deptId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> realSubject<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        realSubject<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>loaded<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//从数据库中重载对象</span>            <span class="token function">reload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//设置重载标志为true</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>loaded <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> realSubject<span class="token punctuation">.</span><span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSex</span><span class="token punctuation">(</span><span class="token class-name">String</span> sex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        realSubject<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span>sex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 重新查询数据库获取完整数据     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">reload</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//模拟请求数据库</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">UserModel</span> db <span class="token operator">:</span> <span class="token class-name">UserDB</span><span class="token punctuation">.</span>USER_DB_LIST<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>db<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>realSubject <span class="token operator">=</span> db<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="客户端调用类"><a href="#客户端调用类" class="headerlink" title="客户端调用类"></a>客户端调用类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Collection</span></span><span class="token punctuation">;</span><span class="token comment">/** * @Author: Sam * @Date: 2022-08-03 11:08 * @Description: 代理客户端 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//代理模式-懒加载示例</span>        <span class="token class-name">UserManager</span> userManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserModelApi</span><span class="token punctuation">></span></span> col <span class="token operator">=</span> userManager<span class="token punctuation">.</span><span class="token function">getUserByDeptId</span><span class="token punctuation">(</span><span class="token string">"100"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//如果只是显示用户名称，则不需要重新查询数据库</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">UserModelApi</span> umApi <span class="token operator">:</span> col<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"用户编号："</span> <span class="token operator">+</span> umApi<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 用户姓名："</span> <span class="token operator">+</span> umApi<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//如果访问非用户编号和用户姓名外的属性，那就会重新查询数据库</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">UserModelApi</span> umApi <span class="token operator">:</span> col<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"用户编号："</span> <span class="token operator">+</span> umApi<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>                    <span class="token string">" 用户姓名："</span> <span class="token operator">+</span> umApi<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>                    <span class="token string">" 所属部门："</span> <span class="token operator">+</span> umApi<span class="token punctuation">.</span><span class="token function">getDeptId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>                    <span class="token string">" 性别："</span> <span class="token operator">+</span> umApi<span class="token punctuation">.</span><span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">用户编号：1001 用户姓名：张三用户编号：1002 用户姓名：李四用户编号：1001 用户姓名：张三 所属部门：100 性别：男用户编号：1002 用户姓名：李四 所属部门：100 性别：女<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上就是<code>代理模式</code>介绍和示例了~</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java设计模式-中介者模式</title>
      <link href="/blog/2022/08/02/design-mediator/"/>
      <url>/blog/2022/08/02/design-mediator/</url>
      
        <content type="html"><![CDATA[<h1 id="Java设计模式-中介者模式"><a href="#Java设计模式-中介者模式" class="headerlink" title="Java设计模式-中介者模式"></a>Java设计模式-中介者模式</h1><h2 id="什么是中介者模式"><a href="#什么是中介者模式" class="headerlink" title="什么是中介者模式"></a>什么是中介者模式</h2><p>中介者的功能非常简单，就是封装对象之间的交互。如果一个对象的操作会引起其他相关对象的变化，或者是某个操作需要引起其他对象的后续或连带操作，而这个对象又不希望自己来处理这些关系，那么就可以找中介者，把所有的麻烦扔给它，只在需要的时候通知中介者，其他的就让中介者去处理就可以了。</p><p>反过来，其他的对象在操作的时候，可能会引起这个对象的变化，也可以这么做。最后对象之间就完全分离了，谁都不直接跟其他对象交互，那么相互的关系全部被集中到中介者对象里面了，所有的对象就只是跟中介者对象进行通信，相互之间不再有联系。</p><p>把所有对象之间的交互都封装在中介者当中，无形中还可以得到另外一个好处，就是能够集中地控制这些对象的交互关系，这样当有变化的时候，修改起来就很方便。</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>【松散耦合】中介者模式通过把多个同事对象之间的交互封装到中介者对象里面，从而使得同事对象之间松散耦合，基本上可以做到互不依赖。这样一来，同事对象就可以独立地变化和复用，而不再像以前那样“牵一发而动全身”了。</li><li>【集中控制交互】多个同事对象的交互，被封装在中介者对象里面集中管理，使得这些交互行为发生变化的时候，只需要修改中介者对象就可以了，当然如果是已经做好的系统，那就扩展中介者对象，而各个同事类不需要做修改。</li><li>【多对多变成一对多】没有使用中介者模式的时候，同事对象之间的关系通常是多对多的，引入中介者对象以后，中介者对象和同事对象的关系通常变成了双向的一对多，这会让对象的关系更容易理解和实现。</li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li>中介者模式的一个潜在缺点是，过度集中化。如果同事对象的交互非常多，而且比较复杂，当这些复杂性全部集中到中介者的时候，会导致中介者对象变得十分复杂，而且难于管理和维护。</li></ul><h3 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h3><p><img src="mediator-1.png" alt="mediator-1"></p><h2 id="何时使用"><a href="#何时使用" class="headerlink" title="何时使用"></a>何时使用</h2><p>建议在如下情况时选用中介者模式</p><ul><li><p>如果一组对象之间的通信方式比较复杂，导致相互依赖、结构混乱，可以采用中介者模式，把这些对象相互的交互管理起来，各个对象都只需要和中介者交互，从而使得各个对象松散耦合，结构也更清晰易懂。</p></li><li><p>如果一个对象引用很多的对象，并直接跟这些对象交互，导致难以复用该对象，可以采用中介者模式，把这个对象跟其他对象的交互封装到中介者对象里面，这个对象只需要和中介者对象交互就可以了。</p></li></ul><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><h3 id="中介者接口"><a href="#中介者接口" class="headerlink" title="中介者接口"></a>中介者接口</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Author: Sam * @Date: 2022-08-02 11:18 * @Description: 中介者 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Mediator</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 同事对象在自身改变的时候来通知中介者的方法     * 让中介者去负责相应的与其他同事对象的交互     *     * @param colleague 同事对象自身，好让中介者对象通过对象实例去获取同事对象的状态     */</span>    <span class="token keyword">void</span> <span class="token function">changed</span><span class="token punctuation">(</span><span class="token class-name">Colleague</span> colleague<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="同事类的抽象父类"><a href="#同事类的抽象父类" class="headerlink" title="同事类的抽象父类"></a>同事类的抽象父类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Author: Sam * @Date: 2022-08-02 11:14 * @Description: 同事类的抽象父类 */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Colleague</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Mediator</span> mediator<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Colleague</span><span class="token punctuation">(</span><span class="token class-name">Mediator</span> mediator<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mediator <span class="token operator">=</span> mediator<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Mediator</span> <span class="token function">getMediator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> mediator<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="同事类：光驱类"><a href="#同事类：光驱类" class="headerlink" title="同事类：光驱类"></a>同事类：光驱类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Author: Sam * @Date: 2022-08-02 11:20 * @Description: 同事类：光驱类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CDDriver</span> <span class="token keyword">extends</span> <span class="token class-name">Colleague</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 光驱数据     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> data <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">CDDriver</span><span class="token punctuation">(</span><span class="token class-name">Mediator</span> mediator<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>mediator<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 读取光盘     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">readCD</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token string">"设计模式,值得好好研究"</span><span class="token punctuation">;</span>        <span class="token comment">//通知主板，自己的状态发生了改变</span>        <span class="token function">getMediator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">changed</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 获取光驱数据     */</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> data<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="同事类：CPU类"><a href="#同事类：CPU类" class="headerlink" title="同事类：CPU类"></a>同事类：CPU类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Author: Sam * @Date: 2022-08-02 11:20 * @Description: 同事类：CPU类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CPU</span> <span class="token keyword">extends</span> <span class="token class-name">Colleague</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 分解出来的视频数据     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> videoData <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 分解出来的声音数据     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> soundData <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">CPU</span><span class="token punctuation">(</span><span class="token class-name">Mediator</span> mediator<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>mediator<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 处理数据，把数据分成音频和视频的数据     *     * @param data 被处理的数据     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">executeData</span><span class="token punctuation">(</span><span class="token class-name">String</span> data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//把数据分解开，前面的是视频数据，后面的是音频数据</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ss <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>videoData <span class="token operator">=</span> ss<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>soundData <span class="token operator">=</span> ss<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">//通知主板，CPU的工作完成</span>        <span class="token function">getMediator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">changed</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getVideoData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> videoData<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getSoundData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> soundData<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="同事类：声卡类"><a href="#同事类：声卡类" class="headerlink" title="同事类：声卡类"></a>同事类：声卡类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Author: Sam * @Date: 2022-08-02 11:20 * @Description: 同事类：声卡类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SoundCard</span> <span class="token keyword">extends</span> <span class="token class-name">Colleague</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">SoundCard</span><span class="token punctuation">(</span><span class="token class-name">Mediator</span> mediator<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>mediator<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 按照声频数据发出声音     *     * @param data 发出声音的数据     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">soundData</span><span class="token punctuation">(</span><span class="token class-name">String</span> data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"画外音："</span> <span class="token operator">+</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="同事类：显卡类"><a href="#同事类：显卡类" class="headerlink" title="同事类：显卡类"></a>同事类：显卡类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Author: Sam * @Date: 2022-08-02 11:20 * @Description: 同事类：显卡类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VideoCard</span> <span class="token keyword">extends</span> <span class="token class-name">Colleague</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">VideoCard</span><span class="token punctuation">(</span><span class="token class-name">Mediator</span> mediator<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>mediator<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 显示视频数据     *     * @param data 被显示的数据     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showData</span><span class="token punctuation">(</span><span class="token class-name">String</span> data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"您正观看的是："</span> <span class="token operator">+</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="中介者实现：主板类"><a href="#中介者实现：主板类" class="headerlink" title="中介者实现：主板类"></a>中介者实现：主板类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Author: Sam * @Date: 2022-08-02 11:24 * @Description: 主板类，实现中介者接口 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MotherBoard</span> <span class="token keyword">implements</span> <span class="token class-name">Mediator</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 持有并维护同事类-光驱类     */</span>    <span class="token keyword">public</span> <span class="token class-name">CDDriver</span> cdDriver<span class="token punctuation">;</span>    <span class="token comment">/**     * 持有并维护同事类-CPU类     */</span>    <span class="token keyword">public</span> <span class="token class-name">CPU</span> cpu<span class="token punctuation">;</span>    <span class="token comment">/**     * 持有并维护同事类-显卡类     */</span>    <span class="token keyword">public</span> <span class="token class-name">VideoCard</span> videoCard<span class="token punctuation">;</span>    <span class="token comment">/**     * 持有并维护同事类-声卡类     */</span>    <span class="token keyword">public</span> <span class="token class-name">SoundCard</span> soundCard<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">changed</span><span class="token punctuation">(</span><span class="token class-name">Colleague</span> colleague<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>colleague <span class="token operator">==</span> cdDriver<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//表示光驱读取数据了</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">opeCDDriverReadData</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">CDDriver</span><span class="token punctuation">)</span> colleague<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>colleague <span class="token operator">==</span> cpu<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//表示CPU处理完了</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">opeCPU</span><span class="token punctuation">(</span><span class="token punctuation">(</span>CPU<span class="token punctuation">)</span> colleague<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">opeCDDriverReadData</span><span class="token punctuation">(</span><span class="token class-name">CDDriver</span> cd<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//1：先获取光驱读取的数据</span>        <span class="token class-name">String</span> data <span class="token operator">=</span> cd<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2：把这些数据传递给CPU进行处理</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cpu<span class="token punctuation">.</span><span class="token function">executeData</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">opeCPU</span><span class="token punctuation">(</span><span class="token class-name">CPU</span> cpu<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//1：先获取CPU处理后的数据</span>        <span class="token class-name">String</span> videoData <span class="token operator">=</span> cpu<span class="token punctuation">.</span><span class="token function">getVideoData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> soundData <span class="token operator">=</span> cpu<span class="token punctuation">.</span><span class="token function">getSoundData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2：把这些数据传递给显卡和声卡展示出来</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>videoCard<span class="token punctuation">.</span><span class="token function">showData</span><span class="token punctuation">(</span>videoData<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>soundCard<span class="token punctuation">.</span><span class="token function">soundData</span><span class="token punctuation">(</span>soundData<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCdDriver</span><span class="token punctuation">(</span><span class="token class-name">CDDriver</span> cdDriver<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cdDriver <span class="token operator">=</span> cdDriver<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCpu</span><span class="token punctuation">(</span><span class="token class-name">CPU</span> cpu<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cpu <span class="token operator">=</span> cpu<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setVideoCard</span><span class="token punctuation">(</span><span class="token class-name">VideoCard</span> videoCard<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>videoCard <span class="token operator">=</span> videoCard<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSoundCard</span><span class="token punctuation">(</span><span class="token class-name">SoundCard</span> soundCard<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>soundCard <span class="token operator">=</span> soundCard<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="客户端调用类"><a href="#客户端调用类" class="headerlink" title="客户端调用类"></a>客户端调用类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Author: Sam * @Date: 2022-08-02 14:01 * @Description: 中介者客户端 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//1：创建中介者--主板对象</span>        <span class="token class-name">MotherBoard</span> mediator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MotherBoard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2：创建同事类</span>        <span class="token class-name">CDDriver</span> cd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CDDriver</span><span class="token punctuation">(</span>mediator<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">CPU</span> cpu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CPU</span><span class="token punctuation">(</span>mediator<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">VideoCard</span> vc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VideoCard</span><span class="token punctuation">(</span>mediator<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SoundCard</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SoundCard</span><span class="token punctuation">(</span>mediator<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3：让中介者知道所有的同事</span>        mediator<span class="token punctuation">.</span><span class="token function">setCdDriver</span><span class="token punctuation">(</span>cd<span class="token punctuation">)</span><span class="token punctuation">;</span>        mediator<span class="token punctuation">.</span><span class="token function">setCpu</span><span class="token punctuation">(</span>cpu<span class="token punctuation">)</span><span class="token punctuation">;</span>        mediator<span class="token punctuation">.</span><span class="token function">setVideoCard</span><span class="token punctuation">(</span>vc<span class="token punctuation">)</span><span class="token punctuation">;</span>        mediator<span class="token punctuation">.</span><span class="token function">setSoundCard</span><span class="token punctuation">(</span>sc<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//4：开始看电影，把光盘放入光驱，光驱开始读盘</span>        cd<span class="token punctuation">.</span><span class="token function">readCD</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">您正观看的是：设计模式画外音：值得好好研究<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上就是<code>中介者模式</code>介绍和示例了~</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java设计模式-原型模式</title>
      <link href="/blog/2022/08/02/design-prototype/"/>
      <url>/blog/2022/08/02/design-prototype/</url>
      
        <content type="html"><![CDATA[<h1 id="Java设计模式-原型模式"><a href="#Java设计模式-原型模式" class="headerlink" title="Java设计模式-原型模式"></a>Java设计模式-原型模式</h1><h2 id="什么是原型模式"><a href="#什么是原型模式" class="headerlink" title="什么是原型模式"></a>什么是原型模式</h2><ol><li>原型模式的功能</li></ol><p>原型模式要实现的主要功能就是:通过克隆来创建新的对象实例。一般来讲，新创建出来的实例的数据是和原型实例一样的。但是具体如何实现克隆，需要由程序自行实现，原型模式并没有统一的要求和实现算法。</p><ol start="2"><li>原型与new</li></ol><p>原型模式从某种意义上说，就像是新操作，在前面的例子实现中，克隆方法就是使用新来实现的。但请注意，只是“类似于新的”而不是“就是新”。</p><p>克隆方法和新操作最明显的不同就在于：新一个对象实例，一般属性是没有值的，或者是只有默认值；如果是克隆得到的一个实例，通常属性是有值的，属性的值就是原型对象实例在克隆的时候，原型对象实例的属性的值。</p><ol start="3"><li>原型实例和克隆的实例</li></ol><p>原型实例和克隆出来的实例，本质上是不同的实例，克隆完成后，它们之间是没有关联的，如果克隆完成后，克隆出来的实例的属性值发生了改变，是不会影响到原型实例的。</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>【对客户端隐藏具体的实现类型】原型模式的客户端只知道原型接口的类型，并不知道具体的实现类型，从而减少了客户端对这些具体实现类型的依赖。</li><li>【在运行时动态改变具体的实现类型】原型模式可以在运行期间，由客户来注册符合原型接口的实现类型，也可以动态地改变具体的实现类型，看起来接口没有任何变化，但其实运行的已经是另外一个类实例了。因为克隆一个原型就类似于实例化一个类。</li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li>原型模式最大的缺点就在于每个原型的子类都必须实现克隆的操作，尤其在包含引用类型的对象时，克隆方法会比较麻烦，必须要能够递归地让所有的相关对象都要正确地实现克隆。</li></ul><h3 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h3><p><img src="prototype-1.png" alt="prototype-1"></p><h2 id="何时使用"><a href="#何时使用" class="headerlink" title="何时使用"></a>何时使用</h2><p>建议在如下情况时选用原型模式</p><ul><li><p>如果一个系统想要独立于它想要使用的对象时，可以使用原型模式，让系统只面向接口编程，在系统需要新的对象的时候，可以通过克隆原型来得到。</p></li><li><p>如果需要实例化的类是在运行时刻动态指定时，可以使用原型模式，通过克隆原型来得到需要的实例。</p></li></ul><h2 id="浅度克隆和深度克隆"><a href="#浅度克隆和深度克隆" class="headerlink" title="浅度克隆和深度克隆"></a>浅度克隆和深度克隆</h2><p>无论你是自己实现克隆方法，还是采用提供的克隆方法，都存在一个浅度克隆和深度克隆的问题，那么什么是浅度克隆？什么是深度克隆呢?简单地解释一下。</p><ul><li><p>浅度克隆：只负责克隆按值传递的数据(比如基本数据类型、字符串类型)。</p></li><li><p>深度克隆：除了浅度克隆要克隆的值外，还负责克隆引用类型的数据，基本上就是被克隆实例所有的属性数据都会被克隆出来。</p></li></ul><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><h3 id="订单接口"><a href="#订单接口" class="headerlink" title="订单接口"></a>订单接口</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Author: Sam * @Date: 2022-08-02 10:28 * @Description: 订单接口 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">OrderApi</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> <span class="token function">getOrderProductNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">setOrderProductNum</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 克隆方法     */</span>    <span class="token class-name">OrderApi</span> <span class="token function">cloneOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="个人订单对象实现类"><a href="#个人订单对象实现类" class="headerlink" title="个人订单对象实现类"></a>个人订单对象实现类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Author: Sam * @Date: 2022-08-02 10:30 * @Description: 个人订单对象实现类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PersonalOrder</span> <span class="token keyword">implements</span> <span class="token class-name">OrderApi</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> customerName<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> productId<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> orderProductNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getOrderProductNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>orderProductNum<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setOrderProductNum</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>orderProductNum <span class="token operator">=</span> num<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">OrderApi</span> <span class="token function">cloneOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">PersonalOrder</span> order <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PersonalOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        order<span class="token punctuation">.</span><span class="token function">setCustomerName</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>customerName<span class="token punctuation">)</span><span class="token punctuation">;</span>        order<span class="token punctuation">.</span><span class="token function">setProductId</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>productId<span class="token punctuation">)</span><span class="token punctuation">;</span>        order<span class="token punctuation">.</span><span class="token function">setOrderProductNum</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>orderProductNum<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> order<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getCustomerName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> customerName<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCustomerName</span><span class="token punctuation">(</span><span class="token class-name">String</span> customerName<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>customerName <span class="token operator">=</span> customerName<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getProductId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> productId<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setProductId</span><span class="token punctuation">(</span><span class="token class-name">String</span> productId<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>productId <span class="token operator">=</span> productId<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"PersonalOrder&#123;"</span> <span class="token operator">+</span>                <span class="token string">"customerName='"</span> <span class="token operator">+</span> customerName <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token string">", productId='"</span> <span class="token operator">+</span> productId <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token string">", orderProductNum="</span> <span class="token operator">+</span> orderProductNum <span class="token operator">+</span>                <span class="token char">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="订单业务"><a href="#订单业务" class="headerlink" title="订单业务"></a>订单业务</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Author: Sam * @Date: 2022-08-02 10:35 * @Description: 订单业务 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderBusiness</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveOrder</span><span class="token punctuation">(</span><span class="token class-name">OrderApi</span> order<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//1：判断当前的预订产品数量是否大于1000</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>order<span class="token punctuation">.</span><span class="token function">getOrderProductNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//2：如果大于，还需要继续拆分</span>            <span class="token comment">//2.1：在新建一份订单，跟传入的订单除了数量不一样外，其他相同</span>            <span class="token class-name">OrderApi</span> newOder <span class="token operator">=</span> order<span class="token punctuation">.</span><span class="token function">cloneOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//然后进行赋值，产品数量为1000</span>            newOder<span class="token punctuation">.</span><span class="token function">setOrderProductNum</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//2.2：原来的订单保留，把数量设置成减少1000</span>            order<span class="token punctuation">.</span><span class="token function">setOrderProductNum</span><span class="token punctuation">(</span>order<span class="token punctuation">.</span><span class="token function">getOrderProductNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//然后是业务功能处理</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"拆分成生成订单："</span> <span class="token operator">+</span> newOder<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//3：不超过，那就直接业务功能处理</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"订单："</span> <span class="token operator">+</span> order<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="客户端调用类"><a href="#客户端调用类" class="headerlink" title="客户端调用类"></a>客户端调用类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Author: Sam * @Date: 2022-07-21 10:45 * @Description: 原型客户端 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">PersonalOrder</span> orderApi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PersonalOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        orderApi<span class="token punctuation">.</span><span class="token function">setProductId</span><span class="token punctuation">(</span><span class="token string">"1001"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        orderApi<span class="token punctuation">.</span><span class="token function">setCustomerName</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        orderApi<span class="token punctuation">.</span><span class="token function">setOrderProductNum</span><span class="token punctuation">(</span><span class="token number">2300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">OrderBusiness</span> ob <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrderBusiness</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ob<span class="token punctuation">.</span><span class="token function">saveOrder</span><span class="token punctuation">(</span>orderApi<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">现在在操作A模块里面的testA方法现在在操作B模块里面拆分成生成订单：PersonalOrder&#123;customerName&#x3D;&#39;张三&#39;, productId&#x3D;&#39;1001&#39;, orderProductNum&#x3D;1000&#125;拆分成生成订单：PersonalOrder&#123;customerName&#x3D;&#39;张三&#39;, productId&#x3D;&#39;1001&#39;, orderProductNum&#x3D;1000&#125;订单：PersonalOrder&#123;customerName&#x3D;&#39;张三&#39;, productId&#x3D;&#39;1001&#39;, orderProductNum&#x3D;300&#125;的testB方法现在在操作C模块里面的testC方法<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上就是<code>原型模式</code>介绍和示例了~</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java设计模式-建筑者模式</title>
      <link href="/blog/2022/07/25/design-builder/"/>
      <url>/blog/2022/07/25/design-builder/</url>
      
        <content type="html"><![CDATA[<h1 id="Java设计模式-建筑者模式"><a href="#Java设计模式-建筑者模式" class="headerlink" title="Java设计模式-建筑者模式"></a>Java设计模式-建筑者模式</h1><h2 id="什么是建筑者模式"><a href="#什么是建筑者模式" class="headerlink" title="什么是建筑者模式"></a>什么是建筑者模式</h2><p>生成器模式的主要功能是构建复杂的产品，而且是细化的、分步骤的构建产品，也就是生成器模式重在一步一步解决构造复杂对象的问题.如果仅仅这么认识生成器模式的功能是不够的.</p><p>要特别注意，生成器模式分成两个很重要的部分</p><ul><li>一个部分是Builder接口，这里是定义了如何构建各个部件，也就是知道每个部件功能如何实现，以及如何装配这些部件到产品中去；</li><li>另外一个部分是Direcotr，Direcotr是知道如何组合来构建产品，也就是说Direcotr负责整体的构建算法，而且通常是分步骤地来执行。</li></ul><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>【松散耦合】生成器模式可以用同一个构建算法构建出表现上完全不同的产品，实现产品构建和产品表现上的分离.生成器模式正是把产品构建的过程独立出来，使它和具体产品的表现松散耦合，从而使得构建算法可以复用，而具体产品表现也可以灵活地、方便地扩展和切换。</li><li>【可以很容易地改变产品的内部表示】在生成器模式中，由于Builder对象只是提供接口给使用，那么具体的部件创建和装配方式是被Builder接口隐藏了的导演并不知道这些具体的实现细节。这样一来，要想改变产品的内部表示，只需要切换Builder的具体实现即可，不用管主管，因此变得很容易。</li><li>【更好的复用性】生成器模式很好地实现了构建算法和具体产品实现的分离.这样一来，使得构建产品的算法可以复用.同样的道理，具体产品的实现也可以复用，同一个产品的实现，可以配合不同的构建算法使用。</li></ul><h3 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h3><p><img src="builder-1.png" alt="builder-1"></p><h2 id="何时使用"><a href="#何时使用" class="headerlink" title="何时使用"></a>何时使用</h2><p>建议在如下情况时选用生成器模式</p><ul><li><p>如果创建对象的算法，应该独立于该对象的组成部分以及它们的装配方式时。</p></li><li><p>如果同一个构建过程有着不同的表示时</p></li></ul><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><h3 id="1-构造装配"><a href="#1-构造装配" class="headerlink" title="1. 构造装配"></a>1. 构造装配</h3><h4 id="输出文件头对象"><a href="#输出文件头对象" class="headerlink" title="输出文件头对象"></a>输出文件头对象</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span></span><span class="token punctuation">;</span><span class="token comment">/** * @Author: Sam * @Date: 2022-07-25 09:48 * @Description: 输出文件头对象 */</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExportHeaderModel</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 分公司id     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> deptId<span class="token punctuation">;</span>    <span class="token comment">/**     * 导出数据的日期     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> exportDate<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="输出文件数据对象"><a href="#输出文件数据对象" class="headerlink" title="输出文件数据对象"></a>输出文件数据对象</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span></span><span class="token punctuation">;</span><span class="token comment">/** * @Author: Sam * @Date: 2022-07-25 09:48 * @Description: 输出文件数据对象 */</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExportDataModel</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 产品编号     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> productId<span class="token punctuation">;</span>    <span class="token comment">/**     * 产品编号     */</span>    <span class="token keyword">private</span> <span class="token class-name">Double</span> price<span class="token punctuation">;</span>    <span class="token comment">/**     * 产品编号     */</span>    <span class="token keyword">private</span> <span class="token class-name">Double</span> amount<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="输出文件尾对象"><a href="#输出文件尾对象" class="headerlink" title="输出文件尾对象"></a>输出文件尾对象</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span></span><span class="token punctuation">;</span><span class="token comment">/** * @Author: Sam * @Date: 2022-07-25 09:48 * @Description: 输出文件尾对象 */</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExportFooterModel</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 输出人     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> exportUser<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="生成器接口"><a href="#生成器接口" class="headerlink" title="生成器接口"></a>生成器接口</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Collection</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span><span class="token comment">/** * @Author: Sam * @Date: 2022-07-25 09:42 * @Description: 生成器接口，定义创建一个产品对象所需的各个部件的操作 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Builder</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 构建输出文件的头的部分     */</span>    <span class="token keyword">void</span> <span class="token function">buildHeader</span><span class="token punctuation">(</span><span class="token class-name">ExportHeaderModel</span> ehm<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 构建输出文件的内容的部分     */</span>    <span class="token keyword">void</span> <span class="token function">buildBody</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Collection</span><span class="token punctuation">&lt;</span><span class="token class-name">ExportDataModel</span><span class="token punctuation">></span><span class="token punctuation">></span></span> mapData<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 构建输出文件的尾的部分     */</span>    <span class="token keyword">void</span> <span class="token function">buildFooter</span><span class="token punctuation">(</span><span class="token class-name">ExportFooterModel</span> efm<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="文本的生成器对象"><a href="#文本的生成器对象" class="headerlink" title="文本的生成器对象"></a>文本的生成器对象</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Collection</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span><span class="token comment">/** * @Author: Sam * @Date: 2022-07-25 09:43 * @Description: 实现导出数据到文本的生成器对象 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TxtBuilder</span> <span class="token keyword">implements</span> <span class="token class-name">Builder</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 生成器最终构建的产品对象，相当于产品     */</span>    <span class="token keyword">private</span> <span class="token class-name">StringBuffer</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">StringBuffer</span> <span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> buffer<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildHeader</span><span class="token punctuation">(</span><span class="token class-name">ExportHeaderModel</span> ehm<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>ehm<span class="token punctuation">.</span><span class="token function">getDeptId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> ehm<span class="token punctuation">.</span><span class="token function">getExportDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildBody</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Collection</span><span class="token punctuation">&lt;</span><span class="token class-name">ExportDataModel</span><span class="token punctuation">></span><span class="token punctuation">></span></span> mapData<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> tblName <span class="token operator">:</span> mapData<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>tblName <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ExportDataModel</span> edm <span class="token operator">:</span> mapData<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>tblName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>edm<span class="token punctuation">.</span><span class="token function">getProductId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> edm<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> edm<span class="token punctuation">.</span><span class="token function">getAmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildFooter</span><span class="token punctuation">(</span><span class="token class-name">ExportFooterModel</span> efm<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>efm<span class="token punctuation">.</span><span class="token function">getExportUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Xml的生成器对象"><a href="#Xml的生成器对象" class="headerlink" title="Xml的生成器对象"></a>Xml的生成器对象</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Collection</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span><span class="token comment">/** * @Author: Sam * @Date: 2022-07-25 09:43 * @Description: 实现导出数据到Xml的生成器对象 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XmlBuilder</span> <span class="token keyword">implements</span> <span class="token class-name">Builder</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 生成器最终构建的产品对象，相当于产品     */</span>    <span class="token keyword">private</span> <span class="token class-name">StringBuffer</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">StringBuffer</span> <span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> buffer<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildHeader</span><span class="token punctuation">(</span><span class="token class-name">ExportHeaderModel</span> ehm<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;?xml version='1.0' encoding='gb2312'?>\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;Report>\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"  &lt;Header>\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"    &lt;DeptId>"</span> <span class="token operator">+</span> ehm<span class="token punctuation">.</span><span class="token function">getDeptId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;/DeptId>\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"    &lt;ExportDate>"</span> <span class="token operator">+</span> ehm<span class="token punctuation">.</span><span class="token function">getExportDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;/ExportDate>\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"  &lt;/Header>\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildBody</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Collection</span><span class="token punctuation">&lt;</span><span class="token class-name">ExportDataModel</span><span class="token punctuation">></span><span class="token punctuation">></span></span> mapData<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"  &lt;Body>\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> tblName <span class="token operator">:</span> mapData<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"    &lt;Datas TableName =\""</span> <span class="token operator">+</span> tblName <span class="token operator">+</span> <span class="token string">"\">\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ExportDataModel</span> edm <span class="token operator">:</span> mapData<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>tblName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"      &lt;Data>\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"        &lt;ProductId>"</span> <span class="token operator">+</span> edm<span class="token punctuation">.</span><span class="token function">getProductId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;/ProductId>\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"        &lt;Price>"</span> <span class="token operator">+</span> edm<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;/Price>\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"        &lt;Amount>"</span> <span class="token operator">+</span> edm<span class="token punctuation">.</span><span class="token function">getAmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;/Amount>\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"      &lt;/Data>\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"    &lt;/Datas>\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"  &lt;/Body>\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildFooter</span><span class="token punctuation">(</span><span class="token class-name">ExportFooterModel</span> efm<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"  &lt;Footer>\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"    &lt;ExportUser>"</span> <span class="token operator">+</span> efm<span class="token punctuation">.</span><span class="token function">getExportUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;/ExportUser>\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"  &lt;/Footer>\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;/Report>\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="生成器客户端"><a href="#生成器客户端" class="headerlink" title="生成器客户端"></a>生成器客户端</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Collection</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span><span class="token comment">/** * @Author: Sam * @Date: 2022-07-25 10:17 * @Description: 生成器客户端 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ExportHeaderModel</span> ehm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExportHeaderModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ehm<span class="token punctuation">.</span><span class="token function">setDeptId</span><span class="token punctuation">(</span><span class="token string">"一分公司"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ehm<span class="token punctuation">.</span><span class="token function">setExportDate</span><span class="token punctuation">(</span><span class="token string">"2022-07-25"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Collection</span><span class="token punctuation">&lt;</span><span class="token class-name">ExportDataModel</span><span class="token punctuation">></span><span class="token punctuation">></span></span> mapData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ExportDataModel</span><span class="token punctuation">></span></span> col <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ExportDataModel</span> edm1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExportDataModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        edm1<span class="token punctuation">.</span><span class="token function">setProductId</span><span class="token punctuation">(</span><span class="token string">"产品001号"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        edm1<span class="token punctuation">.</span><span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token number">100d</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        edm1<span class="token punctuation">.</span><span class="token function">setAmount</span><span class="token punctuation">(</span><span class="token number">80d</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ExportDataModel</span> edm2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExportDataModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        edm2<span class="token punctuation">.</span><span class="token function">setProductId</span><span class="token punctuation">(</span><span class="token string">"产品002号"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        edm2<span class="token punctuation">.</span><span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token number">99d</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        edm2<span class="token punctuation">.</span><span class="token function">setAmount</span><span class="token punctuation">(</span><span class="token number">55d</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        col<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>edm1<span class="token punctuation">)</span><span class="token punctuation">;</span>        col<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>edm2<span class="token punctuation">)</span><span class="token punctuation">;</span>        mapData<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"销售记录表"</span><span class="token punctuation">,</span> col<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ExportFooterModel</span> efm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExportFooterModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        efm<span class="token punctuation">.</span><span class="token function">setExportUser</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//测试输出到文本文件</span>        <span class="token class-name">TxtBuilder</span> txtBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TxtBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建指导者对象</span>        <span class="token class-name">Director</span> director <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Director</span><span class="token punctuation">(</span>txtBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>        director<span class="token punctuation">.</span><span class="token function">construct</span><span class="token punctuation">(</span>ehm<span class="token punctuation">,</span> mapData<span class="token punctuation">,</span> efm<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//输出控制台</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输出到文本文件的内容：\n"</span> <span class="token operator">+</span> txtBuilder<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">XmlBuilder</span> xmlBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XmlBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Director</span> director2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Director</span><span class="token punctuation">(</span>xmlBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>        director2<span class="token punctuation">.</span><span class="token function">construct</span><span class="token punctuation">(</span>ehm<span class="token punctuation">,</span> mapData<span class="token punctuation">,</span> efm<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输出到xml文件的内容：\n"</span> <span class="token operator">+</span> xmlBuilder<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h4><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">输出到文本文件的内容：一分公司,2022-07-25销售记录表产品001号,100.0,80.0产品002号,99.0,55.0张三输出到xml文件的内容：&lt;?xml version&#x3D;&#39;1.0&#39; encoding&#x3D;&#39;gb2312&#39;?&gt;&lt;Report&gt;  &lt;Header&gt;    &lt;DeptId&gt;一分公司&lt;&#x2F;DeptId&gt;    &lt;ExportDate&gt;2022-07-25&lt;&#x2F;ExportDate&gt;  &lt;&#x2F;Header&gt;  &lt;Body&gt;    &lt;Datas TableName &#x3D;&quot;销售记录表&quot;&gt;      &lt;Data&gt;        &lt;ProductId&gt;产品001号&lt;&#x2F;ProductId&gt;        &lt;Price&gt;100.0&lt;&#x2F;Price&gt;        &lt;Amount&gt;80.0&lt;&#x2F;Amount&gt;      &lt;&#x2F;Data&gt;      &lt;Data&gt;        &lt;ProductId&gt;产品002号&lt;&#x2F;ProductId&gt;        &lt;Price&gt;99.0&lt;&#x2F;Price&gt;        &lt;Amount&gt;55.0&lt;&#x2F;Amount&gt;      &lt;&#x2F;Data&gt;    &lt;&#x2F;Datas&gt;  &lt;&#x2F;Body&gt;  &lt;Footer&gt;    &lt;ExportUser&gt;张三&lt;&#x2F;ExportUser&gt;  &lt;&#x2F;Footer&gt;&lt;&#x2F;Report&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-构造复杂对象"><a href="#2-构造复杂对象" class="headerlink" title="2. 构造复杂对象"></a>2. 构造复杂对象</h3><h4 id="认证配置对象"><a href="#认证配置对象" class="headerlink" title="认证配置对象"></a>认证配置对象</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Author: Sam * @Date: 2022-07-25 11:26 * @Description: 认证配置对象 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AuthConfig</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> appId<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> secret<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> expireTime<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">AuthConfig</span><span class="token punctuation">(</span><span class="token class-name">AuthConfigBuilder</span> builder<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>appId <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">getAppId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>secret <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">getSecret</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>expireTime <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">getExpireTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"AuthConfig&#123;"</span> <span class="token operator">+</span>                <span class="token string">"appId='"</span> <span class="token operator">+</span> appId <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token string">", secret='"</span> <span class="token operator">+</span> secret <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token string">", expireTime="</span> <span class="token operator">+</span> expireTime <span class="token operator">+</span>                <span class="token char">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * @Author: Sam * @Date: 2022-07-21 10:45 * @Description: 客户端 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//使用Facade</span>        <span class="token keyword">new</span> <span class="token class-name">Facade</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="认证配置类生成器对象"><a href="#认证配置类生成器对象" class="headerlink" title="认证配置类生成器对象"></a>认证配置类生成器对象</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Author: Sam * @Date: 2022-07-25 11:35 * @Description: 认证配置类生成器对象 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AuthConfigBuilder</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> appId<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> secret<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> expireTime<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">AuthConfigBuilder</span><span class="token punctuation">(</span><span class="token class-name">String</span> appId<span class="token punctuation">,</span> <span class="token class-name">String</span> secret<span class="token punctuation">,</span> <span class="token keyword">long</span> expireTime<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>appId <span class="token operator">=</span> appId<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>secret <span class="token operator">=</span> secret<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>expireTime <span class="token operator">=</span> expireTime<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">AuthConfigBuilder</span> <span class="token function">setAppId</span><span class="token punctuation">(</span><span class="token class-name">String</span> appId<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>appId <span class="token operator">=</span> appId<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">AuthConfigBuilder</span> <span class="token function">setSecret</span><span class="token punctuation">(</span><span class="token class-name">String</span> secret<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>secret <span class="token operator">=</span> secret<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">AuthConfigBuilder</span> <span class="token function">setExpireTime</span><span class="token punctuation">(</span><span class="token keyword">long</span> expireTime<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>expireTime <span class="token operator">=</span> expireTime<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">AuthConfig</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"AuthConfig通过AuthConfigBuilder进行创建"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AuthConfig</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getAppId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> appId<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getSecret</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> secret<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getExpireTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> expireTime<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="生成器客户端-1"><a href="#生成器客户端-1" class="headerlink" title="生成器客户端"></a>生成器客户端</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Author: Sam * @Date: 2022-07-25 10:17 * @Description: 生成器客户端 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">AuthConfigBuilder</span> authConfigBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AuthConfigBuilder</span><span class="token punctuation">(</span><span class="token string">"ASDJiuNV"</span><span class="token punctuation">,</span> <span class="token string">"FOYWInlxUI"</span><span class="token punctuation">,</span> <span class="token number">1200</span> <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">AuthConfig</span> authConfig <span class="token operator">=</span> authConfigBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"authConfig = "</span> <span class="token operator">+</span> authConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h4><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">AuthConfig通过AuthConfigBuilder进行创建authConfig &#x3D; AuthConfig&#123;appId&#x3D;&#39;ASDJiuNV&#39;, secret&#x3D;&#39;FOYWInlxUI&#39;, expireTime&#x3D;72000&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上就是<code>建筑者模式</code>介绍和示例了~</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java设计模式-单例模式</title>
      <link href="/blog/2022/07/22/design-singleton/"/>
      <url>/blog/2022/07/22/design-singleton/</url>
      
        <content type="html"><![CDATA[<h1 id="Java设计模式-单例模式"><a href="#Java设计模式-单例模式" class="headerlink" title="Java设计模式-单例模式"></a>Java设计模式-单例模式</h1><h2 id="什么是单例模式"><a href="#什么是单例模式" class="headerlink" title="什么是单例模式"></a>什么是单例模式</h2><p>单例模式是用来保证这个类在运行期间只会被创建一个类实例，另外，单例模式还提供了一个全局唯一访问这个类实例的访问点，就是getInstance方法.不管采用懒汉式还是饿汉式的实现方式，这个全局访问点是一样的。</p><p>对于单例模式而言，不管采用何种实现方式，它都是只关心类实例的创建问题，并不关心具体的业务功能。</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li><p>【实例控制】单例模式会阻止其他对象实例化其自己的单例对象的副本，从而确保所有对象都访问唯一实例。</p></li><li><p>【减少性能开销】因为单例模式只生成一个实例，减少了系统性能开销。当一个对象的产生需要比较多的资源时，如读取配置、产生其他依赖对象时，则可以通过在应用启动时直接产生一个单例对象，然后永久驻留内存的方式来解决。</p></li></ul><h2 id="何时使用"><a href="#何时使用" class="headerlink" title="何时使用"></a>何时使用</h2><p>建议在如下情况时选用单例模式</p><ul><li>当您想控制实例数目，节省系统资源的时候</li></ul><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><h3 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h3><p><img src="singleton-1.png" alt="singleton-1"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Author: Sam * @Date: 2022-07-22 15:40 * @Description: 单例模式-懒汉式 线程不安全 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LazySingleton</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//定义一个变量来存储类实例</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">LazySingleton</span> instance <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token comment">//私有化构造方法，好在内部控制创建实例的数目</span>    <span class="token keyword">private</span> <span class="token class-name">LazySingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">LazySingleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//判断存储实例的变量是否有值</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//如果没有就创建一个实例</span>            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LazySingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>优点：节省内存空间，在使用的时候才会创建；</strong></p><p><strong>缺点：线程不安全</strong>，在多线程下，可能会创建多个实例(一定要重视这个问题，有时候如果在单例对象的构造方法中做了某些重要操作，创建多个实例可能会造成可怕后果。</p><h3 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h3><p><img src="singleton-2.png" alt="singleton-2"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Author: Sam * @Date: 2022-07-22 15:45 * @Description: 单例模式-饿汉式 线程安全 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HungrySingleton</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//定义一个变量来存储类实例 并先初始化好</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">HungrySingleton</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HungrySingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//私有化构造方法，好在内部控制创建实例的数目</span>    <span class="token keyword">private</span> <span class="token class-name">HungrySingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">HungrySingleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//直接返回实例</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>优点：实现简单，不存在多线程问题</strong>，直接声明一个私有对象，然后对外提供一个获取对象的方法。</p><p><strong>缺点</strong>：class 类在被加载的时候创建Singleton实例，如果对象创建后一直没有使用，则会浪费很大的内存空间，此方法不适合创建大对象。</p><h3 id="懒汉式-双重检查加锁机制"><a href="#懒汉式-双重检查加锁机制" class="headerlink" title="懒汉式 双重检查加锁机制"></a>懒汉式 双重检查加锁机制</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Author: Sam * @Date: 2022-07-22 15:40 * @Description: 单例模式-懒汉式 双重检查加锁机制 线程安全 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LazySafeSingleton</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//定义一个变量来存储类实例 用volatile修饰 使得执行可见性</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">static</span> <span class="token class-name">LazySafeSingleton</span> instance <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token comment">//私有化构造方法，好在内部控制创建实例的数目</span>    <span class="token keyword">private</span> <span class="token class-name">LazySafeSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">LazySafeSingleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//先检查实例是否存在，如果不存在就进去下面的同步块</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//同步块，线程安全地创建实例</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">LazySafeSingleton</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token comment">//再次检测实例是否存在，如果不存在就创建个实例</span>                    instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LazySafeSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>优点</strong>：支持多线程，并发量高，且以懒汉式加载，不浪费内存空间。</p><p><strong>缺点</strong>：实现比较麻烦。</p><h3 id="内部类创建"><a href="#内部类创建" class="headerlink" title="内部类创建"></a>内部类创建</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Author: Sam * @Date: 2022-07-22 15:45 * @Description: 单例模式-内部类创建 线程安全 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InnerSingleton</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 类级的内部类，也就是静态的成员式内部类，该内部类的实例与外部类的实例没有绑定关系，     * 而且只有被调用时才会装载，从而实现了延迟加载     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">InnerSingletonHolder</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//静态初始化器，由JVM来保证线程安全</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">InnerSingleton</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InnerSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//私有化构造方法</span>    <span class="token keyword">private</span> <span class="token class-name">InnerSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">InnerSingleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//直接返回实例</span>        <span class="token keyword">return</span> <span class="token class-name">InnerSingletonHolder</span><span class="token punctuation">.</span>instance<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>推荐</strong>：第一次加载Singleton类时并不会初始化单例，只有第一次调用getInstance方法时虚拟机加载SingletonHolder 并初始化单例 ，这样不仅能确保线程安全也能保证Singleton类实例的唯一性，所以推荐使用静态内部类单例模式。</p><h3 id="枚举类创建"><a href="#枚举类创建" class="headerlink" title="枚举类创建"></a>枚举类创建</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Author: Sam * @Date: 2022-07-22 16:06 * @Description: 单例模式-枚举类创建 线程安全 */</span><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">EnumSingleton</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 定义一个枚举的元素，他就代表了Singleton的一个实例     */</span>    INSTANCE<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">EnumSingleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> INSTANCE<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>优点</strong>：代码简洁，线程安全，也是<strong>推荐</strong>使用的！</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上就是<code>单例模式</code>介绍和示例了~</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java设计模式-适配器模式</title>
      <link href="/blog/2022/07/22/design-adapter/"/>
      <url>/blog/2022/07/22/design-adapter/</url>
      
        <content type="html"><![CDATA[<h1 id="Java设计模式-适配器模式"><a href="#Java设计模式-适配器模式" class="headerlink" title="Java设计模式-适配器模式"></a>Java设计模式-适配器模式</h1><h2 id="什么是适配器模式"><a href="#什么是适配器模式" class="headerlink" title="什么是适配器模式"></a>什么是适配器模式</h2><p>适配器模式的主要功能是进行转换匹配，目的是复用已有的功能，而不是来实现新的接口.也就是说，客户端需要的功能应该是已经实现好了的，不需要适配器模式来实现，适配器模式主要负责把不兼容的接口转换成客户端期望的样子就可以了。</p><p>但这并不是说，在适配器里面就不能实现功能.适配器里面可以实现功能，称这种适配器为智能适配器.再说了，在接口匹配和转换的过程中，也有可能需要额外实现一定的功能，才能够转换过来，比如需要调整参数以进行匹配等.</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>【更好的复用性】如果功能是已经有了的，只是接口不兼容，那么通过适配器模式就可以让这些功能得到更好的复用。</li><li>【更好的可扩展性】在实现适配器功能的时候，可以调用自己开发的功能，从而自然地扩展系统的功能。</li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li>过多地使用适配器，会让系统非常零乱，不容易整体进行把握</li></ul><h3 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h3><p><img src="adapter-1.png" alt="adapter-1"></p><p><img src="adapter-2.png" alt="adapter-2"></p><h2 id="何时使用"><a href="#何时使用" class="headerlink" title="何时使用"></a>何时使用</h2><p>建议在如下情况时选用适配器模式</p><ul><li><p>如果你想要使用一个已经存在的类，但是它的接口不符合你的需求，这种情况可以使用适配器模式，来把已有的实现转换成你需要的接口。</p></li><li><p>如果你想创建一个可以复用的类，这个类可能和一些不兼容的类一起工作，这种情况可以使用适配器模式，到时候需要什么就适配什么。</p></li><li><p>如果你想使用一些已经存在的子类，但是不可能对每一个子类都进行适配，这种情况可以选用对象适配器，直接适配这些子类的父类就可以了。</p></li></ul><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><h3 id="图解-1"><a href="#图解-1" class="headerlink" title="图解"></a>图解</h3><p><img src="adapter-3.png" alt="adapter-3"></p><h3 id="日志类"><a href="#日志类" class="headerlink" title="日志类"></a>日志类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Serializable</span></span><span class="token punctuation">;</span><span class="token comment">/** * @Author: Sam * @Date: 2022-07-21 17:49 * @Description: 日志类 */</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LogModel</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">1L</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 日志编号     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> logId<span class="token punctuation">;</span>    <span class="token comment">/**     * 操作人员     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> operateUser<span class="token punctuation">;</span>    <span class="token comment">/**     * 操作时间，以yyyy-MM-dd HH:mm:ss的格式记录     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> operateTime<span class="token punctuation">;</span>    <span class="token comment">/**     * 日志内容     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> logContent<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="日志文件操作接口"><a href="#日志文件操作接口" class="headerlink" title="日志文件操作接口"></a>日志文件操作接口</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span><span class="token comment">/** * @Author: Sam * @Date: 2022-07-21 17:53 * @Description: 日志文件操作接口 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">LogFileOperateApi</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 读取日志文件，从文件里面获取存储的日志列表对象     */</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LogModel</span><span class="token punctuation">></span></span> <span class="token function">readLogFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 写日志文件，把日志列表写出到日志文件中     */</span>    <span class="token keyword">void</span> <span class="token function">writeLogFile</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LogModel</span><span class="token punctuation">></span></span> list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="日志文件操作接口实现类"><a href="#日志文件操作接口实现类" class="headerlink" title="日志文件操作接口实现类"></a>日志文件操作接口实现类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span><span class="token comment">/** * @Author: Sam * @Date: 2022-07-21 17:55 * @Description: 实现对日志文件的操作 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LogFileOperate</span> <span class="token keyword">implements</span> <span class="token class-name">LogFileOperateApi</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 日志文件的路径和文件名称，默认是当前项目根目录下的logs/AdapterLog.log     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> logFilePathName <span class="token operator">=</span> <span class="token string">"logs/AdapterLog.log"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">LogFileOperate</span><span class="token punctuation">(</span><span class="token class-name">String</span> logFilePathName<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>logFilePathName <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> logFilePathName<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>logFilePathName <span class="token operator">=</span> logFilePathName<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LogModel</span><span class="token punctuation">></span></span> <span class="token function">readLogFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LogModel</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">File</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>logFilePathName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">ObjectInputStream</span> oin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                list <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LogModel</span><span class="token punctuation">></span></span><span class="token punctuation">)</span> oin<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">writeLogFile</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LogModel</span><span class="token punctuation">></span></span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">File</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>logFilePathName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">ObjectOutputStream</span> oout <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            oout<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="定义操作日志的应用接口"><a href="#定义操作日志的应用接口" class="headerlink" title="定义操作日志的应用接口"></a>定义操作日志的应用接口</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span><span class="token comment">/** * @Author: Sam * @Date: 2022-07-21 17:48 * @Description: 定义操作日志的应用接口 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">LogDbOperateApi</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 新增日志     */</span>    <span class="token keyword">void</span> <span class="token function">createLog</span><span class="token punctuation">(</span><span class="token class-name">LogModel</span> lm<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 修改日志     */</span>    <span class="token keyword">void</span> <span class="token function">updateLog</span><span class="token punctuation">(</span><span class="token class-name">LogModel</span> lm<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 删除日志     */</span>    <span class="token keyword">void</span> <span class="token function">removeLog</span><span class="token punctuation">(</span><span class="token class-name">LogModel</span> lm<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 获取所有日志     */</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LogModel</span><span class="token punctuation">></span></span> <span class="token function">getAllLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="适配器对象"><a href="#适配器对象" class="headerlink" title="适配器对象"></a>适配器对象</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span><span class="token comment">/** * @Author: Sam * @Date: 2022-07-21 17:47 * @Description: 适配器对象，将记录日志到文件的功能适配成第二版需要的增删改查功能 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Adapter</span> <span class="token keyword">implements</span> <span class="token class-name">LogDbOperateApi</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">LogFileOperateApi</span> adaptee<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Adapter</span><span class="token punctuation">(</span><span class="token class-name">LogFileOperateApi</span> adaptee<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>adaptee <span class="token operator">=</span> adaptee<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createLog</span><span class="token punctuation">(</span><span class="token class-name">LogModel</span> lm<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LogModel</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> adaptee<span class="token punctuation">.</span><span class="token function">readLogFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>lm<span class="token punctuation">)</span><span class="token punctuation">;</span>        adaptee<span class="token punctuation">.</span><span class="token function">writeLogFile</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateLog</span><span class="token punctuation">(</span><span class="token class-name">LogModel</span> lm<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LogModel</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> adaptee<span class="token punctuation">.</span><span class="token function">readLogFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLogId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>lm<span class="token punctuation">.</span><span class="token function">getLogId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                list<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> lm<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        adaptee<span class="token punctuation">.</span><span class="token function">writeLogFile</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeLog</span><span class="token punctuation">(</span><span class="token class-name">LogModel</span> lm<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LogModel</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> adaptee<span class="token punctuation">.</span><span class="token function">readLogFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>lm<span class="token punctuation">)</span><span class="token punctuation">;</span>        adaptee<span class="token punctuation">.</span><span class="token function">writeLogFile</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LogModel</span><span class="token punctuation">></span></span> <span class="token function">getAllLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> adaptee<span class="token punctuation">.</span><span class="token function">readLogFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="客户端调用类"><a href="#客户端调用类" class="headerlink" title="客户端调用类"></a>客户端调用类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span><span class="token comment">/** * @Author: Sam * @Date: 2022-07-22 09:35 * @Description: 适配器客户端 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 原接口调用     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">LogModel</span> lm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LogModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lm<span class="token punctuation">.</span><span class="token function">setLogId</span><span class="token punctuation">(</span><span class="token string">"001"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lm<span class="token punctuation">.</span><span class="token function">setOperateUser</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lm<span class="token punctuation">.</span><span class="token function">setOperateTime</span><span class="token punctuation">(</span><span class="token string">"2022-07-22 09:00:00"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lm<span class="token punctuation">.</span><span class="token function">setLogContent</span><span class="token punctuation">(</span><span class="token string">"这是一个测试"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LogModel</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>lm<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建操作日志文件对象</span>        <span class="token class-name">LogFileOperateApi</span> api <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LogFileOperate</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//保存日志文件</span>        api<span class="token punctuation">.</span><span class="token function">writeLogFile</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//读取日志文件的内容</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LogModel</span><span class="token punctuation">></span></span> readLog <span class="token operator">=</span> api<span class="token punctuation">.</span><span class="token function">readLogFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"readLog = "</span> <span class="token operator">+</span> readLog<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 使用适配器进行匹配转换     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">LogModel</span> lm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LogModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lm<span class="token punctuation">.</span><span class="token function">setLogId</span><span class="token punctuation">(</span><span class="token string">"001"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lm<span class="token punctuation">.</span><span class="token function">setOperateUser</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lm<span class="token punctuation">.</span><span class="token function">setOperateTime</span><span class="token punctuation">(</span><span class="token string">"2022-07-22 09:00:00"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lm<span class="token punctuation">.</span><span class="token function">setLogContent</span><span class="token punctuation">(</span><span class="token string">"这是一个测试"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建操作日志文件对象</span>        <span class="token class-name">LogFileOperateApi</span> logFileOperateApi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LogFileOperate</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">LogDbOperateApi</span> api <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Adapter</span><span class="token punctuation">(</span>logFileOperateApi<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//保存日志文件</span>        api<span class="token punctuation">.</span><span class="token function">createLog</span><span class="token punctuation">(</span>lm<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//读取日志文件的内容</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LogModel</span><span class="token punctuation">></span></span> allLog <span class="token operator">=</span> api<span class="token punctuation">.</span><span class="token function">getAllLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"allLog = "</span> <span class="token operator">+</span> allLog<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">allLog &#x3D; [LogModel(logId&#x3D;001, operateUser&#x3D;admin, operateTime&#x3D;2022-07-22 09:00:00, logContent&#x3D;这是一个测试), LogModel(logId&#x3D;001, operateUser&#x3D;admin, operateTime&#x3D;2022-07-22 09:00:00, logContent&#x3D;这是一个测试)]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上就是<code>适配器模式</code>介绍和示例了~</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java设计模式-外观模式</title>
      <link href="/blog/2022/07/22/design-facade/"/>
      <url>/blog/2022/07/22/design-facade/</url>
      
        <content type="html"><![CDATA[<h1 id="Java设计模式-外观模式"><a href="#Java设计模式-外观模式" class="headerlink" title="Java设计模式-外观模式"></a>Java设计模式-外观模式</h1><h2 id="什么是外观模式"><a href="#什么是外观模式" class="headerlink" title="什么是外观模式"></a>什么是外观模式</h2><p>外观（Facade）模式又叫作门面模式，是一种通过为多个复杂的子系统提供一个一致的接口，而使这些子系统更加容易被访问的模式。该模式对外有一个统一接口，外部应用程序不用关心内部子系统的具体细节，这样会大大降低应用程序的复杂度，提高了程序的可维护性。</p><p>外观模式的目的不是给子系统添加新的功能接口，而是为了让外部减少与子系统内多个模块的交互，松散耦合，从而让外部能够更简单地使用子系统。</p><p>这点要特别注意，因为外观是当作子系统对外的接口出现的，虽然也可以在这里定义一些子系统没有的功能，但不建议这么做.外观应该是包装已有的功能，它主要负责组合已有功能来实现客户需要，而不是添加新的实现。</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>【松散耦合】外观模式松散了客户端与子系统的耦合关系，让子系统内部的模块能更容易扩展和维护。</li><li>【简单易用】外观模式让子系统更加易用，客户端不再需要了解子系统内部的实现，也不需要跟众多子系统内部的模块进行交互，只需要跟外观交互就可以了，相当于外观类为外部客户端使用子系统提供了一站式服务。</li><li>【更好地划分访问的层次】通过合理使用Facade，可以帮助我们更好地划分访问的层次.有些方法是对系统外的，有些方法是系统内部使用的.把需要暴露给外部的功能集中到外观中，这样既方便客户端使用，也很好地隐藏了内部的细节。</li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li>过多的或者是不太合理的Facade也容易让人迷惑.到底是调用Facade好呢，还是直接调用模块好.</li></ul><h3 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h3><p><img src="facade-1.png" alt="facade-1"></p><h2 id="何时使用"><a href="#何时使用" class="headerlink" title="何时使用"></a>何时使用</h2><p>建议在如下情况时选用外观模式</p><ul><li><p>如果你希望为一个复杂的子系统提供一个简单接口的时候，可以考虑使用外观模式.使用外观对象来实现大部分客户需要的功能，从而简化客户的使用.如果想要让客户程序和抽象类的实现部分松散耦合，可以考虑使用外观模式，使用外观对象来将这个子系统与它的客户分离开来，从而提高子系统的独立性和可移植性.</p></li><li><p>如果构建多层结构的系统，可以考虑使用外观模式，使用外观对象作为每层的入口，这样可以简化层间调用，也可以松散层次之间的依赖关系.</p></li></ul><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><h3 id="A模块接口"><a href="#A模块接口" class="headerlink" title="A模块接口"></a>A模块接口</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Author: Sam * @Date: 2022-07-21 10:36 * @Description: A模块接口 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AModuleApi</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">testA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="A模块接口实现类"><a href="#A模块接口实现类" class="headerlink" title="A模块接口实现类"></a>A模块接口实现类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Author: Sam * @Date: 2022-07-21 10:37 * @Description: 实现类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AModuleApiImpl</span> <span class="token keyword">implements</span> <span class="token class-name">AModuleApi</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"现在在操作A模块里面的testA方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="B模块接口"><a href="#B模块接口" class="headerlink" title="B模块接口"></a>B模块接口</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Author: Sam * @Date: 2022-07-21 10:36 * @Description: B模块接口 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BModuleApi</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">testB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="B模块接口实现类"><a href="#B模块接口实现类" class="headerlink" title="B模块接口实现类"></a>B模块接口实现类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Author: Sam * @Date: 2022-07-21 10:37 * @Description: 实现类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BModuleApiImpl</span> <span class="token keyword">implements</span> <span class="token class-name">BModuleApi</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"现在在操作B模块里面的testB方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="C模块接口"><a href="#C模块接口" class="headerlink" title="C模块接口"></a>C模块接口</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Author: Sam * @Date: 2022-07-21 10:36 * @Description: C模块接口 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CModuleApi</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">testC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="C模块接口实现类"><a href="#C模块接口实现类" class="headerlink" title="C模块接口实现类"></a>C模块接口实现类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Author: Sam * @Date: 2022-07-21 10:37 * @Description: 实现类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CModuleApiImpl</span> <span class="token keyword">implements</span> <span class="token class-name">CModuleApi</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testC</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"现在在操作C模块里面的testC方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="外观对象"><a href="#外观对象" class="headerlink" title="外观对象"></a>外观对象</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Author: Sam * @Date: 2022-07-21 10:39 * @Description: 外观对象 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Facade</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 示意方法，满足客户需要的功能     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">AModuleApi</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AModuleApiImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token punctuation">.</span><span class="token function">testA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">BModuleApi</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BModuleApiImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        b<span class="token punctuation">.</span><span class="token function">testB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">CModuleApi</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CModuleApiImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">testC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="客户端调用类"><a href="#客户端调用类" class="headerlink" title="客户端调用类"></a>客户端调用类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Author: Sam * @Date: 2022-07-21 10:45 * @Description: 客户端 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//使用Facade</span>        <span class="token keyword">new</span> <span class="token class-name">Facade</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">现在在操作A模块里面的testA方法现在在操作B模块里面的testB方法现在在操作C模块里面的testC方法<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上就是<code>外观模式</code>介绍和示例了~</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java设计模式-简单工厂</title>
      <link href="/blog/2022/07/21/design-factory/"/>
      <url>/blog/2022/07/21/design-factory/</url>
      
        <content type="html"><![CDATA[<h1 id="Java设计模式-简单工厂"><a href="#Java设计模式-简单工厂" class="headerlink" title="Java设计模式-简单工厂"></a>Java设计模式-简单工厂</h1><h2 id="什么是简单工厂模式"><a href="#什么是简单工厂模式" class="headerlink" title="什么是简单工厂模式"></a>什么是简单工厂模式</h2><p>定义一个工厂类，该类提供一个静态方法，该方法会根据传入的参数的不同来创建不同的实例。</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>【帮助封装】简单工厂虽然很简单，但是非常友好地帮助我们实现了组件的封装，然后让组件外部能真正面向接口编程。</li><li>【解耦】通过简单工厂，实现了客户端和具体实现类的解耦。</li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li>【可能增加客户端的复杂度】如果通过客户端的参数来选择具体的实现类，那么就必须让客户端能理解各个参数所代表的具体功能和含义，这样会增加客户端使用的难度，也部分暴露了内部实现，这种情况可以选用可配置的方式来实现。</li><li>【不方便扩展子工厂】私有化简单工厂的构造方法，使用静态方法来创建接口，也就不能通过写简单工厂类的子类来改变创建接口的方法的行为了.不过，通常情况下是不需要为简单工厂创建子类的。</li></ul><h3 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h3><p><img src="factory-1.png" alt="factory-1"></p><h2 id="何时使用"><a href="#何时使用" class="headerlink" title="何时使用"></a>何时使用</h2><p>建议在以下情况中选用简单工厂</p><ul><li><p>如果想要完全封装隔离具体实现，让外部只能通过接口来操作封装体，那么可以选用简单工厂，让客户端通过工厂来获取相应的接口，而无须关心具体的实现。</p></li><li><p>如果想要把对外创建对象的职责集中管理和控制，可以选用简单工厂，一个简单工厂可以创建很多的、不相关的对象，可以把对外创建对象的职责集中到一个简单工厂来，从而实现集中管理和控制。</p></li></ul><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><h3 id="创建工厂类"><a href="#创建工厂类" class="headerlink" title="创建工厂类"></a>创建工厂类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Author: Sam * @Date: 2022/7/21 9:41 * @Description: 简单工厂创建 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Api</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">operation</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="创建实现类A"><a href="#创建实现类A" class="headerlink" title="创建实现类A"></a>创建实现类A</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Author: Sam * @Date: 2022-07-21 09:41 * @Description: 具体实现对象A */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ImpA</span> <span class="token keyword">implements</span> <span class="token class-name">Api</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operation</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ImpA s = "</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="创建实现类B"><a href="#创建实现类B" class="headerlink" title="创建实现类B"></a>创建实现类B</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Author: Sam * @Date: 2022-07-21 09:41 * @Description: 具体实现对象B */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ImpB</span> <span class="token keyword">implements</span> <span class="token class-name">Api</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operation</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ImpB s = "</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="创建工厂类-1"><a href="#创建工厂类-1" class="headerlink" title="创建工厂类"></a>创建工厂类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Author: Sam * @Date: 2022-07-21 09:43 * @Description: 工厂类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Factory</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 具体创建Api对象的方法     *     * @param condition     * @return 创建好的Api对象     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Api</span> <span class="token function">createApi</span><span class="token punctuation">(</span><span class="token keyword">int</span> condition<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//应该根据某些条件去选择究竟创建哪一个具体的实现对象</span>        <span class="token comment">//这些条件可以从外部传入,也可以从其他途径来获取。</span>        <span class="token comment">//如果只有一个实现,可以省略条件,因为没有选择的必要。</span>        <span class="token comment">//示意使用条件</span>        <span class="token class-name">Api</span> api <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>condition <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            api <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ImpA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>condition <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            api <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ImpB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> api<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="客户端调用类"><a href="#客户端调用类" class="headerlink" title="客户端调用类"></a>客户端调用类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Author: Sam * @Date: 2022-07-21 09:48 * @Description: 客户端使用Api */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Api</span> api <span class="token operator">=</span> <span class="token class-name">Factory</span><span class="token punctuation">.</span><span class="token function">createApi</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        api<span class="token punctuation">.</span><span class="token function">operation</span><span class="token punctuation">(</span><span class="token string">"正在使用简单工厂"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><blockquote><p>ImpA s = 正在使用简单工厂</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上就是<code>简单工厂</code>介绍和示例了~</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql-帮助文档</title>
      <link href="/blog/2022/07/15/mysql-help/"/>
      <url>/blog/2022/07/15/mysql-help/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL帮助文档"><a href="#MySQL帮助文档" class="headerlink" title="MySQL帮助文档"></a>MySQL帮助文档</h1><h2 id="数据库一张表卡死的解决方案"><a href="#数据库一张表卡死的解决方案" class="headerlink" title="数据库一张表卡死的解决方案"></a>数据库一张表卡死的解决方案</h2><p>运行如下语句查看卡死的线程，有个时间字段可以看出卡住了多长时间</p><blockquote><p>select * from information_schema.innodb_trx;</p></blockquote><p>运行如下语句可杀死线程，全部杀死后，数据库恢复正常</p><blockquote><p>kill trx_mysql_thread_id</p></blockquote><p>查询连接池连接数</p><blockquote><p>show full processlist</p></blockquote><p>查看最大连接数</p><blockquote><p>show variables like ‘%max_connections%’;</p></blockquote><p>修改最大连接数(mysql重启后会失效)</p><blockquote><p>set GLOBAL max_connections = 8800;</p></blockquote><p>设置局域网访问权限</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">use mysql<span class="token punctuation">;</span> update user <span class="token builtin class-name">set</span> <span class="token function">host</span> <span class="token operator">=</span> <span class="token string">'%'</span> where user <span class="token operator">=</span> <span class="token string">'root'</span><span class="token punctuation">;</span>GRANT ALL PRIVILEGES ON *.* TO <span class="token string">'root'</span>@<span class="token string">'%'</span> IDENTIFIED BY <span class="token string">'root'</span> WITH GRANT OPTION<span class="token punctuation">;</span>flush privileges<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">命令中的两个星号，第一个星号表示数据库名称，第二个星号表示该数据库下的某个表名称。写成两个星号表示所有的数据库都进行授权。root表示授权root账号。“%”表示授权的用户IP可以指定，这里代表任意的IP地址都能访问MySQL数据库。“password”表示分配账号对应的密码，这里密码自己替换成你的mysql root帐号密码。“WITH GRANT OPTION” 这个选项表示该用户可以将自己拥有的权限授权给别人。注意：经常有人在创建操作用户的时候不指定WITH GRANT OPTION选项导致后来该用户不能使用GRANT命令创建用户或者给其它用户授权。如果不想这个用户有这个grant的权限，可以不加这句<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>grant all PRIVILEGES on testdabatase.testtable to username@’192.168.0.2’ identified by ‘user-pass’;</p><h2 id="基本指令"><a href="#基本指令" class="headerlink" title="基本指令"></a>基本指令</h2><ol><li>列出所有的数据库</li></ol><blockquote><p>show databases;</p></blockquote><ol start="2"><li>切换数据库</li></ol><blockquote><p>use 数据库的名字;</p></blockquote><ol start="3"><li>列出所有的表</li></ol><blockquote><p>show tables;</p></blockquote><ol start="4"><li>显示数据表结构</li></ol><blockquote><p>desc 表名;</p></blockquote><ol start="5"><li>删除数据库</li></ol><blockquote><p>drop databases 数据库名</p></blockquote><ol start="6"><li>删除数据表</li></ol><blockquote><p>drop table 数据表</p></blockquote><ol start="7"><li>查看mysql版本</li></ol><blockquote><p>select version();</p></blockquote><ol start="8"><li>查看当前的时间</li></ol><blockquote><p>select now();</p></blockquote><ol start="9"><li>查看当前登录的用户名</li></ol><blockquote><p>select user();</p></blockquote><blockquote><ol start="10"><li>查看数据库的编码方式</li></ol></blockquote><blockquote><p>show create database 数据库名;</p></blockquote><ol start="11"><li>查看错误信息</li></ol><blockquote><p>show warnings;</p></blockquote><ol start="12"><li>创建一个gbk格式的数据库</li></ol><blockquote><p>create database if not exists 数据库名 character set gbk;</p></blockquote><ol start="13"><li>修改数据库的编码方式</li></ol><blockquote><p>alter database 数据库名 character set=utf8;</p></blockquote><ol start="14"><li>直接查看某个库有多少张表</li></ol><blockquote><p>show tables from 数据库名；</p></blockquote><ol start="15"><li>直接查看当前处于哪个数据库</li></ol><blockquote><p>select database();</p></blockquote><ol start="16"><li>查看表的结构</li></ol><blockquote><p>show columns from 表名；</p></blockquote><ol start="17"><li>添加一列到某个字段的后面</li></ol><blockquote><p>alter table 表名 add 将要添加的字段 varchar(10) after 某个字段</p></blockquote><ol start="18"><li>添加一列到第一列</li></ol><blockquote><p>alter table 表名 add 添加的字段名 varchar(10) first</p></blockquote><ol start="19"><li>删除多列</li></ol><blockquote><p>alter table 表名 drop xxx,drop xxx;</p></blockquote><ol start="20"><li>增加一个主键列</li></ol><blockquote><p>alter table表名 add constraint 列名 primary key (id)</p></blockquote><ol start="21"><li>增加唯一约束列</li></ol><blockquote><p>alter table 表名 add unique (列名)</p></blockquote><ol start="22"><li>设置客户端的编码方式</li></ol><blockquote><p>set names gbk;</p></blockquote><ol start="23"><li>删除主键约束</li></ol><blockquote><p>alter table 表名 drop primary key;</p></blockquote><ol start="24"><li>删除唯一约束，不删除字段</li></ol><blockquote><p>alter table 表名 drop index 列名</p></blockquote><ol start="25"><li>查看外键约束索引</li></ol><blockquote><p>show indexes from 表名\G</p></blockquote><p>当数据库插入、修改报以下错误说明数据库被锁定了，检查是否数据库磁盘空间满了，清除部分数据后，数据库会自动解锁<br>SQL Error (1290): The MySQL server is running with the –rds-read-and-drop-only option so it cannot execute this statement</p><h2 id="导出指令"><a href="#导出指令" class="headerlink" title="导出指令"></a>导出指令</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">mysqldump -u账号 -p密码 数据库名 表名 <span class="token operator">></span>存放路径<span class="token punctuation">;</span>mysqldump -uroot -proot cloud_db sys_user <span class="token operator">></span>/home/user.sql<span class="token comment">#遇到异常</span>mysqldump: Got error: <span class="token number">2002</span>: Can<span class="token string">'t connect to local MySQL server through socket '</span>/data/mysql/mysql.sock' <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> when trying to connect<span class="token comment">#找到正确的套接字的路径</span><span class="token function">netstat</span> -ln <span class="token operator">|</span> <span class="token function">grep</span> mysql再运行dump命令：mysqldump --socket<span class="token operator">=</span>/usr/local/mysql/mysql.sock -uroot -hroot -proot cloud_db sys_user <span class="token operator">></span>/home/user.sql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql事务</title>
      <link href="/blog/2022/07/12/mysql-transaction/"/>
      <url>/blog/2022/07/12/mysql-transaction/</url>
      
        <content type="html"><![CDATA[<h1 id="Mysql事务"><a href="#Mysql事务" class="headerlink" title="Mysql事务"></a>Mysql事务</h1><h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p>1、在MySQL中只有Innodb存储引擎的数据库才支持事务</p><p>2、事务处理可以用来维护数据的完整性，保证一组数据操作，要么全部成功，要么全部失败</p><p>3、事务主要用来管理insert，update，delete语句</p><h2 id="二、事务的基本要素（ACID）"><a href="#二、事务的基本要素（ACID）" class="headerlink" title="二、事务的基本要素（ACID）"></a>二、事务的基本要素（ACID）</h2><p>1、原子性（Atomicity）：事务开始后的所有操作，<strong>要么全部完成，要么全部失败</strong>,一旦在某个环节发生错误，之前执行的操作会被<strong>回滚</strong> （Rollback）到事务开始前的状态。</p><p>2、一致性（Consistency）：在事务开始之前和结束之后，数据库的完整性没有被破坏。<strong>比如A向B转账，不可能A扣了钱，B却没收到。</strong></p><p>3、隔离性（Isolation）：同一时间，只允许一个事务请求同一条数据，不同的事务之前彼此没有任何干扰。</p><p>4、持久性（Durability）:事务完成后，事务对数据库的所有更新将被保存到数据库，不能回滚</p><h2 id="三、事务的实现原理"><a href="#三、事务的实现原理" class="headerlink" title="三、事务的实现原理"></a>三、事务的实现原理</h2><p>mysql没执行一条聚聚记录一条日志</p><p>1、start transaction，先记个日志，真正执行。</p><h2 id="四、事务的相关指令"><a href="#四、事务的相关指令" class="headerlink" title="四、事务的相关指令"></a>四、事务的相关指令</h2><p><strong>事务的开始</strong></p><p><code>begin</code>或<code>start trancaction</code>都是显式开启一个事务；</p><p><strong>事务的提交</strong></p><p><code>commit</code>或<code>commit work</code> 都是等价的</p><p><strong>事务回滚</strong></p><p><code>rollback</code>或<code>rollback word</code>也是等价的</p><p><strong>示例</strong>:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">start transaction<span class="token punctuation">;</span> <span class="token comment">#开启事务 还可以用begin开启事务</span>UPDATE user <span class="token builtin class-name">set</span> balance <span class="token operator">=</span> balance - <span class="token number">200</span> where <span class="token function">id</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> UPDATE user <span class="token builtin class-name">set</span> balance <span class="token operator">=</span> balance + <span class="token number">200</span> where <span class="token function">id</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>commit<span class="token punctuation">;</span> <span class="token comment"># 提交事务，代表事务结束。更新的数据保存到数据库</span>start transaction<span class="token punctuation">;</span> <span class="token comment">#开启事务</span>UPDATE user <span class="token builtin class-name">set</span> balance <span class="token operator">=</span> balance - <span class="token number">200</span> where <span class="token function">id</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> UPDATE user <span class="token builtin class-name">set</span> balance <span class="token operator">=</span> balance + <span class="token number">200</span> where <span class="token function">id</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> rollback<span class="token punctuation">;</span> <span class="token comment"># 事务回滚，上面更新的数据将被还原到执行前</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、事务的并发问题"><a href="#五、事务的并发问题" class="headerlink" title="五、事务的并发问题"></a>五、事务的并发问题</h2><p>1、脏读：事务A读取了事务B更新的数据，然后B回滚操作，那么A读取到的数据是脏数据</p><p>2、不可重复读：事务 A 多次读取同一数据，事务 B 在事务A多次读取的过程中，对数据作了更新并提交，导致事务A多次读取同一数据时，结果不一致。</p><p>3、幻读：系统管理员A将数据库中所有学生的成绩从具体分数改为ABCDE等级，但是系统管理员B就在这个时候插入了一条具体分数的记录，当系统管理员A改结束后发现还有一条记录没有改过来，就好像发生了幻觉一样，这就叫幻读。</p><p><strong>小结：不可重复读的和幻读很容易混淆，不可重复读侧重于修改，幻读侧重于新增或删除。解决不可重复读的问题只需锁住满足条件的行，解决幻读需要锁表</strong></p><h2 id="六、事务的隔离级别"><a href="#六、事务的隔离级别" class="headerlink" title="六、事务的隔离级别"></a>六、事务的隔离级别</h2><p><strong>MySQL的默认隔离级别是可重复读</strong></p><table><thead><tr><th align="left">事务隔离级别</th><th align="left">脏读</th><th align="left">不可重复读</th><th align="left">幻读</th></tr></thead><tbody><tr><td align="left">读未提交（Read Uncommitted）</td><td align="left">是</td><td align="left">是</td><td align="left">是</td></tr><tr><td align="left">读已提交（Read Committed）</td><td align="left">否</td><td align="left">是</td><td align="left">是</td></tr><tr><td align="left">可重复读（Repeatable Read）</td><td align="left">否</td><td align="left">否</td><td align="left">是</td></tr><tr><td align="left">串行化（Serializable）</td><td align="left">否</td><td align="left">否</td><td align="left">否</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql索引</title>
      <link href="/blog/2022/07/12/mysql-index/"/>
      <url>/blog/2022/07/12/mysql-index/</url>
      
        <content type="html"><![CDATA[<h1 id="Mysql索引"><a href="#Mysql索引" class="headerlink" title="Mysql索引"></a>Mysql索引</h1><h3 id="一、什么是索引？"><a href="#一、什么是索引？" class="headerlink" title="一、什么是索引？"></a>一、什么是索引？</h3><p>拿汉语字典的目录页（索引）打比方，我们可以按拼音、笔画、偏旁部首等排序的目录（索引）快速查找到需要的字。</p><h3 id="二、索引的优缺点"><a href="#二、索引的优缺点" class="headerlink" title="二、索引的优缺点?"></a>二、索引的优缺点?</h3><p><strong>优点：</strong></p><p>1、索引可以大大提高MySQL的检索速度。</p><p>2、所有的MySql列类型(字段类型)都可以被索引，可以给任意字段设置索引</p><p><strong>缺点：</strong></p><p>1、虽然索引大大提高了查询速度，同时却会降低更新表的速度，如对表进行INSERT、UPDATE和DELETE。因为更新表时，MySQL不仅要保存数据，还要保存索引文件。<br>2、建立索引会占用磁盘空间的索引文件。一般情况这个问题不太严重，但如果你在一个大表上创建了多种组合索引，索引文件的会膨胀很快。<br>3、对于离散度较差的数据，为它建立索引就没有太大的实际效果。比如：性别字段<br>4、对于非常小的表，大部分情况下简单的全表扫描更高效。</p><h3 id="三、索引的分类"><a href="#三、索引的分类" class="headerlink" title="三、索引的分类"></a>三、索引的分类</h3><h4 id="1、按列来区分："><a href="#1、按列来区分：" class="headerlink" title="1、按列来区分："></a>1、按列来区分：</h4><p><strong>索引分单列索引和复合索引。</strong></p><p><strong>单列索引：</strong>即一个索引只包含单个列，一个表可以有多个单列索引，但这不是组合索引。</p><p><strong>复合索引：</strong>即一个索引包含多个列。</p><hr><p><strong>注1：复合索引有哪些好处？</strong></p><p><strong>减少开销：</strong>建一个复合索引 (Gid,Cid,SId) ，实际相当于建了 (Gid)、(Gid,Cid)、(Gid,Cid,SId) 三个索引。每多一个索引，都会增加写操作的开销和磁盘空间的开销。对于大量数据的表，使用复合索引会大大的减少开销！</p><p><strong>覆盖索引：</strong><code>select Gid,Cid,SId from student where Gid =1 and Cid =2</code>。那么MySQL可以直接通过遍历索引取得数据，而无需回表，这减少了很多的随机IO操作。减少IO操作，特别的随机IO其实是DBA主要的优化策略。所以，在真正的实际应用中，覆盖索引是主要的提升性能的优化手段之一。</p><p><strong>效率高：</strong>索引列越多，通过索引筛选出的数据越少。有1000W条数据的表，有如下sql:<code>select from table where Gid =1 and Cid =2 and SId =3</code>,假设假设每个条件可以筛选出10%的数据，如果只有单值索引，那么通过该索引能筛选出1000W10%=100w条数据，然后再回表从100w条数据中找到符合<code> Gid =2 and Cid = 3</code>的数据，然后再排序，再分页；如果是复合索引，通过索引筛选出1000w10% 10% *10%=1w，效率提升可想而知！</p><p><strong>缺点：</strong>复合索引越多，索引列越多，则创建的索引越多，索引都是存储在磁盘里的，通过索引算法 BTree代表索引算法使用二叉树的形式来做索引的)来查找数据，的确可以极大的提高查询效率，但是与此同时增删改的同时，需要更新索引，同样是需要花时间的，并且索引所占的磁盘空间也不小。</p><p><strong>建议：</strong>单表尽可能不要超过一个复合索引，单列索引不超过3个</p><p><strong>注2：复合索引的注意事项</strong><br>1、<strong>最左前缀匹配原则：</strong> 非常重要的原则，mysql会一直向右匹配直到遇到范围查询(&gt;、&lt;、between、 like)就停止匹配，比如a = 1 and b = 2 and c &gt; 3 and d = 4 如果建立(a,b,c,d)顺序的索引，d是用不到索引的，如果建立(a,b,d,c)的索引则都可以用到，a,b,d的顺序可以任意调整。<br>2、=和in可以乱序，比如a = 1 and b = 2 and c = 3 建立(a,b,c)索引可以任意顺序，mysql的查询优化器会 帮你优化成索引可以识别的形式。</p><hr><h4 id="2、按数据存储方式区分："><a href="#2、按数据存储方式区分：" class="headerlink" title="2、按数据存储方式区分："></a>2、按数据存储方式区分：</h4><p><strong>索引分聚簇索引和非聚簇索引</strong></p><p><strong>聚簇索引：</strong>聚簇索引就是按照每张表的主键构造一颗B+树 。 同时叶子节点中存放的就是整张表的行记录数据，也将聚集索引的叶子节点称为数据页。 这个特性决定了索引组织表中数据也是索引的一部分，每张表只能拥有一个聚簇索引。</p><hr><p><strong>注</strong>：Innodb通过主键聚集数据，如果没有定义主键，innodb会选择非空的唯一索引代替。如果没有这样的索引，innodb会隐式的定义一个主键来作为聚簇索引。</p><hr><p><strong>非聚簇索引：</strong>聚簇索引之上创建的索引称之为非聚簇索引（也称为辅助索引）。辅助索引访问数据需要二次查找，辅助索引叶子节点存储的不再是行的物理位置，而是主键值。通过辅助索引首先找到的是主键值，再通过主键值找到数据行的数据页（这个过程叫<strong>回表</strong>）</p><h4 id="3、按作用区分"><a href="#3、按作用区分" class="headerlink" title="3、按作用区分"></a>3、按作用区分</h4><p><strong>主键索引（primary key）：</strong>也简称主键，提供唯一性约束并不允许为空。一张表中只能有一个主键。被标记为自动增长的字段一定是主键，但主键不一定是自动增长。一般把主键定义在无意义的字段上（如：编号）</p><p><strong>普通索引（normal）：</strong>普通索引是最基本的索引，它没有任何限制，值可以为空，仅加速查询</p><p><strong>唯一索引（unique）：</strong> 唯一索引与普通索引类似，不同的就是：索引列的值必须唯一，但允许有空值。如果是组合索引，则列值的组合必须唯一</p><p><strong>全文索引（fulltext）：</strong>全文索引主要用来查找文本中的关键字，而不是直接与索引中的值相比较。fulltext索引跟其它索引大不相同，它更像是一个搜索引擎</p><p><strong>空间索引（spatial）：</strong>MySQL在5.7之后的版本支持了空间索引，而且支持OpenGIS几何数据模型。这是在地理位置领域使用的一种索引，其他场景用的很少</p><h3 id="四、MySQL索引失效的几种情况"><a href="#四、MySQL索引失效的几种情况" class="headerlink" title="四、MySQL索引失效的几种情况"></a>四、MySQL索引失效的几种情况</h3><p><strong>1、有or必须将or条件中的每个列都加上索引，否则索引无效;</strong></p><p><strong>2、复合索引未用左列字段;</strong></p><p><strong>3、like以%开头;</strong></p><p><strong>4、需要类型转换;</strong></p><p><strong>5、where中索引列有运算;</strong></p><p><strong>6、where中索引列使用了函数;</strong></p><p><strong>7、如果mysql觉得全表扫描更快时（数据少）;</strong></p><h3 id="五、MySQL存储引擎InnoDB和MyISAM的区别"><a href="#五、MySQL存储引擎InnoDB和MyISAM的区别" class="headerlink" title="五、MySQL存储引擎InnoDB和MyISAM的区别"></a>五、MySQL存储引擎InnoDB和MyISAM的区别</h3><p><strong>1、介绍</strong></p><ul><li><strong>MyISAM：</strong>在MySQL 5.1 及之前的版本，MyISAM是默认引擎。MyISAM提供的大量的特性，包括全文索引、压缩、空间函数（GIS）等，但MyISAM并不支持事务以及行级锁，而且一个毫无疑问的缺陷是崩溃后无法安全恢复。</li><li><strong>InnoDB：</strong>MySQL默认的事务型引擎，也是最重要和使用最广泛的存储引擎。它被设计成为大量的短期事务，短期事务大部分情况下是正常提交的，很少被回滚。</li></ul><p><strong>2、存储结构</strong></p><ul><li><strong>MyISAM：</strong>每个MyISAM在磁盘上存储成三个文件。分别为：<strong>表定义文件、数据文件、索引文件。</strong></li><li><strong>InnoDB：</strong>基于磁盘的资源是InnoDB表空间数据文件和它的日志文件，InnoDB 表的大小只受限于操作系统文件的大小，一般为 2GB</li></ul><p><strong>3、事务支持</strong></p><ul><li><strong>MyISAM：</strong>强调的是性能，每次查询具有原子性,其执行数度比InnoDB类型更快，但是不提供事务支持。</li><li><strong>InnoDB：</strong>提供事务支持事务，外部键等高级数据库功能。 具有事务(commit)、回滚(rollback)和崩溃修复能力(crash recovery capabilities)的事务安全(transaction-safe (ACID compliant))型表。</li></ul><p><strong>4、锁支持</strong></p><ul><li><strong>MyISAM：</strong> 只支持表级锁，用户在操作myisam表时，select，update，delete，insert语句都会给表自动加锁，如果加锁以后的表满足insert并发的情况下，可以在表的尾部插入新的数据。</li><li><strong>InnoDB：</strong> 支持事务和行级锁，是innodb的最大特色。行锁大幅度提高了多用户并发操作的性能。但是InnoDB的行锁，只是在WHERE的主键是有效的，非主键的WHERE都会锁全表的。</li></ul><p><strong>5、统计行数</strong></p><ul><li><strong>MyISAM：</strong>用一个变量保存了整个表的行数，执行上述语句时只需要读出该变量即可，速度很快（注意不能加有任何WHERE条件）。</li><li><strong>InnoDB：</strong>不保存表的具体行数，执行select count(*) from table时需要全表扫描。</li></ul><p><strong>6、外键支持</strong></p><ul><li><strong>MyISAM：</strong>不支持</li><li><strong>InnoDB：</strong>支持</li></ul><p><strong>7、聚簇索引</strong></p><ul><li><strong>MyISAM：</strong>myisam不是聚集索引</li><li>**InnoDB： **InnoDB是聚集索引，使用B+Tree作为索引结构，数据文件是和（主键）索引绑在一起的（表数据文件本身就是按B+Tree组织的一个索引结构），必须要有主键，通过主键索引效率很高。</li></ul><p><strong>8、MVVC</strong></p><ul><li><strong>MyISAM：</strong>不支持</li><li><strong>InnoDB：</strong>支持</li></ul><p><strong>9、全文索引</strong></p><ul><li><strong>MyISAM：</strong>支持</li><li><strong>InnoDB：</strong>部分版本不支持(但可以使用Sphinx插件)；</li></ul><h3 id="六、索引数据结构"><a href="#六、索引数据结构" class="headerlink" title="六、索引数据结构"></a>六、索引数据结构</h3><p>MySQL中最常用的为InnoDB存储引擎，而索引的数据结构最为常用和有效为B+Tree（B树）。</p><p>B+树是B-树的变体，也是一种多路搜索树。B+Tree和B-Tree的区别在于：</p><p>1、B+Tree只在叶子节点存数据，非叶子节点存指针和键值。</p><p>2、为所有的叶子节点新增一个链指针。</p><h3 id="七、explain关键字"><a href="#七、explain关键字" class="headerlink" title="七、explain关键字"></a>七、explain关键字</h3><p>explain的执行结果</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mysql<span class="token operator">></span> explain <span class="token keyword">select</span> * from subject where <span class="token function">id</span> <span class="token operator">=</span> <span class="token number">1</span> ****************************************************** id: <span class="token number">1</span> //select查询的序列号，包含一组数字，表示查询中执行select子句或操作表的顺序select_type: SIMPLE //查询类型table: subject  //正在访问哪个表partitions: NULL  //匹配的分区type: const //访问的类型possible_keys: PRIMARY  //显示可能应用在这张表中的索引，一个或多个，但不一定实际使用到key: PRIMARY //实际使用到的索引，如果为NULL，则没有使用索引key_len: <span class="token number">4</span> //表示索引中使用的字节数，可通过该列计算查询中使用的索引的长度ref: const  //显示索引的哪一列被使用了，如果可能的话，是一个常数，哪些列或常量被用于查找索引列上的值rows: <span class="token number">1</span> //根据表统计信息及索引选用情况，大致估算出找到所需的记录所需读取的行数filtered: <span class="token number">100.00</span>  //查询的表行占表的百分比Extra: NULL  //包含不适合在其它列中显示但十分重要的额外信息******************************************************<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo配置nginx代理页面</title>
      <link href="/blog/2022/07/12/hexo-nginx-config/"/>
      <url>/blog/2022/07/12/hexo-nginx-config/</url>
      
        <content type="html"><![CDATA[<h1 id="hexo配置nginx代理页面"><a href="#hexo配置nginx代理页面" class="headerlink" title="hexo配置nginx代理页面"></a>hexo配置nginx代理页面</h1><h3 id="用hexo生成页面"><a href="#用hexo生成页面" class="headerlink" title="用hexo生成页面"></a>用hexo生成页面</h3><ol><li><p>修改hexo配置_config.yml的root资源目录根路径  当前hexo是在/home/hexo下</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">vim</span> _config.yml<span class="token comment">#将root属性的 / 改成 /blog  对应nginx </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>修改页面作者信息</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">vim</span> _config.yml  <span class="token comment">#根目录下的</span><span class="token comment">#将author 改成 Sam </span>title: Hexosubtitle: <span class="token string">''</span>description: <span class="token string">''</span>keywords:author: Samlanguage: entimezone: <span class="token string">''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>修改matery about页面下的信息</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token builtin class-name">cd</span> themes/hexo-theme-matery<span class="token function">vim</span> _config.yml<span class="token comment">#修改socialLink下的配置</span>socialLink:  github:  https://github.com/???  email: ???@qq.com  facebook: <span class="token comment"># https://www.facebook.com/xxx</span>  twitter: <span class="token comment"># https://twitter.com/xxx</span>  qq: ???  weibo: <span class="token comment"># https://weibo.com/xxx</span>  zhihu: <span class="token comment"># https://www.zhihu.com/xxx</span>  rss: <span class="token boolean">true</span> <span class="token comment"># true、false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>到根目录下运行指令</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">hexo clean    <span class="token comment">#清空原始页面</span>hexo g        <span class="token comment">#生成静态页面 /public</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h2 id="配置nginx-conf"><a href="#配置nginx-conf" class="headerlink" title="配置nginx.conf"></a>配置nginx.conf</h2><ol><li><p>配置nginx.conf</p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">location &#x2F;blog&#x2F; &#123;    alias  &#x2F;home&#x2F;hexo&#x2F;public&#x2F;;  #指定到hexo生成的public页面中&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>启动nginx</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">./nginx -t./nginx 或者 ./nginx -s reload<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>hexo生成的页面使用nginx的alias解析到绝对路径下，使用 <a href="http://ip:port/blog即可访问到！">http://ip:port/blog即可访问到！</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>maven无法识别本地jar</title>
      <link href="/blog/2022/07/11/maven-unrecognized/"/>
      <url>/blog/2022/07/11/maven-unrecognized/</url>
      
        <content type="html"><![CDATA[<h1 id="maven无法识别本地jar"><a href="#maven无法识别本地jar" class="headerlink" title="maven无法识别本地jar"></a>maven无法识别本地jar</h1><p>以前用的私服，现在不使用了，更改了maven 的 setting 设置，导致本地有jar但是maven无法引入；</p><p>可以先执行第三条，不行再执行其他的</p><h2 id="1-注意事项和位置"><a href="#1-注意事项和位置" class="headerlink" title="1.注意事项和位置"></a>1.注意事项和位置</h2><p>创建bat 文件</p><ul><li><code>.bat文件要和仓库在同一平级目录</code></li><li><code>REPOSITORY_PATH要改成你自己仓库的地址</code></li></ul><h2 id="2、删除-lastUpdated文件-失败的jar包"><a href="#2、删除-lastUpdated文件-失败的jar包" class="headerlink" title="2、删除.lastUpdated文件(失败的jar包)"></a>2、删除.lastUpdated文件(失败的jar包)</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token builtin class-name">set</span> <span class="token assign-left variable">REPOSITORY_PATH</span><span class="token operator">=</span>D:<span class="token punctuation">\</span>maven<span class="token punctuation">\</span>repository<span class="token keyword">for</span> /f <span class="token string">"delims="</span> %%i <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token string">'dir /b /s "%REPOSITORY_PATH%\*lastUpdated*"'</span><span class="token punctuation">)</span> <span class="token keyword">do</span> <span class="token punctuation">(</span>    del /s /q %%i<span class="token punctuation">)</span>pause<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3、删除-remote-repositories文件（主要）"><a href="#3、删除-remote-repositories文件（主要）" class="headerlink" title="3、删除_remote.repositories文件（主要）"></a>3、删除_remote.repositories文件（主要）</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token builtin class-name">set</span> <span class="token assign-left variable">REPOSITORY_PATH</span><span class="token operator">=</span>D:<span class="token punctuation">\</span>maven<span class="token punctuation">\</span>repositoryrem 正在搜索<span class="token punctuation">..</span>.<span class="token keyword">for</span> /f <span class="token string">"delims="</span> %%i <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token string">'dir /b /s "%REPOSITORY_PATH%\*_remote.repositories*"'</span><span class="token punctuation">)</span> <span class="token keyword">do</span> <span class="token punctuation">(</span>    del /s /q %%i<span class="token punctuation">)</span>rem 搜索完毕pause<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4、删除-maven-repositories文件-没影响可留"><a href="#4、删除-maven-repositories文件-没影响可留" class="headerlink" title="4、删除_maven.repositories文件(没影响可留)"></a>4、删除_maven.repositories文件(没影响可留)</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token builtin class-name">set</span> <span class="token assign-left variable">REPOSITORY_PATH</span><span class="token operator">=</span>D:<span class="token punctuation">\</span>maven<span class="token punctuation">\</span>repositoryrem 正在搜索<span class="token punctuation">..</span>.<span class="token keyword">for</span> /f <span class="token string">"delims="</span> %%i <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token string">'dir /b /s "%REPOSITORY_PATH%\*_maven.repositories*"'</span><span class="token punctuation">)</span> <span class="token keyword">do</span> <span class="token punctuation">(</span>    del /s /q %%i<span class="token punctuation">)</span>rem 搜索完毕pause<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>yum安装mysql8</title>
      <link href="/blog/2022/04/28/yum%E5%AE%89%E8%A3%85mysql8/"/>
      <url>/blog/2022/04/28/yum%E5%AE%89%E8%A3%85mysql8/</url>
      
        <content type="html"><![CDATA[<h1 id="Centos8-yum-安装mysql8"><a href="#Centos8-yum-安装mysql8" class="headerlink" title="Centos8 yum 安装mysql8"></a>Centos8 yum 安装mysql8</h1><h2 id="yum-安装mysql8"><a href="#yum-安装mysql8" class="headerlink" title="yum 安装mysql8"></a>yum 安装mysql8</h2><ol><li><p>获取官方下载地址 <a href="https://dev.mysql.com/downloads/repo/yum/">https://dev.mysql.com/downloads/repo/yum/</a></p></li><li><p>下载mysql安装包 ：wget <a href="https://repo.mysql.com//mysql80-community-release-el8-1.noarch.rpm">https://repo.mysql.com//mysql80-community-release-el8-1.noarch.rpm</a></p></li><li><p>将下载好的安装包挂载到本地 找个路径放 cd /home/package<br>yum localinstall mysql80-community-release-el8-1.noarch.rpm</p></li><li><p>查看是否挂载成功<br>yum repolist enabled | grep “mysql.<em>-community.</em>“</p></li><li><p>禁用centos8.0自带的mysql模块<br>yum module disable mysql</p></li><li><p>安装mysql：yum install mysql-community-server</p></li><li><p>启动mysql服务<br>systemctl mysqld start</p></li><li><p>查看mysql服务启动状态<br>systemctl mysqld status</p></li><li><p>查看mysql安装时生成的随机密码<br>grep ‘temporary password’ /var/log/mysqld.log</p></li><li><p>登录mysql<br>mysql -uroot -p’刚获取到的随机密码’</p></li><li><p>修改登录密码<br>ALTER USER ‘root’ @’localhost’ IDENTIFIED BY ‘您的密码’;<br>出现这个问题，表示密码过于简单<br>ERROR 1819 (HY000): Your password does not satisfy the current policy requirements</p></li><li><p>开放mysql远程访问<br>创建权限记录：<br>CREATE user ‘root‘@’%’ IDENTIFIED BY ‘您的密码’;<br>授权：<br>GRANT ALL PRIVILEGES ON <em>.</em> TO ‘root’ @’%’ WITH GRANT OPTION;<br>修改密码过期策略：<br>ALTER USER ‘root’ @’localhost’ IDENTIFIED BY ‘您的密码’ PASSWORD EXPIRE NEVER;<br>重新修改密码：<br>ALTER USER ‘root’ @’%’ IDENTIFIED WITH mysql_native_password BY ‘您的密码’;<br>刷新权限：<br>FLUSH PRIVILEGES;</p></li></ol><h2 id="相关命令"><a href="#相关命令" class="headerlink" title="相关命令"></a>相关命令</h2><p>mysql服务相关命令<br>启动服务：service mysqld start<br>停止服务：service mysqld stop<br>重启服务：service mysqld restart<br>查看服务状态：service mysqld status</p><p>设置mysql开机自启：<br>systemctl enable mysqld<br>systemctl daemon-reload<br>查看自启服务<br>systemctl list-units –type=service</p>]]></content>
      
      
      
        <tags>
            
            <tag> 安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>poi-tl word模板填充</title>
      <link href="/blog/2022/04/28/poi-tl-word%E6%A8%A1%E6%9D%BF%E5%A1%AB%E5%85%85/"/>
      <url>/blog/2022/04/28/poi-tl-word%E6%A8%A1%E6%9D%BF%E5%A1%AB%E5%85%85/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><font color=#999AAA >java poi-tl word模板填充，word填充基于com.deepoove 的 poi-tl</font><h2 id="一、引入maven库"><a href="#一、引入maven库" class="headerlink" title="一、引入maven库"></a>一、引入maven库</h2><p>注意：版本对应 poi-tl 版本 1.9.0-beta 对应 apache poi 版本 4.1.2</p><p><font color=#999AAA >代码如下（示例）：</font></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>word模板数据解析<span class="token operator">--</span><span class="token operator">></span><span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">></span></span>    <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">></span></span>com<span class="token punctuation">.</span>deepoove<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">></span></span>poi<span class="token operator">-</span>tl<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">></span></span><span class="token number">1.9</span><span class="token number">.0</span><span class="token operator">-</span>beta<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、读入数据"><a href="#二、读入数据" class="headerlink" title="二、读入数据"></a>二、读入数据</h2><p>默认采用${key}的形式进行填充！<br>原word模板：<br><img src="cgd-1.png" alt="模板图"><br>效果图：<br><img src="cgd-2.png" alt="效果图"></p><h2 id="三、示例代码"><a href="#三、示例代码" class="headerlink" title="三、示例代码"></a>三、示例代码</h2><p><font color=#999AAA >代码如下（示例）：</font></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>    <span class="token function">resolveTemp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">File</span> <span class="token function">resolveTemp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> path <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"user.dir"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"/file"</span><span class="token punctuation">;</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> datas <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    datas<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"dept"</span><span class="token punctuation">,</span> <span class="token string">"采购部"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    datas<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">LocalDate</span> date <span class="token operator">=</span> <span class="token class-name">LocalDate</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    datas<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"year"</span><span class="token punctuation">,</span> date<span class="token punctuation">.</span><span class="token function">getYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    datas<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"month"</span><span class="token punctuation">,</span> date<span class="token punctuation">.</span><span class="token function">getMonthValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    datas<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"day"</span><span class="token punctuation">,</span> date<span class="token punctuation">.</span><span class="token function">getDayOfMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span><span class="token punctuation">></span></span> itemList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> itemMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    itemMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"goods"</span><span class="token punctuation">,</span> <span class="token string">"笔记本电脑"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    itemMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"num"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    itemMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"cost"</span><span class="token punctuation">,</span> <span class="token string">"10000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    itemMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"remark"</span><span class="token punctuation">,</span> <span class="token string">"按需采购"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    itemList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>itemMap<span class="token punctuation">)</span><span class="token punctuation">;</span>    itemMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    itemMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"goods"</span><span class="token punctuation">,</span> <span class="token string">"台式电脑"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    itemMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"num"</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    itemMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"cost"</span><span class="token punctuation">,</span> <span class="token string">"8000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    itemMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"remark"</span><span class="token punctuation">,</span> <span class="token string">"按需采购"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    itemList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>itemMap<span class="token punctuation">)</span><span class="token punctuation">;</span>    datas<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"item"</span><span class="token punctuation">,</span> itemList<span class="token punctuation">)</span><span class="token punctuation">;</span>    datas<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"total"</span><span class="token punctuation">,</span> <span class="token string">"18000.00"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//读取图片</span>    <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>path <span class="token operator">+</span> <span class="token string">"/1.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">BufferedImage</span> bi <span class="token operator">=</span> <span class="token class-name">ImageIO</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> width <span class="token operator">=</span> bi<span class="token punctuation">.</span><span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//源图高度</span>    <span class="token keyword">int</span> height <span class="token operator">=</span> bi<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    datas<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"image"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">PictureRenderData</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span> height<span class="token punctuation">,</span> <span class="token class-name">PictureType</span><span class="token punctuation">.</span>PNG<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"datas = "</span> <span class="token operator">+</span> datas<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">HackLoopTableRenderPolicy</span> hackLoopTableRenderPolicy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HackLoopTableRenderPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Configure</span> config <span class="token operator">=</span> <span class="token class-name">Configure</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">buildGramer</span><span class="token punctuation">(</span><span class="token string">"$&#123;"</span><span class="token punctuation">,</span> <span class="token string">"&#125;"</span><span class="token punctuation">)</span><span class="token comment">//此处可以变更原模板$&#123;&#125;</span>            <span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">"item"</span><span class="token punctuation">,</span> hackLoopTableRenderPolicy<span class="token punctuation">)</span><span class="token comment">//标记表格参数</span>            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> sourceFile <span class="token operator">=</span> path <span class="token operator">+</span> <span class="token string">"/template/采购单.docx"</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> docNow <span class="token operator">=</span> <span class="token class-name">LocalDateTimeUtils</span><span class="token punctuation">.</span><span class="token function">formatDate</span><span class="token punctuation">(</span>date<span class="token punctuation">,</span> <span class="token string">"yyyy年MM月dd日"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> targetFile <span class="token operator">=</span> path <span class="token operator">+</span> <span class="token string">"/order/采购单"</span> <span class="token operator">+</span> docNow <span class="token operator">+</span> <span class="token string">".docx"</span><span class="token punctuation">;</span>    <span class="token class-name">XWPFTemplate</span> template <span class="token operator">=</span> <span class="token class-name">XWPFTemplate</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>sourceFile<span class="token punctuation">)</span><span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>datas<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">File</span> wordFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>targetFile<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">File</span> parentFile <span class="token operator">=</span> wordFile<span class="token punctuation">.</span><span class="token function">getParentFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>parentFile<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        parentFile<span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">FileOutputStream</span> out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>wordFile<span class="token punctuation">)</span><span class="token punctuation">;</span>    template<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>    out<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    template<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> wordFile<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><font color=#999AAA >以上就是今天要讲的内容，本文仅仅简单介绍了poi-tl的使用，喜欢就点个赞吧！</font></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/blog/2022/04/24/hello-world/"/>
      <url>/blog/2022/04/24/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo搭建博客</title>
      <link href="/blog/2022/02/15/hexo-init/"/>
      <url>/blog/2022/02/15/hexo-init/</url>
      
        <content type="html"><![CDATA[<p> Hexo 是快速、简洁且高效的博客框架</p><blockquote><p>Hexo官网:<a href="https://hexo.io/zh-cn/">https://hexo.io/zh-cn/</a></p></blockquote><h2 id="Hexo搭建步骤"><a href="#Hexo搭建步骤" class="headerlink" title="Hexo搭建步骤"></a>Hexo搭建步骤</h2><p> 1.安装Git<br> 2.安装Node.js<br> 3.安装Hexo<br> 4.Gitee创建个人仓库</p><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><h3 id="1-GIT"><a href="#1-GIT" class="headerlink" title="1.GIT"></a>1.GIT</h3><blockquote><p>Git下载地址:<a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a><br>Git安装教程 :<a href="https://blog.csdn.net/sishen47k/article/details/80211002">https://blog.csdn.net/sishen47k/article/details/80211002</a></p></blockquote><h3 id="2-Node-js"><a href="#2-Node-js" class="headerlink" title="2.Node.js"></a>2.Node.js</h3><blockquote><p>Node.js下载地址:<a href="https://nodejs.org/en/download/">https://nodejs.org/en/download/</a><br>Node.js安装教程:<a href="https://www.runoob.com/nodejs/nodejs-install-setup.html">https://www.runoob.com/nodejs/nodejs-install-setup.html</a></p></blockquote><h3 id="2-Hexo"><a href="#2-Hexo" class="headerlink" title="2.Hexo"></a>2.Hexo</h3><ul><li><p>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。</p><blockquote><p>npm install -g hexo-cli</p></blockquote></li><li><p>安装hexo-deployer-git，跟git交互</p><blockquote><p>npm install hexo-deployer-git –save</p></blockquote></li><li><p>创建一个文件夹hexo</p><blockquote><p>mkdir hexo</p></blockquote></li><li><p>进入hexo</p><blockquote><p>cd hexo</p></blockquote></li><li><p>初始化一下hexo</p><blockquote><p>hexo init</p></blockquote></li><li><p>安装依赖</p><blockquote><p>npm install</p></blockquote></li><li><p>配置认证信息</p><blockquote><p>hexo d -fg</p></blockquote></li><li><p>推送远端git</p><blockquote><p>hexo -d</p></blockquote></li><li><p>开始部署博客并推到远端git 组合指令</p><blockquote><p>hexo g -d</p></blockquote></li><li><p>启动服务</p><blockquote><p>hexo serve</p></blockquote></li><li><p>部署生成页面</p><blockquote><p>hexo g</p></blockquote></li><li><p>清除已生成的页面</p><blockquote><p>hexo clean</p></blockquote></li><li><p>文件夹出现的名称</p></li></ul><table><thead><tr><th align="left">文件名称</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">node_modules</td><td align="left">依赖包</td></tr><tr><td align="left">public</td><td align="left">存放生成的页面</td></tr><tr><td align="left">scaffolds</td><td align="left">生成文章的一些模板</td></tr><tr><td align="left">source</td><td align="left">用来存放你的文章</td></tr><tr><td align="left">themes</td><td align="left">主题</td></tr><tr><td align="left">_config.yml</td><td align="left">博客的配置文件</td></tr></tbody></table><h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><ul><li>模板使用：<a href="https://gitee.com/mirrors_blinkfox/hexo-theme-matery.git">https://gitee.com/mirrors_blinkfox/hexo-theme-matery.git</a> </li><li>安装到themes目录下<blockquote><p>cd themes<br>git clone <a href="https://gitee.com/mirrors_blinkfox/hexo-theme-matery.git">https://gitee.com/mirrors_blinkfox/hexo-theme-matery.git</a></p></blockquote></li><li>修改 Hexo 根目录下的 _config.yml 的 theme 的值：theme: hexo-theme-matery</li></ul><p>安装完后即可用<code><strong>hexo s</strong></code>在本地启动，然后访问<code><strong>localhost:4000</strong></code>查看你的博客了</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
