<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>maven-help</title>
      <link href="/blog/2022/07/15/maven-help/"/>
      <url>/blog/2022/07/15/maven-help/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL帮助文档"><a href="#MySQL帮助文档" class="headerlink" title="MySQL帮助文档"></a>MySQL帮助文档</h1><h2 id="数据库一张表卡死的解决方案"><a href="#数据库一张表卡死的解决方案" class="headerlink" title="数据库一张表卡死的解决方案"></a>数据库一张表卡死的解决方案</h2><p>运行如下语句查看卡死的线程，有个时间字段可以看出卡住了多长时间</p><blockquote><p>select * from information_schema.innodb_trx;</p></blockquote><p>运行如下语句可杀死线程，全部杀死后，数据库恢复正常</p><blockquote><p>kill trx_mysql_thread_id</p></blockquote><p>查询连接池连接数</p><blockquote><p>show full processlist</p></blockquote><p>查看最大连接数</p><blockquote><p>show variables like ‘%max_connections%’;</p></blockquote><p>修改最大连接数(mysql重启后会失效)</p><blockquote><p>set GLOBAL max_connections = 8800;</p></blockquote><p>设置局域网访问权限</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">use mysql<span class="token punctuation">;</span> update user <span class="token builtin class-name">set</span> <span class="token function">host</span> <span class="token operator">=</span> <span class="token string">'%'</span> where user <span class="token operator">=</span> <span class="token string">'root'</span><span class="token punctuation">;</span>GRANT ALL PRIVILEGES ON *.* TO <span class="token string">'root'</span>@<span class="token string">'%'</span> IDENTIFIED BY <span class="token string">'root'</span> WITH GRANT OPTION<span class="token punctuation">;</span>flush privileges<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">命令中的两个星号，第一个星号表示数据库名称，第二个星号表示该数据库下的某个表名称。写成两个星号表示所有的数据库都进行授权。root表示授权root账号。“%”表示授权的用户IP可以指定，这里代表任意的IP地址都能访问MySQL数据库。“password”表示分配账号对应的密码，这里密码自己替换成你的mysql root帐号密码。“WITH GRANT OPTION” 这个选项表示该用户可以将自己拥有的权限授权给别人。注意：经常有人在创建操作用户的时候不指定WITH GRANT OPTION选项导致后来该用户不能使用GRANT命令创建用户或者给其它用户授权。如果不想这个用户有这个grant的权限，可以不加这句<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>grant all PRIVILEGES on testdabatase.testtable to username@’192.168.0.2’ identified by ‘user-pass’;</p><h2 id="基本指令"><a href="#基本指令" class="headerlink" title="基本指令"></a>基本指令</h2><ol><li>列出所有的数据库</li></ol><blockquote><p>show databases;</p></blockquote><ol start="2"><li>切换数据库</li></ol><blockquote><p>use 数据库的名字;</p></blockquote><ol start="3"><li>列出所有的表</li></ol><blockquote><p>show tables;</p></blockquote><ol start="4"><li>显示数据表结构</li></ol><blockquote><p>desc 表名;</p></blockquote><ol start="5"><li>删除数据库</li></ol><blockquote><p>drop databases 数据库名</p></blockquote><ol start="6"><li>删除数据表</li></ol><blockquote><p>drop table 数据表</p></blockquote><ol start="7"><li>查看mysql版本</li></ol><blockquote><p>select version();</p></blockquote><ol start="8"><li>查看当前的时间</li></ol><blockquote><p>select now();</p></blockquote><ol start="9"><li>查看当前登录的用户名</li></ol><blockquote><p>select user();</p></blockquote><blockquote><ol start="10"><li>查看数据库的编码方式</li></ol></blockquote><blockquote><p>show create database 数据库名;</p></blockquote><ol start="11"><li>查看错误信息</li></ol><blockquote><p>show warnings;</p></blockquote><ol start="12"><li>创建一个gbk格式的数据库</li></ol><blockquote><p>create database if not exists 数据库名 character set gbk;</p></blockquote><ol start="13"><li>修改数据库的编码方式</li></ol><blockquote><p>alter database 数据库名 character set=utf8;</p></blockquote><ol start="14"><li>直接查看某个库有多少张表</li></ol><blockquote><p>show tables from 数据库名；</p></blockquote><ol start="15"><li>直接查看当前处于哪个数据库</li></ol><blockquote><p>select database();</p></blockquote><ol start="16"><li>查看表的结构</li></ol><blockquote><p>show columns from 表名；</p></blockquote><ol start="17"><li>添加一列到某个字段的后面</li></ol><blockquote><p>alter table 表名 add 将要添加的字段 varchar(10) after 某个字段</p></blockquote><ol start="18"><li>添加一列到第一列</li></ol><blockquote><p>alter table 表名 add 添加的字段名 varchar(10) first</p></blockquote><ol start="19"><li>删除多列</li></ol><blockquote><p>alter table 表名 drop xxx,drop xxx;</p></blockquote><ol start="20"><li>增加一个主键列</li></ol><blockquote><p>alter table表名 add constraint 列名 primary key (id)</p></blockquote><ol start="21"><li>增加唯一约束列</li></ol><blockquote><p>alter table 表名 add unique (列名)</p></blockquote><ol start="22"><li>设置客户端的编码方式</li></ol><blockquote><p>set names gbk;</p></blockquote><ol start="23"><li>删除主键约束</li></ol><blockquote><p>alter table 表名 drop primary key;</p></blockquote><ol start="24"><li>删除唯一约束，不删除字段</li></ol><blockquote><p>alter table 表名 drop index 列名</p></blockquote><ol start="25"><li>查看外键约束索引</li></ol><blockquote><p>show indexes from 表名\G</p></blockquote><p>当数据库插入、修改报以下错误说明数据库被锁定了，检查是否数据库磁盘空间满了，清除部分数据后，数据库会自动解锁<br>SQL Error (1290): The MySQL server is running with the –rds-read-and-drop-only option so it cannot execute this statement</p><h2 id="导出指令"><a href="#导出指令" class="headerlink" title="导出指令"></a>导出指令</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">mysqldump -u账号 -p密码 数据库名 表名 <span class="token operator">></span>存放路径<span class="token punctuation">;</span>mysqldump -uroot -proot cloud_db sys_user <span class="token operator">></span>/home/user.sql<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql事务</title>
      <link href="/blog/2022/07/12/mysql-transaction/"/>
      <url>/blog/2022/07/12/mysql-transaction/</url>
      
        <content type="html"><![CDATA[<h1 id="Mysql事务"><a href="#Mysql事务" class="headerlink" title="Mysql事务"></a>Mysql事务</h1><h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p>1、在MySQL中只有Innodb存储引擎的数据库才支持事务</p><p>2、事务处理可以用来维护数据的完整性，保证一组数据操作，要么全部成功，要么全部失败</p><p>3、事务主要用来管理insert，update，delete语句</p><h2 id="二、事务的基本要素（ACID）"><a href="#二、事务的基本要素（ACID）" class="headerlink" title="二、事务的基本要素（ACID）"></a>二、事务的基本要素（ACID）</h2><p>1、原子性（Atomicity）：事务开始后的所有操作，<strong>要么全部完成，要么全部失败</strong>,一旦在某个环节发生错误，之前执行的操作会被<strong>回滚</strong> （Rollback）到事务开始前的状态。</p><p>2、一致性（Consistency）：在事务开始之前和结束之后，数据库的完整性没有被破坏。<strong>比如A向B转账，不可能A扣了钱，B却没收到。</strong></p><p>3、隔离性（Isolation）：同一时间，只允许一个事务请求同一条数据，不同的事务之前彼此没有任何干扰。</p><p>4、持久性（Durability）:事务完成后，事务对数据库的所有更新将被保存到数据库，不能回滚</p><h2 id="三、事务的实现原理"><a href="#三、事务的实现原理" class="headerlink" title="三、事务的实现原理"></a>三、事务的实现原理</h2><p>mysql没执行一条聚聚记录一条日志</p><p>1、start transaction，先记个日志，真正执行。</p><h2 id="四、事务的相关指令"><a href="#四、事务的相关指令" class="headerlink" title="四、事务的相关指令"></a>四、事务的相关指令</h2><p><strong>事务的开始</strong></p><p><code>begin</code>或<code>start trancaction</code>都是显式开启一个事务；</p><p><strong>事务的提交</strong></p><p><code>commit</code>或<code>commit work</code> 都是等价的</p><p><strong>事务回滚</strong></p><p><code>rollback</code>或<code>rollback word</code>也是等价的</p><p><strong>示例</strong>:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">start transaction<span class="token punctuation">;</span> <span class="token comment">#开启事务 还可以用begin开启事务</span>UPDATE user <span class="token builtin class-name">set</span> balance <span class="token operator">=</span> balance - <span class="token number">200</span> where <span class="token function">id</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> UPDATE user <span class="token builtin class-name">set</span> balance <span class="token operator">=</span> balance + <span class="token number">200</span> where <span class="token function">id</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>commit<span class="token punctuation">;</span> <span class="token comment"># 提交事务，代表事务结束。更新的数据保存到数据库</span>start transaction<span class="token punctuation">;</span> <span class="token comment">#开启事务</span>UPDATE user <span class="token builtin class-name">set</span> balance <span class="token operator">=</span> balance - <span class="token number">200</span> where <span class="token function">id</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> UPDATE user <span class="token builtin class-name">set</span> balance <span class="token operator">=</span> balance + <span class="token number">200</span> where <span class="token function">id</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> rollback<span class="token punctuation">;</span> <span class="token comment"># 事务回滚，上面更新的数据将被还原到执行前</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、事务的并发问题"><a href="#五、事务的并发问题" class="headerlink" title="五、事务的并发问题"></a>五、事务的并发问题</h2><p>1、脏读：事务A读取了事务B更新的数据，然后B回滚操作，那么A读取到的数据是脏数据</p><p>2、不可重复读：事务 A 多次读取同一数据，事务 B 在事务A多次读取的过程中，对数据作了更新并提交，导致事务A多次读取同一数据时，结果不一致。</p><p>3、幻读：系统管理员A将数据库中所有学生的成绩从具体分数改为ABCDE等级，但是系统管理员B就在这个时候插入了一条具体分数的记录，当系统管理员A改结束后发现还有一条记录没有改过来，就好像发生了幻觉一样，这就叫幻读。</p><p><strong>小结：不可重复读的和幻读很容易混淆，不可重复读侧重于修改，幻读侧重于新增或删除。解决不可重复读的问题只需锁住满足条件的行，解决幻读需要锁表</strong></p><h2 id="六、事务的隔离级别"><a href="#六、事务的隔离级别" class="headerlink" title="六、事务的隔离级别"></a>六、事务的隔离级别</h2><p><strong>MySQL的默认隔离级别是可重复读</strong></p><table><thead><tr><th align="left">事务隔离级别</th><th align="left">脏读</th><th align="left">不可重复读</th><th align="left">幻读</th></tr></thead><tbody><tr><td align="left">读未提交（Read Uncommitted）</td><td align="left">是</td><td align="left">是</td><td align="left">是</td></tr><tr><td align="left">读已提交（Read Committed）</td><td align="left">否</td><td align="left">是</td><td align="left">是</td></tr><tr><td align="left">可重复读（Repeatable Read）</td><td align="left">否</td><td align="left">否</td><td align="left">是</td></tr><tr><td align="left">串行化（Serializable）</td><td align="left">否</td><td align="left">否</td><td align="left">否</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql索引</title>
      <link href="/blog/2022/07/12/mysql-index/"/>
      <url>/blog/2022/07/12/mysql-index/</url>
      
        <content type="html"><![CDATA[<h1 id="Mysql索引"><a href="#Mysql索引" class="headerlink" title="Mysql索引"></a>Mysql索引</h1><h3 id="一、什么是索引？"><a href="#一、什么是索引？" class="headerlink" title="一、什么是索引？"></a>一、什么是索引？</h3><p>拿汉语字典的目录页（索引）打比方，我们可以按拼音、笔画、偏旁部首等排序的目录（索引）快速查找到需要的字。</p><h3 id="二、索引的优缺点"><a href="#二、索引的优缺点" class="headerlink" title="二、索引的优缺点?"></a>二、索引的优缺点?</h3><p><strong>优点：</strong></p><p>1、索引可以大大提高MySQL的检索速度。</p><p>2、所有的MySql列类型(字段类型)都可以被索引，可以给任意字段设置索引</p><p><strong>缺点：</strong></p><p>1、虽然索引大大提高了查询速度，同时却会降低更新表的速度，如对表进行INSERT、UPDATE和DELETE。因为更新表时，MySQL不仅要保存数据，还要保存索引文件。<br>2、建立索引会占用磁盘空间的索引文件。一般情况这个问题不太严重，但如果你在一个大表上创建了多种组合索引，索引文件的会膨胀很快。<br>3、对于离散度较差的数据，为它建立索引就没有太大的实际效果。比如：性别字段<br>4、对于非常小的表，大部分情况下简单的全表扫描更高效。</p><h3 id="三、索引的分类"><a href="#三、索引的分类" class="headerlink" title="三、索引的分类"></a>三、索引的分类</h3><h4 id="1、按列来区分："><a href="#1、按列来区分：" class="headerlink" title="1、按列来区分："></a>1、按列来区分：</h4><p><strong>索引分单列索引和复合索引。</strong></p><p><strong>单列索引：</strong>即一个索引只包含单个列，一个表可以有多个单列索引，但这不是组合索引。</p><p><strong>复合索引：</strong>即一个索引包含多个列。</p><hr><p><strong>注1：复合索引有哪些好处？</strong></p><p><strong>减少开销：</strong>建一个复合索引 (Gid,Cid,SId) ，实际相当于建了 (Gid)、(Gid,Cid)、(Gid,Cid,SId) 三个索引。每多一个索引，都会增加写操作的开销和磁盘空间的开销。对于大量数据的表，使用复合索引会大大的减少开销！</p><p><strong>覆盖索引：</strong><code>select Gid,Cid,SId from student where Gid =1 and Cid =2</code>。那么MySQL可以直接通过遍历索引取得数据，而无需回表，这减少了很多的随机IO操作。减少IO操作，特别的随机IO其实是DBA主要的优化策略。所以，在真正的实际应用中，覆盖索引是主要的提升性能的优化手段之一。</p><p><strong>效率高：</strong>索引列越多，通过索引筛选出的数据越少。有1000W条数据的表，有如下sql:<code>select from table where Gid =1 and Cid =2 and SId =3</code>,假设假设每个条件可以筛选出10%的数据，如果只有单值索引，那么通过该索引能筛选出1000W10%=100w条数据，然后再回表从100w条数据中找到符合<code> Gid =2 and Cid = 3</code>的数据，然后再排序，再分页；如果是复合索引，通过索引筛选出1000w10% 10% *10%=1w，效率提升可想而知！</p><p><strong>缺点：</strong>复合索引越多，索引列越多，则创建的索引越多，索引都是存储在磁盘里的，通过索引算法 BTree代表索引算法使用二叉树的形式来做索引的)来查找数据，的确可以极大的提高查询效率，但是与此同时增删改的同时，需要更新索引，同样是需要花时间的，并且索引所占的磁盘空间也不小。</p><p><strong>建议：</strong>单表尽可能不要超过一个复合索引，单列索引不超过3个</p><p><strong>注2：复合索引的注意事项</strong><br>1、<strong>最左前缀匹配原则：</strong> 非常重要的原则，mysql会一直向右匹配直到遇到范围查询(&gt;、&lt;、between、 like)就停止匹配，比如a = 1 and b = 2 and c &gt; 3 and d = 4 如果建立(a,b,c,d)顺序的索引，d是用不到索引的，如果建立(a,b,d,c)的索引则都可以用到，a,b,d的顺序可以任意调整。<br>2、=和in可以乱序，比如a = 1 and b = 2 and c = 3 建立(a,b,c)索引可以任意顺序，mysql的查询优化器会 帮你优化成索引可以识别的形式。</p><hr><h4 id="2、按数据存储方式区分："><a href="#2、按数据存储方式区分：" class="headerlink" title="2、按数据存储方式区分："></a>2、按数据存储方式区分：</h4><p><strong>索引分聚簇索引和非聚簇索引</strong></p><p><strong>聚簇索引：</strong>聚簇索引就是按照每张表的主键构造一颗B+树 。 同时叶子节点中存放的就是整张表的行记录数据，也将聚集索引的叶子节点称为数据页。 这个特性决定了索引组织表中数据也是索引的一部分，每张表只能拥有一个聚簇索引。</p><hr><p><strong>注</strong>：Innodb通过主键聚集数据，如果没有定义主键，innodb会选择非空的唯一索引代替。如果没有这样的索引，innodb会隐式的定义一个主键来作为聚簇索引。</p><hr><p><strong>非聚簇索引：</strong>聚簇索引之上创建的索引称之为非聚簇索引（也称为辅助索引）。辅助索引访问数据需要二次查找，辅助索引叶子节点存储的不再是行的物理位置，而是主键值。通过辅助索引首先找到的是主键值，再通过主键值找到数据行的数据页（这个过程叫<strong>回表</strong>）</p><h4 id="3、按作用区分"><a href="#3、按作用区分" class="headerlink" title="3、按作用区分"></a>3、按作用区分</h4><p><strong>主键索引（primary key）：</strong>也简称主键，提供唯一性约束并不允许为空。一张表中只能有一个主键。被标记为自动增长的字段一定是主键，但主键不一定是自动增长。一般把主键定义在无意义的字段上（如：编号）</p><p><strong>普通索引（normal）：</strong>普通索引是最基本的索引，它没有任何限制，值可以为空，仅加速查询</p><p><strong>唯一索引（unique）：</strong> 唯一索引与普通索引类似，不同的就是：索引列的值必须唯一，但允许有空值。如果是组合索引，则列值的组合必须唯一</p><p><strong>全文索引（fulltext）：</strong>全文索引主要用来查找文本中的关键字，而不是直接与索引中的值相比较。fulltext索引跟其它索引大不相同，它更像是一个搜索引擎</p><p><strong>空间索引（spatial）：</strong>MySQL在5.7之后的版本支持了空间索引，而且支持OpenGIS几何数据模型。这是在地理位置领域使用的一种索引，其他场景用的很少</p><h3 id="四、MySQL索引失效的几种情况"><a href="#四、MySQL索引失效的几种情况" class="headerlink" title="四、MySQL索引失效的几种情况"></a>四、MySQL索引失效的几种情况</h3><p><strong>1、有or必须将or条件中的每个列都加上索引，否则索引无效;</strong></p><p><strong>2、复合索引未用左列字段;</strong></p><p><strong>3、like以%开头;</strong></p><p><strong>4、需要类型转换;</strong></p><p><strong>5、where中索引列有运算;</strong></p><p><strong>6、where中索引列使用了函数;</strong></p><p><strong>7、如果mysql觉得全表扫描更快时（数据少）;</strong></p><h3 id="五、MySQL存储引擎InnoDB和MyISAM的区别"><a href="#五、MySQL存储引擎InnoDB和MyISAM的区别" class="headerlink" title="五、MySQL存储引擎InnoDB和MyISAM的区别"></a>五、MySQL存储引擎InnoDB和MyISAM的区别</h3><p><strong>1、介绍</strong></p><ul><li><strong>MyISAM：</strong>在MySQL 5.1 及之前的版本，MyISAM是默认引擎。MyISAM提供的大量的特性，包括全文索引、压缩、空间函数（GIS）等，但MyISAM并不支持事务以及行级锁，而且一个毫无疑问的缺陷是崩溃后无法安全恢复。</li><li><strong>InnoDB：</strong>MySQL默认的事务型引擎，也是最重要和使用最广泛的存储引擎。它被设计成为大量的短期事务，短期事务大部分情况下是正常提交的，很少被回滚。</li></ul><p><strong>2、存储结构</strong></p><ul><li><strong>MyISAM：</strong>每个MyISAM在磁盘上存储成三个文件。分别为：<strong>表定义文件、数据文件、索引文件。</strong></li><li><strong>InnoDB：</strong>基于磁盘的资源是InnoDB表空间数据文件和它的日志文件，InnoDB 表的大小只受限于操作系统文件的大小，一般为 2GB</li></ul><p><strong>3、事务支持</strong></p><ul><li><strong>MyISAM：</strong>强调的是性能，每次查询具有原子性,其执行数度比InnoDB类型更快，但是不提供事务支持。</li><li><strong>InnoDB：</strong>提供事务支持事务，外部键等高级数据库功能。 具有事务(commit)、回滚(rollback)和崩溃修复能力(crash recovery capabilities)的事务安全(transaction-safe (ACID compliant))型表。</li></ul><p><strong>4、锁支持</strong></p><ul><li><strong>MyISAM：</strong> 只支持表级锁，用户在操作myisam表时，select，update，delete，insert语句都会给表自动加锁，如果加锁以后的表满足insert并发的情况下，可以在表的尾部插入新的数据。</li><li><strong>InnoDB：</strong> 支持事务和行级锁，是innodb的最大特色。行锁大幅度提高了多用户并发操作的性能。但是InnoDB的行锁，只是在WHERE的主键是有效的，非主键的WHERE都会锁全表的。</li></ul><p><strong>5、统计行数</strong></p><ul><li><strong>MyISAM：</strong>用一个变量保存了整个表的行数，执行上述语句时只需要读出该变量即可，速度很快（注意不能加有任何WHERE条件）。</li><li><strong>InnoDB：</strong>不保存表的具体行数，执行select count(*) from table时需要全表扫描。</li></ul><p><strong>6、外键支持</strong></p><ul><li><strong>MyISAM：</strong>不支持</li><li><strong>InnoDB：</strong>支持</li></ul><p><strong>7、聚簇索引</strong></p><ul><li><strong>MyISAM：</strong>myisam不是聚集索引</li><li>**InnoDB： **InnoDB是聚集索引，使用B+Tree作为索引结构，数据文件是和（主键）索引绑在一起的（表数据文件本身就是按B+Tree组织的一个索引结构），必须要有主键，通过主键索引效率很高。</li></ul><p><strong>8、MVVC</strong></p><ul><li><strong>MyISAM：</strong>不支持</li><li><strong>InnoDB：</strong>支持</li></ul><p><strong>9、全文索引</strong></p><ul><li><strong>MyISAM：</strong>支持</li><li><strong>InnoDB：</strong>部分版本不支持(但可以使用Sphinx插件)；</li></ul><h3 id="六、索引数据结构"><a href="#六、索引数据结构" class="headerlink" title="六、索引数据结构"></a>六、索引数据结构</h3><p>MySQL中最常用的为InnoDB存储引擎，而索引的数据结构最为常用和有效为B+Tree（B树）。</p><p>B+树是B-树的变体，也是一种多路搜索树。B+Tree和B-Tree的区别在于：</p><p>1、B+Tree只在叶子节点存数据，非叶子节点存指针和键值。</p><p>2、为所有的叶子节点新增一个链指针。</p><h3 id="七、explain关键字"><a href="#七、explain关键字" class="headerlink" title="七、explain关键字"></a>七、explain关键字</h3><p>explain的执行结果</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mysql<span class="token operator">></span> explain <span class="token keyword">select</span> * from subject where <span class="token function">id</span> <span class="token operator">=</span> <span class="token number">1</span> ****************************************************** id: <span class="token number">1</span> //select查询的序列号，包含一组数字，表示查询中执行select子句或操作表的顺序select_type: SIMPLE //查询类型table: subject  //正在访问哪个表partitions: NULL  //匹配的分区type: const //访问的类型possible_keys: PRIMARY  //显示可能应用在这张表中的索引，一个或多个，但不一定实际使用到key: PRIMARY //实际使用到的索引，如果为NULL，则没有使用索引key_len: <span class="token number">4</span> //表示索引中使用的字节数，可通过该列计算查询中使用的索引的长度ref: const  //显示索引的哪一列被使用了，如果可能的话，是一个常数，哪些列或常量被用于查找索引列上的值rows: <span class="token number">1</span> //根据表统计信息及索引选用情况，大致估算出找到所需的记录所需读取的行数filtered: <span class="token number">100.00</span>  //查询的表行占表的百分比Extra: NULL  //包含不适合在其它列中显示但十分重要的额外信息******************************************************<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo配置nginx代理页面</title>
      <link href="/blog/2022/07/12/hexo-nginx-config/"/>
      <url>/blog/2022/07/12/hexo-nginx-config/</url>
      
        <content type="html"><![CDATA[<h1 id="hexo配置nginx代理页面"><a href="#hexo配置nginx代理页面" class="headerlink" title="hexo配置nginx代理页面"></a>hexo配置nginx代理页面</h1><h3 id="用hexo生成页面"><a href="#用hexo生成页面" class="headerlink" title="用hexo生成页面"></a>用hexo生成页面</h3><ol><li><p>修改hexo配置_config.yml的root资源目录根路径  当前hexo是在/home/hexo下</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">vim</span> _config.yml<span class="token comment">#将root属性的 / 改成 /blog  对应nginx </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>修改页面作者信息</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">vim</span> _config.yml  <span class="token comment">#根目录下的</span><span class="token comment">#将author 改成 Sam </span>title: Hexosubtitle: <span class="token string">''</span>description: <span class="token string">''</span>keywords:author: Samlanguage: entimezone: <span class="token string">''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>修改matery about页面下的信息</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token builtin class-name">cd</span> themes/hexo-theme-matery<span class="token function">vim</span> _config.yml<span class="token comment">#修改socialLink下的配置</span>socialLink:  github:  https://github.com/???  email: ???@qq.com  facebook: <span class="token comment"># https://www.facebook.com/xxx</span>  twitter: <span class="token comment"># https://twitter.com/xxx</span>  qq: ???  weibo: <span class="token comment"># https://weibo.com/xxx</span>  zhihu: <span class="token comment"># https://www.zhihu.com/xxx</span>  rss: <span class="token boolean">true</span> <span class="token comment"># true、false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>到根目录下运行指令</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">hexo clean    <span class="token comment">#清空原始页面</span>hexo g        <span class="token comment">#生成静态页面 /public</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h2 id="配置nginx-conf"><a href="#配置nginx-conf" class="headerlink" title="配置nginx.conf"></a>配置nginx.conf</h2><ol><li><p>配置nginx.conf</p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">location &#x2F;blog&#x2F; &#123;    alias  &#x2F;home&#x2F;hexo&#x2F;public&#x2F;;  #指定到hexo生成的public页面中&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>启动nginx</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">./nginx -t./nginx 或者 ./nginx -s reload<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>hexo生成的页面使用nginx的alias解析到绝对路径下，使用 <a href="http://ip:port/blog即可访问到！">http://ip:port/blog即可访问到！</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>maven无法识别本地jar</title>
      <link href="/blog/2022/07/11/maven-unrecognized/"/>
      <url>/blog/2022/07/11/maven-unrecognized/</url>
      
        <content type="html"><![CDATA[<h1 id="maven无法识别本地jar"><a href="#maven无法识别本地jar" class="headerlink" title="maven无法识别本地jar"></a>maven无法识别本地jar</h1><p>以前用的私服，现在不使用了，更改了maven 的 setting 设置，导致本地有jar但是maven无法引入；</p><p>可以先执行第三条，不行再执行其他的</p><h2 id="1-注意事项和位置"><a href="#1-注意事项和位置" class="headerlink" title="1.注意事项和位置"></a>1.注意事项和位置</h2><p>创建bat 文件</p><ul><li><code>.bat文件要和仓库在同一平级目录</code></li><li><code>REPOSITORY_PATH要改成你自己仓库的地址</code></li></ul><h2 id="2、删除-lastUpdated文件-失败的jar包"><a href="#2、删除-lastUpdated文件-失败的jar包" class="headerlink" title="2、删除.lastUpdated文件(失败的jar包)"></a>2、删除.lastUpdated文件(失败的jar包)</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token builtin class-name">set</span> <span class="token assign-left variable">REPOSITORY_PATH</span><span class="token operator">=</span>D:<span class="token punctuation">\</span>maven<span class="token punctuation">\</span>repository<span class="token keyword">for</span> /f <span class="token string">"delims="</span> %%i <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token string">'dir /b /s "%REPOSITORY_PATH%\*lastUpdated*"'</span><span class="token punctuation">)</span> <span class="token keyword">do</span> <span class="token punctuation">(</span>    del /s /q %%i<span class="token punctuation">)</span>pause<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3、删除-remote-repositories文件（主要）"><a href="#3、删除-remote-repositories文件（主要）" class="headerlink" title="3、删除_remote.repositories文件（主要）"></a>3、删除_remote.repositories文件（主要）</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token builtin class-name">set</span> <span class="token assign-left variable">REPOSITORY_PATH</span><span class="token operator">=</span>D:<span class="token punctuation">\</span>maven<span class="token punctuation">\</span>repositoryrem 正在搜索<span class="token punctuation">..</span>.<span class="token keyword">for</span> /f <span class="token string">"delims="</span> %%i <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token string">'dir /b /s "%REPOSITORY_PATH%\*_remote.repositories*"'</span><span class="token punctuation">)</span> <span class="token keyword">do</span> <span class="token punctuation">(</span>    del /s /q %%i<span class="token punctuation">)</span>rem 搜索完毕pause<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4、删除-maven-repositories文件-没影响可留"><a href="#4、删除-maven-repositories文件-没影响可留" class="headerlink" title="4、删除_maven.repositories文件(没影响可留)"></a>4、删除_maven.repositories文件(没影响可留)</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token builtin class-name">set</span> <span class="token assign-left variable">REPOSITORY_PATH</span><span class="token operator">=</span>D:<span class="token punctuation">\</span>maven<span class="token punctuation">\</span>repositoryrem 正在搜索<span class="token punctuation">..</span>.<span class="token keyword">for</span> /f <span class="token string">"delims="</span> %%i <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token string">'dir /b /s "%REPOSITORY_PATH%\*_maven.repositories*"'</span><span class="token punctuation">)</span> <span class="token keyword">do</span> <span class="token punctuation">(</span>    del /s /q %%i<span class="token punctuation">)</span>rem 搜索完毕pause<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>yum安装mysql8</title>
      <link href="/blog/2022/04/28/yum%E5%AE%89%E8%A3%85mysql8/"/>
      <url>/blog/2022/04/28/yum%E5%AE%89%E8%A3%85mysql8/</url>
      
        <content type="html"><![CDATA[<h1 id="Centos8-yum-安装mysql8"><a href="#Centos8-yum-安装mysql8" class="headerlink" title="Centos8 yum 安装mysql8"></a>Centos8 yum 安装mysql8</h1><h2 id="yum-安装mysql8"><a href="#yum-安装mysql8" class="headerlink" title="yum 安装mysql8"></a>yum 安装mysql8</h2><ol><li><p>获取官方下载地址 <a href="https://dev.mysql.com/downloads/repo/yum/">https://dev.mysql.com/downloads/repo/yum/</a></p></li><li><p>下载mysql安装包 ：wget <a href="https://repo.mysql.com//mysql80-community-release-el8-1.noarch.rpm">https://repo.mysql.com//mysql80-community-release-el8-1.noarch.rpm</a></p></li><li><p>将下载好的安装包挂载到本地 找个路径放 cd /home/package<br>yum localinstall mysql80-community-release-el8-1.noarch.rpm</p></li><li><p>查看是否挂载成功<br>yum repolist enabled | grep “mysql.<em>-community.</em>“</p></li><li><p>禁用centos8.0自带的mysql模块<br>yum module disable mysql</p></li><li><p>安装mysql：yum install mysql-community-server</p></li><li><p>启动mysql服务<br>systemctl mysqld start</p></li><li><p>查看mysql服务启动状态<br>systemctl mysqld status</p></li><li><p>查看mysql安装时生成的随机密码<br>grep ‘temporary password’ /var/log/mysqld.log</p></li><li><p>登录mysql<br>mysql -uroot -p’刚获取到的随机密码’</p></li><li><p>修改登录密码<br>ALTER USER ‘root’ @’localhost’ IDENTIFIED BY ‘您的密码’;<br>出现这个问题，表示密码过于简单<br>ERROR 1819 (HY000): Your password does not satisfy the current policy requirements</p></li><li><p>开放mysql远程访问<br>创建权限记录：<br>CREATE user ‘root‘@’%’ IDENTIFIED BY ‘您的密码’;<br>授权：<br>GRANT ALL PRIVILEGES ON <em>.</em> TO ‘root’ @’%’ WITH GRANT OPTION;<br>修改密码过期策略：<br>ALTER USER ‘root’ @’localhost’ IDENTIFIED BY ‘您的密码’ PASSWORD EXPIRE NEVER;<br>重新修改密码：<br>ALTER USER ‘root’ @’%’ IDENTIFIED WITH mysql_native_password BY ‘您的密码’;<br>刷新权限：<br>FLUSH PRIVILEGES;</p></li></ol><h2 id="相关命令"><a href="#相关命令" class="headerlink" title="相关命令"></a>相关命令</h2><p>mysql服务相关命令<br>启动服务：service mysqld start<br>停止服务：service mysqld stop<br>重启服务：service mysqld restart<br>查看服务状态：service mysqld status</p><p>设置mysql开机自启：<br>systemctl enable mysqld<br>systemctl daemon-reload<br>查看自启服务<br>systemctl list-units –type=service</p>]]></content>
      
      
      
        <tags>
            
            <tag> 安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>poi-tl word模板填充</title>
      <link href="/blog/2022/04/28/poi-tl-word%E6%A8%A1%E6%9D%BF%E5%A1%AB%E5%85%85/"/>
      <url>/blog/2022/04/28/poi-tl-word%E6%A8%A1%E6%9D%BF%E5%A1%AB%E5%85%85/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><font color=#999AAA >java poi-tl word模板填充，word填充基于com.deepoove 的 poi-tl</font><h2 id="一、引入maven库"><a href="#一、引入maven库" class="headerlink" title="一、引入maven库"></a>一、引入maven库</h2><p>注意：版本对应 poi-tl 版本 1.9.0-beta 对应 apache poi 版本 4.1.2</p><p><font color=#999AAA >代码如下（示例）：</font></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>word模板数据解析<span class="token operator">--</span><span class="token operator">></span><span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">></span></span>    <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">></span></span>com<span class="token punctuation">.</span>deepoove<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">></span></span>poi<span class="token operator">-</span>tl<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">></span></span><span class="token number">1.9</span><span class="token number">.0</span><span class="token operator">-</span>beta<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、读入数据"><a href="#二、读入数据" class="headerlink" title="二、读入数据"></a>二、读入数据</h2><p>默认采用${key}的形式进行填充！<br>原word模板：<br><img src="cgd-1.png" alt="模板图"><br>效果图：<br><img src="cgd-2.png" alt="效果图"></p><h2 id="三、示例代码"><a href="#三、示例代码" class="headerlink" title="三、示例代码"></a>三、示例代码</h2><p><font color=#999AAA >代码如下（示例）：</font></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>    <span class="token function">resolveTemp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">File</span> <span class="token function">resolveTemp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> path <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"user.dir"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"/file"</span><span class="token punctuation">;</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> datas <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    datas<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"dept"</span><span class="token punctuation">,</span> <span class="token string">"采购部"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    datas<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">LocalDate</span> date <span class="token operator">=</span> <span class="token class-name">LocalDate</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    datas<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"year"</span><span class="token punctuation">,</span> date<span class="token punctuation">.</span><span class="token function">getYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    datas<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"month"</span><span class="token punctuation">,</span> date<span class="token punctuation">.</span><span class="token function">getMonthValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    datas<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"day"</span><span class="token punctuation">,</span> date<span class="token punctuation">.</span><span class="token function">getDayOfMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span><span class="token punctuation">></span></span> itemList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> itemMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    itemMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"goods"</span><span class="token punctuation">,</span> <span class="token string">"笔记本电脑"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    itemMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"num"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    itemMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"cost"</span><span class="token punctuation">,</span> <span class="token string">"10000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    itemMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"remark"</span><span class="token punctuation">,</span> <span class="token string">"按需采购"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    itemList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>itemMap<span class="token punctuation">)</span><span class="token punctuation">;</span>    itemMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    itemMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"goods"</span><span class="token punctuation">,</span> <span class="token string">"台式电脑"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    itemMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"num"</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    itemMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"cost"</span><span class="token punctuation">,</span> <span class="token string">"8000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    itemMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"remark"</span><span class="token punctuation">,</span> <span class="token string">"按需采购"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    itemList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>itemMap<span class="token punctuation">)</span><span class="token punctuation">;</span>    datas<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"item"</span><span class="token punctuation">,</span> itemList<span class="token punctuation">)</span><span class="token punctuation">;</span>    datas<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"total"</span><span class="token punctuation">,</span> <span class="token string">"18000.00"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//读取图片</span>    <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>path <span class="token operator">+</span> <span class="token string">"/1.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">BufferedImage</span> bi <span class="token operator">=</span> <span class="token class-name">ImageIO</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> width <span class="token operator">=</span> bi<span class="token punctuation">.</span><span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//源图高度</span>    <span class="token keyword">int</span> height <span class="token operator">=</span> bi<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    datas<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"image"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">PictureRenderData</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span> height<span class="token punctuation">,</span> <span class="token class-name">PictureType</span><span class="token punctuation">.</span>PNG<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"datas = "</span> <span class="token operator">+</span> datas<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">HackLoopTableRenderPolicy</span> hackLoopTableRenderPolicy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HackLoopTableRenderPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Configure</span> config <span class="token operator">=</span> <span class="token class-name">Configure</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">buildGramer</span><span class="token punctuation">(</span><span class="token string">"$&#123;"</span><span class="token punctuation">,</span> <span class="token string">"&#125;"</span><span class="token punctuation">)</span><span class="token comment">//此处可以变更原模板$&#123;&#125;</span>            <span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">"item"</span><span class="token punctuation">,</span> hackLoopTableRenderPolicy<span class="token punctuation">)</span><span class="token comment">//标记表格参数</span>            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> sourceFile <span class="token operator">=</span> path <span class="token operator">+</span> <span class="token string">"/template/采购单.docx"</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> docNow <span class="token operator">=</span> <span class="token class-name">LocalDateTimeUtils</span><span class="token punctuation">.</span><span class="token function">formatDate</span><span class="token punctuation">(</span>date<span class="token punctuation">,</span> <span class="token string">"yyyy年MM月dd日"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> targetFile <span class="token operator">=</span> path <span class="token operator">+</span> <span class="token string">"/order/采购单"</span> <span class="token operator">+</span> docNow <span class="token operator">+</span> <span class="token string">".docx"</span><span class="token punctuation">;</span>    <span class="token class-name">XWPFTemplate</span> template <span class="token operator">=</span> <span class="token class-name">XWPFTemplate</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>sourceFile<span class="token punctuation">)</span><span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>datas<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">File</span> wordFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>targetFile<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">File</span> parentFile <span class="token operator">=</span> wordFile<span class="token punctuation">.</span><span class="token function">getParentFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>parentFile<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        parentFile<span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">FileOutputStream</span> out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>wordFile<span class="token punctuation">)</span><span class="token punctuation">;</span>    template<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>    out<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    template<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> wordFile<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><font color=#999AAA >以上就是今天要讲的内容，本文仅仅简单介绍了poi-tl的使用，喜欢就点个赞吧！</font></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/blog/2022/04/24/hello-world/"/>
      <url>/blog/2022/04/24/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo搭建博客</title>
      <link href="/blog/2022/02/15/hexo-init/"/>
      <url>/blog/2022/02/15/hexo-init/</url>
      
        <content type="html"><![CDATA[<p> Hexo 是快速、简洁且高效的博客框架</p><blockquote><p>Hexo官网:<a href="https://hexo.io/zh-cn/">https://hexo.io/zh-cn/</a></p></blockquote><h2 id="Hexo搭建步骤"><a href="#Hexo搭建步骤" class="headerlink" title="Hexo搭建步骤"></a>Hexo搭建步骤</h2><p> 1.安装Git<br> 2.安装Node.js<br> 3.安装Hexo<br> 4.Gitee创建个人仓库</p><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><h3 id="1-GIT"><a href="#1-GIT" class="headerlink" title="1.GIT"></a>1.GIT</h3><blockquote><p>Git下载地址:<a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a><br>Git安装教程 :<a href="https://blog.csdn.net/sishen47k/article/details/80211002">https://blog.csdn.net/sishen47k/article/details/80211002</a></p></blockquote><h3 id="2-Node-js"><a href="#2-Node-js" class="headerlink" title="2.Node.js"></a>2.Node.js</h3><blockquote><p>Node.js下载地址:<a href="https://nodejs.org/en/download/">https://nodejs.org/en/download/</a><br>Node.js安装教程:<a href="https://www.runoob.com/nodejs/nodejs-install-setup.html">https://www.runoob.com/nodejs/nodejs-install-setup.html</a></p></blockquote><h3 id="2-Hexo"><a href="#2-Hexo" class="headerlink" title="2.Hexo"></a>2.Hexo</h3><ul><li><p>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。</p><blockquote><p>npm install -g hexo-cli</p></blockquote></li><li><p>安装hexo-deployer-git，跟git交互</p><blockquote><p>npm install hexo-deployer-git –save</p></blockquote></li><li><p>创建一个文件夹hexo</p><blockquote><p>mkdir hexo</p></blockquote></li><li><p>进入hexo</p><blockquote><p>cd hexo</p></blockquote></li><li><p>初始化一下hexo</p><blockquote><p>hexo init</p></blockquote></li><li><p>安装依赖</p><blockquote><p>npm install</p></blockquote></li><li><p>配置认证信息</p><blockquote><p>hexo d -fg</p></blockquote></li><li><p>推送远端git</p><blockquote><p>hexo -d</p></blockquote></li><li><p>开始部署博客并推到远端git 组合指令</p><blockquote><p>hexo g -d</p></blockquote></li><li><p>启动服务</p><blockquote><p>hexo serve</p></blockquote></li><li><p>部署生成页面</p><blockquote><p>hexo g</p></blockquote></li><li><p>清除已生成的页面</p><blockquote><p>hexo clean</p></blockquote></li><li><p>文件夹出现的名称</p></li></ul><table><thead><tr><th align="left">文件名称</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">node_modules</td><td align="left">依赖包</td></tr><tr><td align="left">public</td><td align="left">存放生成的页面</td></tr><tr><td align="left">scaffolds</td><td align="left">生成文章的一些模板</td></tr><tr><td align="left">source</td><td align="left">用来存放你的文章</td></tr><tr><td align="left">themes</td><td align="left">主题</td></tr><tr><td align="left">_config.yml</td><td align="left">博客的配置文件</td></tr></tbody></table><h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><ul><li>模板使用：<a href="https://gitee.com/mirrors_blinkfox/hexo-theme-matery.git">https://gitee.com/mirrors_blinkfox/hexo-theme-matery.git</a> </li><li>安装到themes目录下<blockquote><p>cd themes<br>git clone <a href="https://gitee.com/mirrors_blinkfox/hexo-theme-matery.git">https://gitee.com/mirrors_blinkfox/hexo-theme-matery.git</a></p></blockquote></li><li>修改 Hexo 根目录下的 _config.yml 的 theme 的值：theme: hexo-theme-matery</li></ul><p>安装完后即可用<code><strong>hexo s</strong></code>在本地启动，然后访问<code><strong>localhost:4000</strong></code>查看你的博客了</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
