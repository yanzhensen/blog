<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Linux超详细安装redis7.0.5教程</title>
      <link href="/blog/2022/12/02/middle-redis-install/"/>
      <url>/blog/2022/12/02/middle-redis-install/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux超详细安装redis7-0-5教程"><a href="#Linux超详细安装redis7-0-5教程" class="headerlink" title="Linux超详细安装redis7.0.5教程"></a>Linux超详细安装redis7.0.5教程</h1><h3 id="1-去官网下载安装包"><a href="#1-去官网下载安装包" class="headerlink" title="1. 去官网下载安装包"></a>1. 去官网下载安装包</h3><p>下载地址：<a href="https://redis.io/download/">https://redis.io/download/</a></p><p>此处选择的是：redis-7.0.5.tar.gz</p><h3 id="2-上传到服务器并解压压缩包"><a href="#2-上传到服务器并解压压缩包" class="headerlink" title="2. 上传到服务器并解压压缩包"></a>2. 上传到服务器并解压压缩包</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token builtin class-name">cd</span> /usr/local<span class="token function">tar</span> -zxvf  redis-7.0.5.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-进入redis目录并编译安装"><a href="#3-进入redis目录并编译安装" class="headerlink" title="3. 进入redis目录并编译安装"></a>3. 进入redis目录并编译安装</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@oracle local<span class="token punctuation">]</span>cd /usr/local/redis-7.0.5<span class="token punctuation">[</span>root@oracle redis-7.0.5<span class="token punctuation">]</span>make <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>make install</strong>(可不执行) </p><p>会将 src下的 指令redis-benchmark  redis-check-aof  redis-check-rdb  redis-cli        redis-sentinel   redis-server <strong>指令脚本</strong> 存留在 <strong>/usr/local/bin</strong>下  这样可直接 <strong>全局使用指令</strong></p><h3 id="4-拷贝redis-conf至-etc-redis-conf"><a href="#4-拷贝redis-conf至-etc-redis-conf" class="headerlink" title="4. 拷贝redis.conf至/etc/redis.conf"></a>4. 拷贝redis.conf至/etc/redis.conf</h3><blockquote><p>cp redis.conf /etc/redis.conf</p></blockquote><h3 id="5-设置redis-conf"><a href="#5-设置redis-conf" class="headerlink" title="5. 设置redis.conf"></a>5. 设置redis.conf</h3><blockquote><p>vim /etc/redis.conf</p></blockquote><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">daemonize yes     #配置redis为后台启动bind 0.0.0.0      #配置可以对外访问redis-serverrequirepass ???   #配置连接密码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="6-启动redis"><a href="#6-启动redis" class="headerlink" title="6. 启动redis"></a>6. 启动redis</h3><blockquote><p>./usr/local/bin/redis-server /etc/redis.conf</p></blockquote><h3 id="7-测试链接"><a href="#7-测试链接" class="headerlink" title="7. 测试链接"></a>7. 测试链接</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@oracle /<span class="token punctuation">]</span><span class="token comment"># redis-cli -h 192.168.17.63 -p 6379</span><span class="token number">192.168</span>.17.63:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> keys *<span class="token punctuation">(</span>error<span class="token punctuation">)</span> NOAUTH Authentication required.<span class="token number">192.168</span>.17.63:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> auth 配置连接密码OK<span class="token number">192.168</span>.17.63:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> keys *<span class="token punctuation">(</span>empty array<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-设置服务自启"><a href="#8-设置服务自启" class="headerlink" title="8. 设置服务自启"></a>8. 设置服务自启</h3><blockquote><p>vim /etc/rc.local</p></blockquote><p>在下方加入启动命令</p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">#redis自启&#x2F;usr&#x2F;local&#x2F;bin&#x2F;redis-server &#x2F;etc&#x2F;redis.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="9-卸载redis"><a href="#9-卸载redis" class="headerlink" title="9. 卸载redis"></a>9. 卸载redis</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment">#删除安装目录</span><span class="token function">rm</span> -rf /usr/local/redis-7.0.5<span class="token comment">#删除所有redis相关命令脚本</span><span class="token function">rm</span> -rf /usr/bin/redis-*<span class="token comment">#删除/etc/redis.conf</span><span class="token function">rm</span> -f /etc/redis.conf<span class="token comment">#移除/etc/rc.local自启 参考第8点</span><span class="token function">vim</span> /etc/rc.local<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Middle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux安装jdk1.8(超详细)</title>
      <link href="/blog/2022/12/02/java-jdk8-install/"/>
      <url>/blog/2022/12/02/java-jdk8-install/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux安装jdk1-8-超详细"><a href="#Linux安装jdk1-8-超详细" class="headerlink" title="Linux安装jdk1.8(超详细)"></a>Linux安装jdk1.8(超详细)</h1><h3 id="1-下载jdk-tar-gz格式压缩包，放入linux的目录"><a href="#1-下载jdk-tar-gz格式压缩包，放入linux的目录" class="headerlink" title="1. 下载jdk tar.gz格式压缩包，放入linux的目录"></a>1. 下载jdk tar.gz格式压缩包，放入linux的目录</h3><p>下载地址：<a href="https://www.oracle.com/java/technologies/downloads/#java8">https://www.oracle.com/java/technologies/downloads/#java8</a></p><p>找到1.8版本的jdk   <strong>jdk-8u271-linux-x64.tar.gz</strong></p><h3 id="2-上传到服务器并解压压缩包"><a href="#2-上传到服务器并解压压缩包" class="headerlink" title="2. 上传到服务器并解压压缩包"></a>2. 上传到服务器并解压压缩包</h3><blockquote><p>tar -zxvf  jdk-8u271-linux-x64.tar.gz</p></blockquote><h3 id="3-移动压缩包至-usr-local下"><a href="#3-移动压缩包至-usr-local下" class="headerlink" title="3. 移动压缩包至/usr/local下"></a>3. 移动压缩包至/usr/local下</h3><blockquote><p>mv jdk1.8.0_271/ /usr/local/jdk1.8</p></blockquote><h3 id="4-修改-etc-profile全局配置"><a href="#4-修改-etc-profile全局配置" class="headerlink" title="4. 修改/etc/profile全局配置"></a>4. 修改/etc/profile全局配置</h3><p>/etc/profile是一个<strong>全局配置文件</strong>， 所有用户登录都会使用该文件构建用户环境 。与windows配置环境变量是一个道理。</p><blockquote><p>vim /etc/profile</p></blockquote><p>在最下方加入这三行配置环境变量</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token builtin class-name">export</span> <span class="token assign-left variable">JAVA_HOME</span><span class="token operator">=</span>/usr/local/jdk1.8<span class="token builtin class-name">export</span> <span class="token assign-left variable">CLASSPATH</span><span class="token operator">=</span>$:CLASSPATH:<span class="token variable">$JAVA_HOME</span>/lib/<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span><span class="token builtin class-name">:</span><span class="token variable">$JAVA_HOME</span>/bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="5-刷新配置文件"><a href="#5-刷新配置文件" class="headerlink" title="5. 刷新配置文件"></a>5. 刷新配置文件</h3><blockquote><p>source /etc/profile</p></blockquote><h3 id="6-验证jdk1-8是否安装成功"><a href="#6-验证jdk1-8是否安装成功" class="headerlink" title="6. 验证jdk1.8是否安装成功"></a>6. 验证jdk1.8是否安装成功</h3><blockquote><p>java -version</p></blockquote><p>出现如图所示版本号字样，则说明安装成功。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@oracle jdk1.8<span class="token punctuation">]</span><span class="token comment"># java -version</span>java version <span class="token string">"1.8.0_271"</span>Java<span class="token punctuation">(</span>TM<span class="token punctuation">)</span> SE Runtime Environment <span class="token punctuation">(</span>build <span class="token number">1.8</span>.0_271-b09<span class="token punctuation">)</span>Java HotSpot<span class="token punctuation">(</span>TM<span class="token punctuation">)</span> <span class="token number">64</span>-Bit Server VM <span class="token punctuation">(</span>build <span class="token number">25.271</span>-b09, mixed mode<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-卸载jdk8"><a href="#7-卸载jdk8" class="headerlink" title="7. 卸载jdk8"></a>7. 卸载jdk8</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment">#移除环境变量 参考第4条</span><span class="token function">vim</span> /etc/profile<span class="token comment">#删除安装目录</span><span class="token function">rm</span> -rf /usr/local/jdk1.8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分库分表-最佳实践 ShardingDB</title>
      <link href="/blog/2022/09/27/db-sharding-practice/"/>
      <url>/blog/2022/09/27/db-sharding-practice/</url>
      
        <content type="html"><![CDATA[<h1 id="分库分表-最佳实践-ShardingDB"><a href="#分库分表-最佳实践-ShardingDB" class="headerlink" title="分库分表-最佳实践 ShardingDB"></a>分库分表-最佳实践 ShardingDB</h1><p><img src="db-sharding-practice-1.png"></p><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>前不久发过两篇关于分表的文章：</p><ul><li><a href="https://crossoverjie.top/2019/04/16/framework-design/sharding-db/">一次分表踩坑实践的探讨</a></li><li><a href="https://crossoverjie.top/2019/06/13/framework-design/sharding-db-02/">分表后需要注意的二三事</a></li></ul><p>从标题可以看得出来，当时我们只做了分表；还是由于业务发展，截止到现在也做了分库，目前看来都还比较顺利，所以借着脑子还记得清楚来一次复盘。</p><p>先来回顾下整个分库分表的流程如下：</p><p><img src="db-sharding-practice-2.png"></p><p>整个过程也很好理解，基本符合大部分公司的一个发展方向。</p><p>很少会有业务一开始就会设计为分库分表，虽说这样会减少后续的坑，但部分公司刚开始都是以业务为主。</p><p>直到业务发展到单表无法支撑时，自然而然会考虑分表甚至分库的事情。</p><p>于是本篇会作一次总结，之前提过的内容可能会再重复一次。</p><h1 id="分表"><a href="#分表" class="headerlink" title="分表"></a>分表</h1><p>首先讨论下什么样的情况下适合分表？</p><p>根据我的经验来看，当某张表的数据量已经达到千万甚至上亿，同时日增数据量在 2% 以上。</p><p>当然这些数字并不是绝对的，最重要的还是对这张表的写入和查询都已经影响到正常业务执行，比如查询速度明显下降，数据库整体 IO 居高不下等。</p><p>而谈到分表时我们着重讨论的还是水平分表；</p><p><img src="db-sharding-practice-3.png"></p><p>也就是将一张大表数据通过某种路由算法将数据尽可能的均匀分配到 N 张小表中。</p><h2 id="Range"><a href="#Range" class="headerlink" title="Range"></a>Range</h2><p>而分表策略也有好几种，分别适用不同的场景。</p><p>首先第一种是按照范围划分，比如我们可以将某张表的创建时间按照日期划分存为月表；也可以将某张表的主键按照范围划分，比如<br>【1<del>10000】在一张表，【10001</del>20000】在一张表，以此类推。</p><p><img src="db-sharding-practice-4.png"></p><p>这样的分表适合需要对数据做归档处理，比如系统默认只提供近三个月历史数据的查询功能，这样也方便操作；只需要把三月之前的数据单独移走备份保存即可）。</p><p>这个方案有好处也有弊端：</p><ul><li>好处是自带水平扩展，不需要过多干预。</li><li>缺点是可能会出现数据不均匀的情况（比如某个月请求暴增）。</li></ul><h2 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h2><p>按照日期这样的范围分表固然简单，但适用范围还是比较窄；毕竟我们大部分的数据查询都不想带上时间。</p><p>比如某个用户想查询他产生的所有订单信息，这是很常见的需求。</p><p>于是我们分表的维度就得改改，分表算法可以采用主流的 <code>hash+mod</code> 的组合。</p><p>这是一个经典的算法，大名鼎鼎的 <code>HashMap</code> 也是这样来存储数据。</p><p>假设我们这里将原有的一张大表订单信息分为 64 张分表：</p><p><img src="db-sharding-practice-5.png"></p><p>这里的 <code>hash</code> 便是将我们需要分表的字段进行一次散列运算，使得经过散列的数据尽可能的均匀并且不重复。</p><p>当然如果本身这个字段就是一个整形并且不重复也可以省略这个步骤，直接进行 <code>Mod</code> 得到分表下标即可。</p><h3 id="分表数量选择"><a href="#分表数量选择" class="headerlink" title="分表数量选择"></a>分表数量选择</h3><p>至于这里的分表数量（64）也是有讲究的，具体设为多少这个没有标准值，需要根据自身业务发展，数据增量进行预估。</p><p>根据我个人的经验来看，至少需要保证分好之后的小表在业务发展的几年之内都不会出现单表数据量过大（比如达到千万级）。</p><p>我更倾向于在数据库可接受的范围内尽可能的增大这个分表数，毕竟如果后续小表也达到瓶颈需要再进行一次分表扩容，那是非常痛苦的。</p><blockquote><p>目前笔者还没经历这一步，所以本文没有相关介绍。</p></blockquote><p>但是这个数量又不是瞎选的，和 <code>HashMap</code> 一样，也建议得是 <code>2^n</code>，这样可以方便在扩容的时尽可能的少迁移数据。</p><h2 id="Range-Hash"><a href="#Range-Hash" class="headerlink" title="Range + Hash"></a>Range + Hash</h2><p>当然还有一种思路，<code>Range</code> 和 <code>Hash</code> 是否可以混用。</p><p>比如我们一开始采用的是 Hash 分表，但是数据增长巨大，导致每张分表数据很快达到瓶颈，这样就不得不再做扩容，比如由 64 张表扩容到 256 张。</p><p>但扩容时想要做到不停机迁移数据非常困难，即便是停机，那停多久呢？也不好说。</p><p>所以我们是否可以在 <code>Mod</code> 分表的基础上再分为月表，借助于 <code>Range</code> 自身的扩展性就不用考虑后续数据迁移的事情了。</p><p><img src="db-sharding-practice-6.png"></p><p>这种方式理论可行，但我没有实际用过，给大家的思路做个参考吧。</p><h2 id="烦人的数据迁移"><a href="#烦人的数据迁移" class="headerlink" title="烦人的数据迁移"></a>烦人的数据迁移</h2><p>分表规则弄好后其实只是完成了分表的第一步，真正麻烦的是数据迁移，或者说是如何做到对业务影响最小的数据迁移。</p><p>除非是一开始就做了分表，所以数据迁移这一步骤肯定是跑不掉的。</p><p>下面整理下目前我们的做法供大家参考：</p><ol><li>一旦分表上线后所有的数据写入、查询都是针对于分表的，所以原有大表内的数据必须得迁移到分表里，不然对业务的影响极大。</li><li>我们估算了对一张 2 亿左右的表进行迁移，自己写的迁移程序，大概需要花 4~5 天的时间才能完成迁移。</li><li>意味着这段时间内，以前的数据对用户是不可见的，显然这样业务不能接受。</li><li>于是我们做了一个兼容处理：分表改造上线后，所有新产生的数据写入分表，但对历史数据的操作还走老表，这样就少了数据迁移这一步骤。</li><li>只是需要在操作数据之前做一次路由判断，当新数据产生的足够多时（我们是两个月时间），几乎所有的操作都是针对于分表，再从库启动数据迁移，数据迁移完毕后将原有的路由判断去掉。</li><li>最后所有的数据都从分表产生和写入。</li></ol><p>至此整个分表操作完成。</p><p><img src="db-sharding-practice-7.png"></p><p><img src="db-sharding-practice-8.png"></p><h2 id="业务兼容"><a href="#业务兼容" class="headerlink" title="业务兼容"></a>业务兼容</h2><p>同时分表之后还需要兼容其他业务；比如原有的报表业务、分页查询等，现在来看看我们是如何处理的。</p><h3 id="报表"><a href="#报表" class="headerlink" title="报表"></a>报表</h3><p>首先是报表，没分表之前之间查询一张表就搞定了，现在不同，由一张表变为 N 张表。</p><p>所以原有的查询要改为遍历所有的分表，考虑到性能可以利用多线程并发查询分表数据然后汇总。</p><p>不过只依靠 <code>Java</code> 来对这么大量的数据做统计分析还是不现实，刚开始可以应付过去，后续还得用上大数据平台来处理。</p><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><p>再一个是查询，原有的分页查询肯定是不能用了，毕竟对上亿的数据分页其实没什么意义。</p><p>只能提供通过分表字段的查询，比如是按照订单 ID 分表，那查询条件就得带上这个字段，不然就会涉及到遍历所有表。</p><p>这也是所有分表之后都会遇到的一个问题，除非不用 <code>MySQL</code> 这类关系型数据库。</p><h1 id="分库"><a href="#分库" class="headerlink" title="分库"></a>分库</h1><p>分表完成后可以解决单表的压力，但数据库本身的压力却没有下降。</p><p>我们在完成分表之后的一个月内又由于数据库里”其他表”的写入导致整个数据库 IO 增加，而且这些”其他表”还和业务关系不大。</p><p>也就是说一些可有可无的数据导致了整体业务受影响，这是非常不划算的事情。</p><p>于是我们便把这几张表单独移到一个新的数据库中，完全和现有的业务隔离开来。</p><p>这样就会涉及到几个改造：</p><ol><li>应用自身对这些数据的查询、写入都要改为调用一个独立的 <code>Dubbo</code> 服务，由这个服务对迁移的表进行操作。</li><li>暂时不做数据迁移，所以查询时也得按照分表那样做一个兼容，如果查询老数据就要在当前库查询，新数据就要调用 <code>Dubbo</code> 接口进行查询。</li><li>对这些表的一些关联查询也得改造为查询 <code>Dubbo</code> 接口，在内存中进行拼接即可。</li><li>如果数据量确实很大，也可将同步的 <code>Dubbo</code> 接口换为写入消息队列来提高吞吐量。</li></ol><p>目前我们将这类数据量巨大但对业务不太影响的表单独迁到一个库后，数据库的整体 <code>IO</code> 下降明显，业务也恢复正常。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>最后我们还需要做一步历史数据归档的操作，将 N 个月之前的数据要定期迁移到 <code>HBASE</code> 之类存储，保证 <code>MySQL</code><br>中的数据一直保持在一个可接受的范围。</p><p>而归档数据的查询便依赖于大数据提供服务。</p><p>本次分库分表是一次非常难得的实践操作，网上大部分的资料都是在汽车出厂前就换好了轮胎。</p><p>而我们大部分碰到的场景都是要对高速路上跑着的车子换胎，一不小心就”车毁人亡”。</p><p>来源：<a href="https://crossoverjie.top/2019/07/24/framework-design/sharding-db-03/">https://crossoverjie.top/2019/07/24/framework-design/sharding-db-03/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> DB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分库分表-基本思路ShardingDB</title>
      <link href="/blog/2022/09/27/db-sharding/"/>
      <url>/blog/2022/09/27/db-sharding/</url>
      
        <content type="html"><![CDATA[<h1 id="分库分表-基本思路ShardingDB"><a href="#分库分表-基本思路ShardingDB" class="headerlink" title="分库分表-基本思路ShardingDB"></a>分库分表-基本思路ShardingDB</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Sharding的基本思想就要把一个数据库切分成多个部分放到不同的数据库(server)上，从而缓解单一数据库的性能问题。不太严格的讲，对于海量数据的数据库，如果是因为表多而数据多，这时候适合使用垂直切分，即把关系紧密（比如同一模块）的表切分出来放在一个server上。如果表并不多，但每张表的数据非常多，这时候适合水平切分，即把表的数据按某种规则（比如按ID散列）切分到多个数据库(server)上。当然，现实中更多是这两种情况混杂在一起，这时候需要根据实际情况做出选择，也可能会综合使用垂直与水平切分，从而将原有数据库切分成类似矩阵一样可以无限扩充的数据库(server)阵列。</p><p>需要特别说明的是：当同时进行垂直和水平切分时，切分策略会发生一些微妙的变化。比如：在只考虑垂直切分的时候，被划分到一起的表之间可以保持任意的关联关系，因此你可以按“功能模块”划分表格，但是一旦引入水平切分之后，表间关联关系就会受到很大的制约，通常只能允许一个主表（以该表ID进行散列的表）和其多个次表之间保留关联关系，也就是说：当同时进行垂直和水平切分时，在垂直方向上的切分将不再以“功能模块”进行划分，而是需要更加细粒度的垂直切分，而这个粒度与领域驱动设计中的“聚合”概念不谋而合，甚至可以说是完全一致，每个shard的主表正是一个聚合中的聚合根！这样切分下来你会发现数据库分被切分地过于分散了（shard的数量会比较多，但是shard里的表却不多），为了避免管理过多的数据源，充分利用每一个数据库服务器的资源，可以考虑将业务上相近，并且具有相近数据增长速率（主表数据量在同一数量级上）的两个或多个shard放到同一个数据源里，每个shard依然是独立的，它们有各自的主表，并使用各自主表ID进行散列，不同的只是它们的散列取模（即节点数量）必需是一致的.</p><h2 id="常用的分库分表中间件"><a href="#常用的分库分表中间件" class="headerlink" title="常用的分库分表中间件"></a>常用的分库分表中间件</h2><h4 id="简单易用的组件："><a href="#简单易用的组件：" class="headerlink" title="简单易用的组件："></a>简单易用的组件：</h4><ul><li><a href="https://github.com/dangdangdotcom/sharding-jdbc">当当sharding-jdbc</a></li><li><a href="https://github.com/baihui212/tsharding">蘑菇街TSharding</a></li></ul><h4 id="强悍重量级的中间件："><a href="#强悍重量级的中间件：" class="headerlink" title="强悍重量级的中间件："></a>强悍重量级的中间件：</h4><ul><li>sharding</li><li>TDDL Smart Client的方式（淘宝）</li><li>Atlas(Qihoo 360)</li><li>alibaba.cobar(是阿里巴巴（B2B）部门开发)</li><li>MyCAT（基于阿里开源的Cobar产品而研发）</li><li>Oceanus(58同城数据库中间件)</li><li>OneProxy(支付宝首席架构师楼方鑫开发)</li><li>vitess（谷歌开发的数据库中间件）</li></ul><h2 id="分库分表需要解决的问题"><a href="#分库分表需要解决的问题" class="headerlink" title="分库分表需要解决的问题"></a>分库分表需要解决的问题</h2><h4 id="1、事务问题"><a href="#1、事务问题" class="headerlink" title="1、事务问题"></a>1、事务问题</h4><p>解决事务问题目前有两种可行的方案：分布式事务和通过应用程序与数据库共同控制实现事务下面对两套方案进行一个简单的对比。</p><h5 id="方案一：使用分布式事务"><a href="#方案一：使用分布式事务" class="headerlink" title="方案一：使用分布式事务"></a>方案一：使用分布式事务</h5><ul><li>优点：交由数据库管理，简单有效</li><li>缺点：性能代价高，特别是shard越来越多时</li></ul><h5 id="方案二：由应用程序和数据库共同控制"><a href="#方案二：由应用程序和数据库共同控制" class="headerlink" title="方案二：由应用程序和数据库共同控制"></a>方案二：由应用程序和数据库共同控制</h5><ul><li>原理：将一个跨多个数据库的分布式事务分拆成多个仅处 于单个数据库上面的小事务，并通过应用程序来总控 各个小事务。</li><li>优点：性能上有优势</li><li>缺点：需要应用程序在事务控制上做灵活设计。如果使用 了spring的事务管理，改动起来会面临一定的困难。</li></ul><h4 id="2、跨节点Join的问题"><a href="#2、跨节点Join的问题" class="headerlink" title="2、跨节点Join的问题"></a>2、跨节点Join的问题</h4><p>只要是进行切分，跨节点Join的问题是不可避免的。但是良好的设计和切分却可以减少此类情况的发生。解决这一问题的普遍做法是分两次查询实现。在第一次查询的结果集中找出关联数据的id,根据这些id发起第二次请求得到关联数据。</p><h4 id="3、跨节点的count-order-by-group-by以及聚合函数问题"><a href="#3、跨节点的count-order-by-group-by以及聚合函数问题" class="headerlink" title="3、跨节点的count,order by,group by以及聚合函数问题"></a>3、跨节点的count,order by,group by以及聚合函数问题</h4><p>这些是一类问题，因为它们都需要基于全部数据集合进行计算。多数的代理都不会自动处理合并工作。解决方案：与解决跨节点join问题的类似，分别在各个节点上得到结果后在应用程序端进行合并。和join不同的是每个结点的查询可以并行执行，因此很多时候它的速度要比单一大表快很多。但如果结果集很大，对应用程序内存的消耗是一个问题。</p><h4 id="4、数据迁移，容量规划，扩容等问题"><a href="#4、数据迁移，容量规划，扩容等问题" class="headerlink" title="4、数据迁移，容量规划，扩容等问题"></a>4、数据迁移，容量规划，扩容等问题</h4><p>来自淘宝综合业务平台团队，它利用对2的倍数取余具有向前兼容的特性（如对4取余得1的数对2取余也是1）来分配数据，避免了行级别的数据迁移，但是依然需要进行表级别的迁移，同时对扩容规模和分表数量都有限制。总得来说，这些方案都不是十分的理想，多多少少都存在一些缺点，这也从一个侧面反映出了Sharding扩容的难度。</p><h4 id="5、事务"><a href="#5、事务" class="headerlink" title="5、事务"></a>5、事务</h4><h5 id="分布式事务"><a href="#分布式事务" class="headerlink" title="分布式事务"></a>分布式事务</h5><p>参考： <a href="http://blog.csdn.net/bluishglc/article/details/7612811">关于分布式事务、两阶段提交、一阶段提交、Best Efforts 1PC模式和事务补偿机制的研究</a></p><h6 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h6><ul><li>基于两阶段提交，最大限度地保证了跨数据库操作的“原子性”，是分布式系统下最严格的事务实现方式。</li><li>实现简单，工作量小。由于多数应用服务器以及一些独立的分布式事务协调器做了大量的封装工作，使得项目中引入分布式事务的难度和工作量基本上可以忽略不计。</li></ul><h6 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h6><ul><li>系统“水平”伸缩的死敌。基于两阶段提交的分布式事务在提交事务时需要在多个节点之间进行协调,最大限度地推后了提交事务的时间点，客观上延长了事务的执行时间，这会导致事务在访问共享资源时发生冲突和死锁的概率增高，随着数据库节点的增多，这种趋势会越来越严重，从而成为系统在数据库层面上水平伸缩的”枷锁”， 这是很多Sharding系统不采用分布式事务的主要原因。</li></ul><h5 id="基于Best-Efforts-1PC模式的事务"><a href="#基于Best-Efforts-1PC模式的事务" class="headerlink" title="基于Best Efforts 1PC模式的事务"></a>基于Best Efforts 1PC模式的事务</h5><p>参考spring-data-neo4j的实现。鉴于Best Efforts 1PC模式的性能优势，以及相对简单的实现方式，它被大多数的sharding框架和项目采用。</p><h5 id="事务补偿（幂等值）"><a href="#事务补偿（幂等值）" class="headerlink" title="事务补偿（幂等值）"></a>事务补偿（幂等值）</h5><p>对于那些对性能要求很高，但对一致性要求并不高的系统，往往并不苛求系统的实时一致性，只要在一个允许的时间周期内达到最终一致性即可，这使得事务补偿机制成为一种可行的方案。事务补偿机制最初被提出是在“长事务”的处理中，但是对于分布式系统确保一致性也有很好的参考意义。笼统地讲，与事务在执行中发生错误后立即回滚的方式不同，事务补偿是一种事后检查并补救的措施，它只期望在一个容许时间周期内得到最终一致的结果就可以了。事务补偿的实现与系统业务紧密相关，并没有一种标准的处理方式。一些常见的实现方式有：对数据进行对帐检查;基于日志进行比对;定期同标准数据来源进行同步，等等。</p><h2 id="6、ID问题"><a href="#6、ID问题" class="headerlink" title="6、ID问题"></a>6、ID问题</h2><p>一旦数据库被切分到多个物理结点上，我们将不能再依赖数据库自身的主键生成机制。一方面，某个分区数据库自生成的ID无法保证在全局上是唯一的；另一方面，应用程序在插入数据之前需要先获得ID,以便进行SQL路由。</p><p>一些常见的主键生成策略：</p><h4 id="UUID"><a href="#UUID" class="headerlink" title="UUID"></a>UUID</h4><p>使用UUID作主键是最简单的方案，但是缺点也是非常明显的。由于UUID非常的长，除占用大量存储空间外，最主要的问题是在索引上，在建立索引和基于索引进行查询时都存在性能问题。</p><h4 id="结合数据库维护一个Sequence表"><a href="#结合数据库维护一个Sequence表" class="headerlink" title="结合数据库维护一个Sequence表"></a>结合数据库维护一个Sequence表</h4><p>此方案的思路也很简单，在数据库中建立一个Sequence表，表的结构类似于：</p><pre class="line-numbers language-none"><code class="language-none">CREATE TABLE &#96;SEQUENCE&#96; (      &#96;table_name&#96; varchar(18) NOT NULL,      &#96;nextid&#96; bigint(20) NOT NULL,      PRIMARY KEY (&#96;table_name&#96;)  ) ENGINE&#x3D;InnoDB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>每当需要为某个表的新纪录生成ID时就从Sequence表中取出对应表的nextid,并将nextid的值加1后更新到数据库中以备下次使用。此方案也较简单，但缺点同样明显：由于所有插入任何都需要访问该表，该表很容易成为系统性能瓶颈，同时它也存在单点问题，一旦该表数据库失效，整个应用程序将无法工作。有人提出使用Master-Slave进行主从同步，但这也只能解决单点问题，并不能解决读写比为1:1的访问压力问题。</p><h4 id="Twitter的分布式自增ID算法Snowflake"><a href="#Twitter的分布式自增ID算法Snowflake" class="headerlink" title="Twitter的分布式自增ID算法Snowflake"></a>Twitter的分布式自增ID算法Snowflake</h4><p>在分布式系统中，需要生成全局UID的场合还是比较多的，twitter的snowflake解决了这种需求，实现也还是很简单的，除去配置信息，核心代码就是毫秒级时间41位 机器ID 10位 毫秒内序列12位。</p><pre class="line-numbers language-none"><code class="language-none">* 10---0000000000 0000000000 0000000000 0000000000 0 --- 00000 ---00000 ---000000000000<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在上面的字符串中，第一位为未使用（实际上也可作为long的符号位），接下来的41位为毫秒级时间，然后5位datacenter标识位，5位机器ID（并不算标识符，实际是为线程标识），然后12位该毫秒内的当前毫秒内的计数，加起来刚好64位，为一个Long型。</p><p>这样的好处是，整体上按照时间自增排序，并且整个分布式系统内不会产生ID碰撞（由datacenter和机器ID作区分），并且效率较高，经测试，snowflake每秒能够产生26万ID左右，完全满足需要。</p><h2 id="7、跨分片的排序分页"><a href="#7、跨分片的排序分页" class="headerlink" title="7、跨分片的排序分页"></a>7、跨分片的排序分页</h2><p>一般来讲，分页时需要按照指定字段进行排序。当排序字段就是分片字段的时候，我们通过分片规则可以比较容易定位到指定的分片，而当排序字段非分片字段的时候，情况就会变得比较复杂了。为了最终结果的准确性，我们需要在不同的分片节点中将数据进行排序并返回，并将不同分片返回的结果集进行汇总和再次排序，最后再返回给用户。如下图所示：</p><p><img src="db-sharding-1.png"></p><p>上面图中所描述的只是最简单的一种情况（取第一页数据），看起来对性能的影响并不大。但是，如果想取出第10页数据，情况又将变得复杂很多，如下图所示：<br><img src="db-sharding-2.png"></p><p>有些读者可能并不太理解，为什么不能像获取第一页数据那样简单处理（排序取出前10条再合并、排序）。其实并不难理解，因为各分片节点中的数据可能是随机的，为了排序的准确性，必须把所有分片节点的前N页数据都排序好后做合并，最后再进行整体的排序。很显然，这样的操作是比较消耗资源的，用户越往后翻页，系统性能将会越差。<br>那如何解决分库情况下的分页问题呢？有以下几种办法：</p><p>如果是在前台应用提供分页，则限定用户只能看前面n页，这个限制在业务上也是合理的，一般看后面的分页意义不大（如果一定要看，可以要求用户缩小范围重新查询）。</p><p>如果是后台批处理任务要求分批获取数据，则可以加大page size，比如每次获取5000条记录，有效减少分页数（当然离线访问一般走备库，避免冲击主库）。</p><p>分库设计时，一般还有配套大数据平台汇总所有分库的记录，有些分页查询可以考虑走大数据平台。</p><h2 id="8、分库策略"><a href="#8、分库策略" class="headerlink" title="8、分库策略"></a>8、分库策略</h2><p>分库维度确定后，如何把记录分到各个库里呢?</p><p>一般有两种方式：</p><ul><li>根据数值范围，比如用户Id为1-9999的记录分到第一个库，10000-20000的分到第二个库，以此类推。</li><li>根据数值取模，比如用户Id mod n，余数为0的记录放到第一个库，余数为1的放到第二个库，以此类推。</li></ul><p>优劣比较：</p><p>评价指标按照范围分库按照Mod分库</p><p>库数量前期数目比较小，可以随用户/业务按需增长前期即根据mode因子确定库数量，数目一般比较大</p><p>访问性能前期库数量小，全库查询消耗资源少，单库查询性能略差前期库数量大，全库查询消耗资源多，单库查询性能略好</p><p>调整库数量比较容易，一般只需为新用户增加库，老库拆分也只影响单个库困难，改变mod因子导致数据在所有库之间迁移</p><p>数据热点新旧用户购物频率有差异，有数据热点问题新旧用户均匀到分布到各个库，无热点</p><p>实践中，为了处理简单，选择mod分库的比较多。同时二次分库时，为了数据迁移方便，一般是按倍数增加，比如初始4个库，二次分裂为8个，再16个。这样对于某个库的数据，一半数据移到新库，剩余不动，对比每次只增加一个库，所有数据都要大规模变动。</p><p>补充下，mod分库一般每个库记录数比较均匀，但也有些数据库，存在超级Id，这些Id的记录远远超过其他Id，比如在广告场景下，某个大广告主的广告数可能占总体很大比例。如果按照广告主Id取模分库，某些库的记录数会特别多，对于这些超级Id，需要提供单独库来存储记录</p><h2 id="9、分库数量"><a href="#9、分库数量" class="headerlink" title="9、分库数量"></a>9、分库数量</h2><p>分库数量首先和单库能处理的记录数有关，一般来说，Mysql 单库超过5000万条记录，Oracle单库超过1亿条记录，DB压力就很大(当然处理能力和字段数量/访问模式/记录长度有进一步关系)。</p><p>在满足上述前提下，如果分库数量少，达不到分散存储和减轻DB性能压力的目的；如果分库的数量多，好处是每个库记录少，单库访问性能好，但对于跨多个库的访问，应用程序需要访问多个库，如果是并发模式，要消耗宝贵的线程资源；如果是串行模式，执行时间会急剧增加。</p><p>最后分库数量还直接影响硬件的投入，一般每个分库跑在单独物理机上，多一个库意味多一台设备。所以具体分多少个库，要综合评估，一般初次分库建议分4-8个库。</p><h2 id="10、路由透明"><a href="#10、路由透明" class="headerlink" title="10、路由透明"></a>10、路由透明</h2><p>分库从某种意义上来说，意味着DB schema改变了，必然影响应用，但这种改变和业务无关，所以要尽量保证分库对应用代码透明，分库逻辑尽量在数据访问层处理。当然完全做到这一点很困难，具体哪些应该由DAL负责，哪些由应用负责，这里有一些建议：</p><p>对于单库访问，比如查询条件指定用户Id，则该SQL只需访问特定库。此时应该由DAL层自动路由到特定库，当库二次分裂时，也只要修改mod 因子，应用代码不受影响。</p><p>对于简单的多库查询，DAL负责汇总各个数据库返回的记录，此时仍对上层应用透明。</p><h2 id="11、使用框架还是自主研发"><a href="#11、使用框架还是自主研发" class="headerlink" title="11、使用框架还是自主研发"></a>11、使用框架还是自主研发</h2><p>目前市面上的分库分表中间件相对较多，其中基于代理方式的有MySQL Proxy和Amoeba，基于Hibernate框架的是Hibernate Shards，基于jdbc的有当当sharding-jdbc，基于mybatis的类似maven插件式的有蘑菇街的蘑菇街TSharding，通过重写spring的ibatis template类是Cobar Client，这些框架各有各的优势与短板，架构师可以在深入调研之后结合项目的实际情况进行选择，但是总的来说，我个人对于框架的选择是持谨慎态度的。一方面多数框架缺乏成功案例的验证，其成熟性与稳定性值得怀疑。另一方面，一些从成功商业产品开源出框架（如阿里和淘宝的一些开源项目）是否适合你的项目是需要架构师深入调研分析的。当然，最终的选择一定是基于项目特点、团队状况、技术门槛和学习成本等综合因素考量确定的。</p><p>来源：<a href="http://www.jianshu.com/p/32b3e91aa22c">http://www.jianshu.com/p/32b3e91aa22c</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> DB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java设计模式-模板方法模式</title>
      <link href="/blog/2022/09/27/design-templateMethod/"/>
      <url>/blog/2022/09/27/design-templateMethod/</url>
      
        <content type="html"><![CDATA[<h1 id="Java设计模式-模板方法模式"><a href="#Java设计模式-模板方法模式" class="headerlink" title="Java设计模式-模板方法模式"></a>Java设计模式-模板方法模式</h1><h2 id="什么是模板方法模式"><a href="#什么是模板方法模式" class="headerlink" title="什么是模板方法模式"></a>什么是模板方法模式</h2><p>​    模板方法模式：定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。</p><p>​    模板方法模式主要是通过制定模板，把算法步骤固定下来，至于谁来实现，模板可以自己提供实现，也可以由子类去实现，还可以通过回调机制让其他类来实现。</p><p>​    通过固定算法骨架来约束子类的行为，并在特定的扩展点来让子类进行功能扩展，从而让程序既有很好的复用性，又有较好的扩展性。</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>【代码复用】模板方法模式是一种实现代码复用的很好的手段。通过把子类的公共功能提炼和抽取，把公共部分放到模板中去实现。</li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li>【算法骨架不容易升级】模板方法模式最基本的功能就是通过模板的制定，把算法骨架完全固定下来。事实上模板和子类是非常耦合的，如果要对模板中的算法骨架进行变更，可能就会要求所有相关的子类进行相应的变化。所以抽取算法骨架的时候要特别小心，尽量确保是不会变化的部分才放到模板中。</li></ul><h3 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h3><p><img src="templateMethod-1.png"></p><ul><li>AbstractClass：抽象类。用来定义算法骨架和原语操作，具体的子类通过重定义这些原语操作来实现一个算法的各个步骤。在这个类里面，还可以提供算法中通用的实现。</li><li>ConcreteClass：具体实现类用来实现算法骨架中的某些步骤，完成与特定子类相关的功能。</li></ul><h2 id="何时使用"><a href="#何时使用" class="headerlink" title="何时使用"></a>何时使用</h2><p>建议在如下情况时选用模板方法模式</p><ul><li><p>需要固定定义算法骨架，实现一个算法的不变的部分，并把可变的行为留给子类来实现的情况。</p></li><li><p>各个子类中具有公共行为，应该抽取出来，集中在一个公共类中去实现，从而避免代码重复。</p></li><li><p>需要控制子类扩展的情况。模板方法模式会在特定的点来调用子类的方法，这样只允许在这些点进行扩展。</p></li></ul><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><p>以下以<strong>模板方法式回调</strong>作为示例</p><h3 id="登录信息"><a href="#登录信息" class="headerlink" title="登录信息"></a>登录信息</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span></span><span class="token punctuation">;</span><span class="token comment">/** * @Author: Sam * @Date: 2022-09-23 15:42 * @Description: 封装登录信息 */</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginModel</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 登录人员编号     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> loginId<span class="token punctuation">;</span>    <span class="token comment">/**     * 登录密码     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> pwd<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="登录控制的模板方法需要的回调接口"><a href="#登录控制的模板方法需要的回调接口" class="headerlink" title="登录控制的模板方法需要的回调接口"></a>登录控制的模板方法需要的回调接口</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Author: Sam * @Date: 2022-09-22 17:14 * @Description: 登录控制的模板方法需要的回调接口 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">LoginCallBack</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 根据登录编号来查找和获取存储相应的数据     *     * @param loginId 登录编号     * @return 登录编号相对应的数据     */</span>    <span class="token class-name">LoginModel</span> <span class="token function">findLoginUser</span><span class="token punctuation">(</span><span class="token class-name">String</span> loginId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 对密码数据进行加密     *     * @param pwd      密码     * @param template LoginTemplate对象     * @return 加密后的密码数据     */</span>    <span class="token class-name">String</span> <span class="token function">encryptPwd</span><span class="token punctuation">(</span><span class="token class-name">String</span> pwd<span class="token punctuation">,</span> <span class="token class-name">LoginTemplate</span> template<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 判断用户填写的登录数据和db的是否一致     *     * @param lm       用户登录数据     * @param dbLm     数据库用户数据     * @param template LoginTemplate对象     * @return 匹配是否成功，true/false     */</span>    <span class="token keyword">boolean</span> <span class="token function">match</span><span class="token punctuation">(</span><span class="token class-name">LoginModel</span> lm<span class="token punctuation">,</span> <span class="token class-name">LoginModel</span> dbLm<span class="token punctuation">,</span> <span class="token class-name">LoginTemplate</span> template<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="登录控制的模板"><a href="#登录控制的模板" class="headerlink" title="登录控制的模板"></a>登录控制的模板</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Author: Sam * @Date: 2022-09-23 15:44 * @Description: 登录控制的模板 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginTemplate</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token class-name">LoginModel</span> lm<span class="token punctuation">,</span> <span class="token class-name">LoginCallBack</span> callBack<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//1.根据登录人员的编号获取相对应的数据</span>        <span class="token class-name">LoginModel</span> dbLm <span class="token operator">=</span> callBack<span class="token punctuation">.</span><span class="token function">findLoginUser</span><span class="token punctuation">(</span>lm<span class="token punctuation">.</span><span class="token function">getLoginId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>dbLm <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//2.对密码加密</span>            <span class="token class-name">String</span> encryptPwd <span class="token operator">=</span> callBack<span class="token punctuation">.</span><span class="token function">encryptPwd</span><span class="token punctuation">(</span>lm<span class="token punctuation">.</span><span class="token function">getPwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//把加密后的密码设置回登录模型中</span>            lm<span class="token punctuation">.</span><span class="token function">setPwd</span><span class="token punctuation">(</span>encryptPwd<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//判断是否匹配</span>            <span class="token keyword">return</span> callBack<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>lm<span class="token punctuation">,</span> dbLm<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 对密码数据进行加密     *     * @param pwd 密码     * @return 加密后端密码数据     */</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">encryptPwd</span><span class="token punctuation">(</span><span class="token class-name">String</span> pwd<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> pwd<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">match</span><span class="token punctuation">(</span><span class="token class-name">LoginModel</span> lm<span class="token punctuation">,</span> <span class="token class-name">LoginModel</span> dbLm<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>lm<span class="token punctuation">.</span><span class="token function">getLoginId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>dbLm<span class="token punctuation">.</span><span class="token function">getLoginId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> lm<span class="token punctuation">.</span><span class="token function">getPwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>dbLm<span class="token punctuation">.</span><span class="token function">getPwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="客户端调用类"><a href="#客户端调用类" class="headerlink" title="客户端调用类"></a>客户端调用类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Author: Sam * @Date: 2022-09-23 15:56 * @Description: 模板式回调客户端 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//登录人信息</span>        <span class="token class-name">LoginModel</span> lm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LoginModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lm<span class="token punctuation">.</span><span class="token function">setLoginId</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lm<span class="token punctuation">.</span><span class="token function">setPwd</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//登录模板用户判读对象</span>        <span class="token class-name">LoginTemplate</span> lt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LoginTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//定义好模板规范，使用即实现，有高可扩展性</span>        <span class="token keyword">boolean</span> checkLogin <span class="token operator">=</span> lt<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>lm<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">LoginCallBack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token class-name">LoginModel</span> <span class="token function">findLoginUser</span><span class="token punctuation">(</span><span class="token class-name">String</span> loginId<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//此处模拟查数据库的操作</span>                <span class="token class-name">LoginModel</span> dbLm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LoginModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                dbLm<span class="token punctuation">.</span><span class="token function">setLoginId</span><span class="token punctuation">(</span>loginId<span class="token punctuation">)</span><span class="token punctuation">;</span>                dbLm<span class="token punctuation">.</span><span class="token function">setPwd</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> dbLm<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">encryptPwd</span><span class="token punctuation">(</span><span class="token class-name">String</span> pwd<span class="token punctuation">,</span> <span class="token class-name">LoginTemplate</span> template<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//可不覆盖，直接调用模板中的默认实现</span>                <span class="token keyword">return</span> template<span class="token punctuation">.</span><span class="token function">encryptPwd</span><span class="token punctuation">(</span>pwd<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">match</span><span class="token punctuation">(</span><span class="token class-name">LoginModel</span> lm<span class="token punctuation">,</span> <span class="token class-name">LoginModel</span> dbLm<span class="token punctuation">,</span> <span class="token class-name">LoginTemplate</span> template<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//可不覆盖，直接调用模板中的默认实现</span>                <span class="token keyword">return</span> template<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>lm<span class="token punctuation">,</span> dbLm<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"登录是否成功 = "</span> <span class="token operator">+</span> checkLogin<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">登录是否成功 &#x3D; true<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上就是<code>模板方法模式</code>介绍和示例了~</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java设计模式-组合模式</title>
      <link href="/blog/2022/09/26/design-composite/"/>
      <url>/blog/2022/09/26/design-composite/</url>
      
        <content type="html"><![CDATA[<h1 id="Java设计模式-组合模式"><a href="#Java设计模式-组合模式" class="headerlink" title="Java设计模式-组合模式"></a>Java设计模式-组合模式</h1><h2 id="什么是组合模式"><a href="#什么是组合模式" class="headerlink" title="什么是组合模式"></a>什么是组合模式</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>将对象组合成树型结构以表示“部分-整体”的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性。</p><h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><p>组合模式的目的是:让客户端不再区分操作的是组合对象还是叶子对象，而是以一个统一的方式来操作。<br>实现这个目标的关键之处，是设计一个抽象的组件类，让它可以代表组合对象和叶子对象。这样一来，客户端就不用区分到底操作的是组合对象还是叶子对象了，只需要把它们全部当作组件对象进行统一的操作就可以了。</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>【定义了包含基本对象和组合对象的类层次结构】在组合模式中，基本对象可以被组合成复杂的组合对象，而组合对象又可以组合成更复杂的组合对象，可以不断地递归组合下去，从而构成一个统一的组合对象的类层次结构。</li><li>【统一了组合对象和叶子对象】在组合模式中，可以把叶子对象当作特殊的组合对象看待，为它们定义统一的父类，从而把组合对象和叶子对象的行为统一起来。</li><li>【简化了客户端调用】组合模式通过统一组合对象和叶子对象，使得客户端在使用它们的时候，不需要再去区分它们，客户不关心使用的到底是什么类型的对象，这就大大简化了客户端的使用。</li><li>【更容易扩展】由于客户端是统一地面对Component来操作，因此，新定义的复合或叶子类能够很容易地与已有的结构一起工作，而客户端不需要为增添了新的组件类而改变。</li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li>【很难限制组合中的组件类型】容易增加新的组件也会带来一些问题，比如很难限制组合中的组件类型。</li></ul><h3 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h3><p><img src="composite-1.png"></p><ul><li>Component：抽象的组件对象，为组合中的对象声明接口，让客户端可以通过这个接口来访问和管理整个对象结构，可以在里面为定义的功能提供缺省的实现。</li><li>Leaf：叶子节点对象，定义和实现叶子对象的行为，不再包含其他的子节点对象。</li><li>Composite：组合对象，通常会存储子组件，定义包含子组件的那些组件的行为，并实现在组件接口中定义的与子组件有关的操作。</li><li>Client：客户端，通过组件接口来操作组合结构里面的组件对象。</li></ul><p>一种典型的复合对象结构通常是如图15.2所示的树型结构，一个复合对象可以包含多个叶子对象和其他的复合对象。虽然图15.2看起来好像有些对称，但那只是为了让图看起来美观一点，并不是说复合组合的对象结构就是这样对称的，这点要提前说明一下。</p><p><img src="composite-2.png"></p><h2 id="何时使用"><a href="#何时使用" class="headerlink" title="何时使用"></a>何时使用</h2><p>建议在如下情况时选用组合模式</p><ul><li><p>如果你想表示对象的部分-整体层次结构，可以选用组合模式，把整体和部分的操作统一起来，使得层次结构实现更简单，从外部来使用这个层次结构也容易。</p></li><li><p>如果你希望统一地使用组合结构中的所有对象，可以选用组合模式，这正是组合模式提供的主要功能。</p></li></ul><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><p>以<strong>树遍历</strong>为例子</p><h3 id="抽象的组件对象"><a href="#抽象的组件对象" class="headerlink" title="抽象的组件对象"></a>抽象的组件对象</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Author: Sam * @Date: 2022-08-18 16:17 * @Description: 抽象的组件对象 */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Component</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 输出组件自身的名称     */</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">printStruct</span><span class="token punctuation">(</span><span class="token class-name">String</span> preStr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 向组合对象中加入组件对象     *     * @param child 被加入组合对象的组件对象     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addChild</span><span class="token punctuation">(</span><span class="token class-name">Component</span> child<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token string">"对象不支持这个功能"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 从组合对象中移出组件对象     *     * @param child 被移出组合对象的组件对象     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeChild</span><span class="token punctuation">(</span><span class="token class-name">Component</span> child<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token string">"对象不支持这个功能"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 返回某个索引对应的组件对象     *     * @param index 需要获取的组件对象的索引，索引从0开始     * @return 索引对象的组件对象     */</span>    <span class="token keyword">public</span> <span class="token class-name">Component</span> <span class="token function">getChildren</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token string">"对象不支持这个功能"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="叶子节点"><a href="#叶子节点" class="headerlink" title="叶子节点"></a>叶子节点</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Author: Sam * @Date: 2022-08-18 16:02 * @Description: 叶子节点 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Leaf</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 叶子对象的名字     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 构造方法，传入叶子对象的名称     *     * @param name 叶子对象的名称     */</span>    <span class="token keyword">public</span> <span class="token class-name">Leaf</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 输出叶子对象的结构，叶子对象没有子对象，也就是输出叶子对象的名字     *     * @param preStr 前缀，主要是按照层级拼接的空格，实现向后缩进     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printStruct</span><span class="token punctuation">(</span><span class="token class-name">String</span> preStr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>preStr <span class="token operator">+</span> <span class="token string">"+"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="组合对象"><a href="#组合对象" class="headerlink" title="组合对象"></a>组合对象</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span><span class="token comment">/** * @Author: Sam * @Date: 2022-08-18 16:24 * @Description: 组合对象，可以包含其他组合对象或者叶子对象 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Composite</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 用来存储组合对象中包含的子组件对象     */</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Component</span><span class="token punctuation">></span></span> childComponents <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 组合对象的名字     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 构造方法，传入组合对象的名称     *     * @param name 组合对象的名称     */</span>    <span class="token keyword">public</span> <span class="token class-name">Composite</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addChild</span><span class="token punctuation">(</span><span class="token class-name">Component</span> child<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//延迟初始化</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>childComponents <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            childComponents <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        childComponents<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 输出组合对象的结构     *     * @param preStr 前缀，主要是按照层级拼接的空格，实现向后缩进     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printStruct</span><span class="token punctuation">(</span><span class="token class-name">String</span> preStr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>preStr <span class="token operator">+</span> <span class="token string">"+"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//如果还包含子组件，那么就输出子组件对象</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>childComponents <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//添加一个空格，表示向后缩进一个空格</span>            preStr <span class="token operator">+=</span> <span class="token string">" "</span><span class="token punctuation">;</span>            <span class="token comment">//输出当前对象的子对象</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Component</span> c <span class="token operator">:</span> childComponents<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                c<span class="token punctuation">.</span><span class="token function">printStruct</span><span class="token punctuation">(</span>preStr<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="客户端调用类"><a href="#客户端调用类" class="headerlink" title="客户端调用类"></a>客户端调用类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Author: Sam * @Date: 2022-08-18 16:32 * @Description: 组合对象客户端 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//定义所有的组合对象</span>        <span class="token class-name">Component</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Composite</span><span class="token punctuation">(</span><span class="token string">"服装"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Component</span> c1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Composite</span><span class="token punctuation">(</span><span class="token string">"男装"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Component</span> c2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Composite</span><span class="token punctuation">(</span><span class="token string">"女装"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//定义所有的叶子对象</span>        <span class="token class-name">Component</span> leaf1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Leaf</span><span class="token punctuation">(</span><span class="token string">"衬衣"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Component</span> leaf2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Leaf</span><span class="token punctuation">(</span><span class="token string">"夹克"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Component</span> leaf3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Leaf</span><span class="token punctuation">(</span><span class="token string">"裙子"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Component</span> leaf4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Leaf</span><span class="token punctuation">(</span><span class="token string">"套装"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//按照数的结构来组合 组合对象和叶子对象</span>        root<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token punctuation">;</span>        root<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>c2<span class="token punctuation">)</span><span class="token punctuation">;</span>        c1<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>leaf1<span class="token punctuation">)</span><span class="token punctuation">;</span>        c1<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>leaf2<span class="token punctuation">)</span><span class="token punctuation">;</span>        c2<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>leaf3<span class="token punctuation">)</span><span class="token punctuation">;</span>        c2<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>leaf4<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//调用跟对象的输出功能来输出整棵树</span>        root<span class="token punctuation">.</span><span class="token function">printStruct</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">+服装 +男装  +衬衣  +夹克 +女装  +裙子  +套装<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上就是<code>组合模式</code>介绍和示例了~</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java设计模式-迭代器模式</title>
      <link href="/blog/2022/09/26/design-iterator/"/>
      <url>/blog/2022/09/26/design-iterator/</url>
      
        <content type="html"><![CDATA[<h1 id="Java设计模式-迭代器模式"><a href="#Java设计模式-迭代器模式" class="headerlink" title="Java设计模式-迭代器模式"></a>Java设计模式-迭代器模式</h1><h2 id="什么是迭代器模式"><a href="#什么是迭代器模式" class="headerlink" title="什么是迭代器模式"></a>什么是迭代器模式</h2><p>迭代器模式的功能主要在于提供对聚合对象的迭代访问。迭代器就围绕着这个“访问”做文章，延伸出很多的功能来。比如：</p><ul><li>以不同的方式遍历聚合对象，比如向前、向后等。对同一个聚合同时进行多个遍历。</li><li>以不同的遍历策略来遍历聚合，比如是否需要过滤等。</li><li>多态迭代，含义是:为不同的聚合结构提供统一的迭代接口，也就是说通过一个迭代接口可以访问不同的聚合结构，这就叫做多态迭代。上面的示例就已经实现了多态迭代。事实上，标准的迭代模式实现基本上都是支持多态迭代的。</li></ul><p>迭代器的本质：<strong>控制访问聚合对象中的元素</strong>。</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>【更好的封装性】迭代器模式可以让你访问一个聚合对象的内容，而无须暴露该聚合对象的内部表示，从而提高聚合对象的封装性。</li><li>【可以以不同的遍历方式来遍历一个聚合】使用迭代器模式，使得聚合对象的内容和具体的迭代算法分离开。这样就可以通过使用不同的迭代器的实例、不同的遍历方式来遍历一个聚合对象了，比如上面示例的带迭代策略的迭代器。</li><li>【迭代器简化了聚合的接口】有了迭代器的接口，则聚合本身就不需要再定义这些接口了，从而简化了聚合的接口定义。</li><li>【简化客户端调用】迭代器为遍历不同的聚合对象提供了一个统一的接口，使得客户端遍历聚合对象的内容变得更简单。</li><li>【同一个聚合上可以有多个遍历】每个迭代器保持它自己的遍历状态，比如前面实现中的迭代索引位置，因此可以对同一个聚合对象同时进行多个遍历。</li></ul><h3 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h3><p><img src="iterator-1.png"></p><ul><li>Iterator：迭代器接口。定义访问和遍历元素的接口。</li><li>ConcreteIterator：具体的迭代器实现对象。实现对聚合对象的遍历，并跟踪遍历时的当前位置。</li><li>Aggregate：聚合对象。定义创建相应迭代器对象的接口。</li><li>ConcreteAggregate：具体聚合对象。实现创建相应的迭代器对象。</li></ul><h2 id="何时使用"><a href="#何时使用" class="headerlink" title="何时使用"></a>何时使用</h2><p>建议在如下情况时选用迭代器模式</p><ul><li><p>如果你希望提供访问一个聚合对象的内容，但是又不想暴露它的内部表示的时候，可以使用迭代器模式来提供迭代器接口，从而让客户端只是通过迭代器的接口来访问聚合对象，而无须关心聚合对象的内部实现。</p></li><li><p>如果你希望有多种遍历方式可以访问聚合对象，可以使用迭代器模式。</p></li><li><p>如果你希望为遍历不同的聚合对象提供一个统一的接口，可以使用迭代器模式。</p></li></ul><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><p>以收购新公司 <strong>薪资计算方式不同</strong> 来合并打印 为例子</p><h3 id="统一迭代接口"><a href="#统一迭代接口" class="headerlink" title="统一迭代接口"></a>统一迭代接口</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Author: Sam * @Date: 2022-09-26 15:48 * @Description: 统一迭代接口 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Iterator</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">currentItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="聚合对象"><a href="#聚合对象" class="headerlink" title="聚合对象"></a>聚合对象</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Author: Sam * @Date: 2022-09-26 15:52 * @Description: 聚合对象 */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Aggregate</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 工厂方法 创建相对应的迭代器接口     *     * @return 对应的迭代器接口     */</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">Iterator</span> <span class="token function">createIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="工资描述对象"><a href="#工资描述对象" class="headerlink" title="工资描述对象"></a>工资描述对象</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span></span><span class="token punctuation">;</span><span class="token comment">/** * @Author: Sam * @Date: 2022-09-26 15:34 * @Description: 工资描述对象 */</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PayModel</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 支付工资人员     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> userName<span class="token punctuation">;</span>    <span class="token comment">/**     * 支付工资数额     */</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> pay<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="集合迭代接口"><a href="#集合迭代接口" class="headerlink" title="集合迭代接口"></a>集合迭代接口</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Author: Sam * @Date: 2022-09-26 15:57 * @Description: 用来实现访问Collection集合的迭代接口，为了外部统一访问 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CollectionIteratorImpl</span> <span class="token keyword">implements</span> <span class="token class-name">Iterator</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 用来存放被迭代的聚合对象     */</span>    <span class="token keyword">private</span> <span class="token class-name">PayManager</span> aggregate <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 用来记录当前迭代到的索引位置     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">CollectionIteratorImpl</span><span class="token punctuation">(</span><span class="token class-name">PayManager</span> aggregate<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>aggregate <span class="token operator">=</span> aggregate<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>aggregate<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            index <span class="token operator">=</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>aggregate<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">currentItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>aggregate<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数组的迭代接口"><a href="#数组的迭代接口" class="headerlink" title="数组的迭代接口"></a>数组的迭代接口</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Author: Sam * @Date: 2022-09-26 15:50 * @Description: 用来实现访问数组的迭代接口 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayIteratorImpl</span> <span class="token keyword">implements</span> <span class="token class-name">Iterator</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 用来存放被迭代的聚合对象     */</span>    <span class="token keyword">private</span> <span class="token class-name">SalaryManager</span> aggregate <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 用来记录当前迭代到的索引位置     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ArrayIteratorImpl</span><span class="token punctuation">(</span><span class="token class-name">SalaryManager</span> aggregate<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>aggregate <span class="token operator">=</span> aggregate<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>aggregate<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            index <span class="token operator">=</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>aggregate<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">currentItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>aggregate<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="客户方已有的工资管理对象"><a href="#客户方已有的工资管理对象" class="headerlink" title="客户方已有的工资管理对象"></a>客户方已有的工资管理对象</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span><span class="token comment">/** * @Author: Sam * @Date: 2022-09-26 15:54 * @Description: 客户方已有的工资管理对象 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PayManager</span> <span class="token keyword">extends</span> <span class="token class-name">Aggregate</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 工资对象列表     */</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PayModel</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 获取工资列表     */</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PayModel</span><span class="token punctuation">></span></span> <span class="token function">getPays</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 计算工资，模拟需要的计算的用户薪资     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">calcPay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">PayModel</span> pm1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PayModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pm1<span class="token punctuation">.</span><span class="token function">setPay</span><span class="token punctuation">(</span><span class="token number">3800</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pm1<span class="token punctuation">.</span><span class="token function">setUserName</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">PayModel</span> pm2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PayModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pm2<span class="token punctuation">.</span><span class="token function">setPay</span><span class="token punctuation">(</span><span class="token number">5800</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pm2<span class="token punctuation">.</span><span class="token function">setUserName</span><span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pm1<span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pm2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Iterator</span> <span class="token function">createIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CollectionIteratorImpl</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Object</span> retObj <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            retObj <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> retObj<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="被客户方收购的公司工资管理对象"><a href="#被客户方收购的公司工资管理对象" class="headerlink" title="被客户方收购的公司工资管理对象"></a>被客户方收购的公司工资管理对象</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Author: Sam * @Date: 2022-09-26 15:40 * @Description: 被客户方收购的公司 工资管理对象 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SalaryManager</span> <span class="token keyword">extends</span> <span class="token class-name">Aggregate</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 工资列表数组     */</span>    <span class="token keyword">private</span> <span class="token class-name">PayModel</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pms <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 获取工资列表     */</span>    <span class="token keyword">public</span> <span class="token class-name">PayModel</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getPays</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> pms<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 计算工资，模拟需要的计算的用户薪资     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">calcSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">PayModel</span> pm1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PayModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pm1<span class="token punctuation">.</span><span class="token function">setPay</span><span class="token punctuation">(</span><span class="token number">2200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pm1<span class="token punctuation">.</span><span class="token function">setUserName</span><span class="token punctuation">(</span><span class="token string">"王五"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">PayModel</span> pm2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PayModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pm2<span class="token punctuation">.</span><span class="token function">setPay</span><span class="token punctuation">(</span><span class="token number">3600</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pm2<span class="token punctuation">.</span><span class="token function">setUserName</span><span class="token punctuation">(</span><span class="token string">"赵六"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pms <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PayModel</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        pms<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> pm1<span class="token punctuation">;</span>        pms<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> pm2<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Iterator</span> <span class="token function">createIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ArrayIteratorImpl</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Object</span> retObj <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> pms<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            retObj <span class="token operator">=</span> pms<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> retObj<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pms<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="客户端调用类"><a href="#客户端调用类" class="headerlink" title="客户端调用类"></a>客户端调用类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Author: Sam * @Date: 2022-09-26 16:04 * @Description: 迭代器客户端 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//访问集团的工资列表</span>        <span class="token class-name">PayManager</span> payManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PayManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//先计算在获取</span>        payManager<span class="token punctuation">.</span><span class="token function">calcPay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"集团工资列表："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">assemble</span><span class="token punctuation">(</span>payManager<span class="token punctuation">.</span><span class="token function">createIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//访问集团的工资列表</span>        <span class="token class-name">SalaryManager</span> salaryManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SalaryManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//先计算在获取</span>        salaryManager<span class="token punctuation">.</span><span class="token function">calcSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"新收购的公司工资列表："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">assemble</span><span class="token punctuation">(</span>salaryManager<span class="token punctuation">.</span><span class="token function">createIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 通过访问聚合对象的迭代器 来遍历数据     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">assemble</span><span class="token punctuation">(</span><span class="token class-name">Iterator</span> it<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        it<span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>it<span class="token punctuation">.</span><span class="token function">isDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Object</span> obj <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">currentItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"obj = "</span> <span class="token operator">+</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//如果还没迭代到最后，那就向下迭代</span>            it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">集团工资列表：obj &#x3D; PayModel(userName&#x3D;张三, pay&#x3D;3800.0)obj &#x3D; PayModel(userName&#x3D;李四, pay&#x3D;5800.0)新收购的公司工资列表：obj &#x3D; PayModel(userName&#x3D;王五, pay&#x3D;2200.0)obj &#x3D; PayModel(userName&#x3D;赵六, pay&#x3D;3600.0)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上就是<code>迭代器模式</code>介绍和示例了~</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java设计模式-命令模式</title>
      <link href="/blog/2022/08/26/design-command/"/>
      <url>/blog/2022/08/26/design-command/</url>
      
        <content type="html"><![CDATA[<h1 id="Java设计模式-命令模式"><a href="#Java设计模式-命令模式" class="headerlink" title="Java设计模式-命令模式"></a>Java设计模式-命令模式</h1><h2 id="什么是命令模式"><a href="#什么是命令模式" class="headerlink" title="什么是命令模式"></a>什么是命令模式</h2><p>命令模式的关键之处就是把请求封装成为对象，也就是命令对象，并定义了统一的执行操作的接口，这个命令对象可以被存储、转发、记录、处理、撤销等，整个命令模式都是围绕这个对象在进行。</p><p>所谓命令模式的参数化配置，指的是：可以用不同的命令对象，去参数化配置客户的请求。</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>【更松散的耦合】命令模式使得发起命令的对象–客户端，和具体实现命令的对象–接收者对象完全解耦，也就是说发起命令的对象完全不知道具体实现对象是谁，也不知道如何实现。</li><li>【更动态的控制】命令模式把请求封装起来，可以动态地对它进行参数化、队列化和日志化等操作，从而使得系统更灵活。</li><li>【很自然的复合命令】命令模式中的命令对象能够很容易地组合成复合命令，也就是前面讲的宏命令，从而使系统操作更简单，功能更强大。</li><li>【更好的扩展性】由于发起命令的对象和具体的实现完全解耦，因此扩展新的命令就很容易，只需要实现新的命令对象，然后在装配的时候，把具体的实现对象设置到命令对象中，然后就可以使用这个命令对象，已有的实现完全不用变化。</li></ul><h3 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h3><p>组装过程调用顺序：</p><p><img src="command-1.png" alt="command-1"></p><p>执行命令调用顺序</p><p><img src="command-2.png" alt="command-2"></p><h2 id="何时使用"><a href="#何时使用" class="headerlink" title="何时使用"></a>何时使用</h2><p>建议在如下情况时选用命令模式</p><ul><li><p>如果需要抽象出需要执行的动作，并参数化这些对象，可以选用命令模式。将这些需要执行的动作抽象成为命令，然后实现命令的参数化配置。</p></li><li><p>如果需要在不同的时刻指定、排列和执行请求，可以选用命令模式。将这些请求封装成为命令对象，然后实现将请求队列化。</p></li><li><p>如果需要支持取消操作，可以选用命令模式，通过管理命令对象，能很容易地实现命令的恢复和重做功能。</p></li><li><p>如果需要支持当系统崩溃时，能将系统的操作功能重新执行一遍，可以选用命令模式。将这些操作功能的请求封装成命令对象，然后实现日志命令，就可以在系统恢复以后，通过日志获取命令列表，从而重新执行一遍功能。</p></li><li><p>在需要事务的系统中，可以选用命令模式。命令模式提供了对事务进行建模的方法。命令模式有一个别名就是事务。</p></li></ul><h2 id="具体实现-计算器"><a href="#具体实现-计算器" class="headerlink" title="具体实现-计算器"></a>具体实现-计算器</h2><p>考虑一个计算器的功能，最简单的那种，只能实现加减法运算，现在要让这个计算器支持可撤销的操作。具体实现如下：</p><h3 id="操作运算接口"><a href="#操作运算接口" class="headerlink" title="操作运算接口"></a>操作运算接口</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Author: Sam * @Date: 2022-08-26 16:04 * @Description: 操作运算接口 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">OperationAPi</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 获取计算完成后的结果     */</span>    <span class="token keyword">int</span> <span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 设置计算开始的初始值     */</span>    <span class="token keyword">void</span> <span class="token function">setResult</span><span class="token punctuation">(</span><span class="token keyword">int</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 执行加法     */</span>    <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 执行减法     */</span>    <span class="token keyword">void</span> <span class="token function">substract</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="实现运算接口-运算类"><a href="#实现运算接口-运算类" class="headerlink" title="实现运算接口-运算类"></a>实现运算接口-运算类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Author: Sam * @Date: 2022-08-26 16:14 * @Description: 运算类，真正实现加减运算 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Operation</span> <span class="token keyword">implements</span> <span class="token class-name">OperationAPi</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 计算运行的结果     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> result<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setResult</span><span class="token punctuation">(</span><span class="token keyword">int</span> result<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>result <span class="token operator">=</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        result <span class="token operator">+=</span> num<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">substract</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        result <span class="token operator">-=</span> num<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="命令接口"><a href="#命令接口" class="headerlink" title="命令接口"></a>命令接口</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Author: Sam * @Date: 2022-08-26 16:16 * @Description: 命令接口，声明执行的操作，支持可撤销操作 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Command</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 执行命令对应的操作     */</span>    <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 执行撤销命令对应的操作     */</span>    <span class="token keyword">void</span> <span class="token function">undo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="命令接口实现类-加法命令"><a href="#命令接口实现类-加法命令" class="headerlink" title="命令接口实现类-加法命令"></a>命令接口实现类-加法命令</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Author: Sam * @Date: 2022-08-26 16:17 * @Description: 具体加法命令实现对象 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AddCommand</span> <span class="token keyword">implements</span> <span class="token class-name">Command</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 持有具体执行计算的对象     */</span>    <span class="token keyword">private</span> <span class="token class-name">OperationAPi</span> operation <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 操作的数据，也就是要加上的数据     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> opeNum<span class="token punctuation">;</span>    <span class="token comment">/**     * 构造方法，传入具体执行计算的对象     *     * @param operation 具体执行计算的对象     * @param opeNum    要加上的数据     */</span>    <span class="token keyword">public</span> <span class="token class-name">AddCommand</span><span class="token punctuation">(</span><span class="token class-name">OperationAPi</span> operation<span class="token punctuation">,</span> <span class="token keyword">int</span> opeNum<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>operation <span class="token operator">=</span> operation<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>opeNum <span class="token operator">=</span> opeNum<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//转调接收者去真正执行功能，加法命令</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>operation<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>opeNum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">undo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//命令本身是做加法，那撤销操作就是减法命令</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>operation<span class="token punctuation">.</span><span class="token function">substract</span><span class="token punctuation">(</span>opeNum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="命令接口实现类-减法命令"><a href="#命令接口实现类-减法命令" class="headerlink" title="命令接口实现类-减法命令"></a>命令接口实现类-减法命令</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Author: Sam * @Date: 2022-08-26 16:17 * @Description: 具体减法命令实现对象 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SubstractCommand</span> <span class="token keyword">implements</span> <span class="token class-name">Command</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 持有具体执行计算的对象     */</span>    <span class="token keyword">private</span> <span class="token class-name">OperationAPi</span> operation <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 操作的数据，也就是要减去的数据     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> opeNum<span class="token punctuation">;</span>    <span class="token comment">/**     * 构造方法，传入具体执行计算的对象     *     * @param operation 具体执行计算的对象     * @param opeNum    要减去的数据     */</span>    <span class="token keyword">public</span> <span class="token class-name">SubstractCommand</span><span class="token punctuation">(</span><span class="token class-name">OperationAPi</span> operation<span class="token punctuation">,</span> <span class="token keyword">int</span> opeNum<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>operation <span class="token operator">=</span> operation<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>opeNum <span class="token operator">=</span> opeNum<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//转调接收者去真正执行功能，减法命令</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>operation<span class="token punctuation">.</span><span class="token function">substract</span><span class="token punctuation">(</span>opeNum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">undo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//命令本身是做减法，那撤销操作就是加法命令</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>operation<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>opeNum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="计算器类"><a href="#计算器类" class="headerlink" title="计算器类"></a>计算器类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Author: Sam * @Date: 2022-08-26 16:22 * @Description: 计算器类，计算器上有加减法按钮 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Calculator</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 持有执行加法的命令对象     */</span>    <span class="token keyword">private</span> <span class="token class-name">Command</span> addCmd <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 持有执行减法的命令对象     */</span>    <span class="token keyword">private</span> <span class="token class-name">Command</span> substractCmd <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 命令操作的历史记录，在撤销时使用     */</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Command</span><span class="token punctuation">></span></span> undoCmds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 命令操作的历史记录，在恢复时使用     */</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Command</span><span class="token punctuation">></span></span> redoCmds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAddCmd</span><span class="token punctuation">(</span><span class="token class-name">Command</span> addCmd<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>addCmd <span class="token operator">=</span> addCmd<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSubstractCmd</span><span class="token punctuation">(</span><span class="token class-name">Command</span> substractCmd<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>substractCmd <span class="token operator">=</span> substractCmd<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 提供给客户使用，执行加法功能     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addPressed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>addCmd<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//将操作记录记录到可撤销历史记录中</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>undoCmds<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>addCmd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 提供给客户使用，执行减法功能     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">substractPressed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>substractCmd<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//将操作记录记录到可撤销历史记录中</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>undoCmds<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>substractCmd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 提供给客户使用，执行撤销功能     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">undoPressed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>undoCmds<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//去除最后一个命令来撤销</span>            <span class="token class-name">Command</span> cmd <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>undoCmds<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>undoCmds<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cmd<span class="token punctuation">.</span><span class="token function">undo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//将操作记录记录到可恢复历史记录中</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>redoCmds<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//然后把最后一个撤销命令删除掉</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>undoCmds<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"很抱歉，没有可撤销的命令"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 提供给客户使用，执行恢复功能     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">redoPressed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>redoCmds<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//去除最后一个命令来撤销</span>            <span class="token class-name">Command</span> cmd <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>redoCmds<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>redoCmds<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cmd<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//将操作记录记录到可撤销历史记录中</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>undoCmds<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//然后把最后一个恢复命令删除掉</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>redoCmds<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"很抱歉，没有可恢复的命令"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="客户端调用类"><a href="#客户端调用类" class="headerlink" title="客户端调用类"></a>客户端调用类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Author: Sam * @Date: 2022-08-26 17:01 * @Description: 命令模式客户端 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">OperationAPi</span> operation <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        operation<span class="token punctuation">.</span><span class="token function">setResult</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"初始值为：10"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">AddCommand</span> addCmd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AddCommand</span><span class="token punctuation">(</span>operation<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SubstractCommand</span> substractCmd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubstractCommand</span><span class="token punctuation">(</span>operation<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Calculator</span> calculator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Calculator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        calculator<span class="token punctuation">.</span><span class="token function">setAddCmd</span><span class="token punctuation">(</span>addCmd<span class="token punctuation">)</span><span class="token punctuation">;</span>        calculator<span class="token punctuation">.</span><span class="token function">setSubstractCmd</span><span class="token punctuation">(</span>substractCmd<span class="token punctuation">)</span><span class="token punctuation">;</span>        calculator<span class="token punctuation">.</span><span class="token function">addPressed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"加法运算后的结果为："</span> <span class="token operator">+</span> operation<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        calculator<span class="token punctuation">.</span><span class="token function">substractPressed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"减法运算后的结果为："</span> <span class="token operator">+</span> operation<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        calculator<span class="token punctuation">.</span><span class="token function">undoPressed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"一次撤销后的结果为："</span> <span class="token operator">+</span> operation<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        calculator<span class="token punctuation">.</span><span class="token function">undoPressed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"两次撤销后的结果为："</span> <span class="token operator">+</span> operation<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        calculator<span class="token punctuation">.</span><span class="token function">redoPressed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"一次恢复后的结果为："</span> <span class="token operator">+</span> operation<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        calculator<span class="token punctuation">.</span><span class="token function">redoPressed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"两次恢复后的结果为："</span> <span class="token operator">+</span> operation<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        calculator<span class="token punctuation">.</span><span class="token function">redoPressed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"三次恢复后的结果为："</span> <span class="token operator">+</span> operation<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">初始值为：10加法运算后的结果为：15减法运算后的结果为：12一次撤销后的结果为：15两次撤销后的结果为：10一次恢复后的结果为：15两次恢复后的结果为：12很抱歉，没有可恢复的命令三次恢复后的结果为：12<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上就是<code>命令模式</code>介绍和示例了~</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux安装oralce11g保姆级教程</title>
      <link href="/blog/2022/08/16/oralce-install/"/>
      <url>/blog/2022/08/16/oralce-install/</url>
      
        <content type="html"><![CDATA[<h1 id="linux-安装-Oracle11g保姆级教程"><a href="#linux-安装-Oracle11g保姆级教程" class="headerlink" title="linux 安装 Oracle11g保姆级教程"></a>linux 安装 Oracle11g保姆级教程</h1><h2 id="一、服务安装"><a href="#一、服务安装" class="headerlink" title="一、服务安装"></a>一、服务安装</h2><h3 id="1-上传文件到服务器或虚拟机的-home-software目录下"><a href="#1-上传文件到服务器或虚拟机的-home-software目录下" class="headerlink" title="1. 上传文件到服务器或虚拟机的/home/software目录下"></a>1. 上传文件到服务器或虚拟机的/home/software目录下</h3><p>可以使用rz -y命令或者 xftps方式进行传递</p><p>如果rz –y命令不能使用，可用：</p><blockquote><p>yum install lrzsz -y</p></blockquote><h3 id="2-解压文件到当前目录："><a href="#2-解压文件到当前目录：" class="headerlink" title="2. 解压文件到当前目录："></a>2. 解压文件到当前目录：</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@oracle software<span class="token punctuation">]</span><span class="token comment"># unzip linux.x64_11gR2_database_1of2.zip</span><span class="token punctuation">[</span>root@oracle software<span class="token punctuation">]</span><span class="token comment"># unzip linux.x64_11gR2_database_2of2.zip</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果unzip命令不能使用，依次执行如下命令：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yum list <span class="token operator">|</span> <span class="token function">grep</span> zip/unzipyum <span class="token function">install</span> <span class="token function">zip</span>yum <span class="token function">install</span> <span class="token function">unzip</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="3-关闭selinux"><a href="#3-关闭selinux" class="headerlink" title="3. 关闭selinux"></a>3. 关闭selinux</h3><blockquote><p>vim /etc/selinux/config</p></blockquote><p>设置SELINUX=disabled</p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf"># This file controls the state of SELinux on the system.# SELINUX&#x3D; can take one of these three values:#     enforcing - SELinux security policy is enforced.#     permissive - SELinux prints warnings instead of enforcing.#     disabled - No SELinux policy is loaded.SELINUX&#x3D;disabled# SELINUXTYPE&#x3D; can take one of three values:#     targeted - Targeted processes are protected,#     minimum - Modification of targeted policy. Only selected processes are protected. #     mls - Multi Level Security protection.SELINUXTYPE&#x3D;targeted<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>临时关闭</strong>selinux防火墙</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@oracle software<span class="token punctuation">]</span><span class="token comment"># setenforce 0</span>setenforce: SELinux is disabled<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="4-关闭防火墙"><a href="#4-关闭防火墙" class="headerlink" title="4. 关闭防火墙"></a>4. 关闭防火墙</h3><p>查看系统版本：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@oracle software<span class="token punctuation">]</span><span class="token comment"># cat /etc/redhat-release</span>CentOS Linux release <span class="token number">7.9</span>.2009 <span class="token punctuation">(</span>Core<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>如果是6及以下：</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@oracle software<span class="token punctuation">]</span><span class="token comment"># service iptables stop</span><span class="token punctuation">[</span>root@oracle software<span class="token punctuation">]</span><span class="token comment"># service iptables status</span><span class="token punctuation">[</span>root@oracle software<span class="token punctuation">]</span><span class="token comment"># chkconfig iptables off</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>如果是centenOS7：</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@oracle software<span class="token punctuation">]</span><span class="token comment"># systemctl restart firewalld.service</span><span class="token punctuation">[</span>root@oracle software<span class="token punctuation">]</span><span class="token comment"># systemctl list-unit-files|grep firewalld.service</span>firewalld.service               disabled<span class="token punctuation">[</span>root@oracle software<span class="token punctuation">]</span><span class="token comment"># systemctl disable firewalld.service</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-安装Oracle-11g依赖包"><a href="#5-安装Oracle-11g依赖包" class="headerlink" title="5. 安装Oracle 11g依赖包"></a>5. 安装Oracle 11g依赖包</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@oracle software<span class="token punctuation">]</span><span class="token comment"># yum install gcc make binutils gcc-c++ compat-libstdc++-33elfutils-libelf-devel elfutils-libelf-devel-static ksh libaio libaio-develnumactl-devel sysstat unixODBC unixODBC-devel pcre-devel –y</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="6-添加安装用户和用户组"><a href="#6-添加安装用户和用户组" class="headerlink" title="6. 添加安装用户和用户组"></a>6. 添加安装用户和用户组</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@oracle software<span class="token punctuation">]</span><span class="token comment"># groupadd oinstall</span><span class="token punctuation">[</span>root@oracle software<span class="token punctuation">]</span><span class="token comment"># groupadd dba</span><span class="token punctuation">[</span>root@oracle software<span class="token punctuation">]</span><span class="token comment"># useradd -g oinstall -G dba oracle</span><span class="token comment">#输入oracle登录密码</span><span class="token punctuation">[</span>root@oracle software<span class="token punctuation">]</span><span class="token comment"># passwd oracle</span>Changing password <span class="token keyword">for</span> user oracle.New password: Retype new password: passwd: all authentication tokens updated successfully.<span class="token punctuation">[</span>root@oracle software<span class="token punctuation">]</span><span class="token comment"># id oracle</span><span class="token assign-left variable">uid</span><span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">(</span>oracle<span class="token punctuation">)</span> <span class="token assign-left variable">gid</span><span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">(</span>oinstall<span class="token punctuation">)</span> <span class="token assign-left variable">groups</span><span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">(</span>oinstall<span class="token punctuation">)</span>,1001<span class="token punctuation">(</span>dba<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-修改内核参数配置文件"><a href="#7-修改内核参数配置文件" class="headerlink" title="7. 修改内核参数配置文件"></a>7. 修改内核参数配置文件</h3><blockquote><p>[root@oracle software]# vim /etc/sysctl.conf</p></blockquote><p>在末尾添加以下内容：</p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf"># oracle beginfs.aio-max-nr &#x3D; 1048576fs.file-max &#x3D; 6815744kernel.shmall &#x3D; 2097152kernel.shmmax &#x3D; 1073741824kernel.shmmni &#x3D; 4096kernel.sem &#x3D; 250 32000 100 128net.ipv4.ip_local_port_range &#x3D; 9000 65500net.core.rmem_default &#x3D; 262144net.core.rmem_max &#x3D; 4194304net.core.wmem_default &#x3D; 262144net.core.wmem_max &#x3D; 1048576# oracle end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看是否成功写进/etc/sysctl.conf文件中：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@oracle software<span class="token punctuation">]</span><span class="token comment"># sysctl -p</span>net.ipv4.tcp_syncookies <span class="token operator">=</span> <span class="token number">1</span>net.ipv4.tcp_tw_reuse <span class="token operator">=</span> <span class="token number">1</span>net.ipv4.tcp_tw_recycle <span class="token operator">=</span> <span class="token number">1</span>fs.aio-max-nr <span class="token operator">=</span> <span class="token number">1048576</span>fs.file-max <span class="token operator">=</span> <span class="token number">6815744</span>kernel.shmall <span class="token operator">=</span> <span class="token number">2097152</span>kernel.shmmax <span class="token operator">=</span> <span class="token number">1073741824</span>kernel.shmmni <span class="token operator">=</span> <span class="token number">4096</span>kernel.sem <span class="token operator">=</span> <span class="token number">250</span> <span class="token number">32000</span> <span class="token number">100</span> <span class="token number">128</span>net.ipv4.ip_local_port_range <span class="token operator">=</span> <span class="token number">9000</span> <span class="token number">65500</span>net.core.rmem_default <span class="token operator">=</span> <span class="token number">262144</span>net.core.rmem_max <span class="token operator">=</span> <span class="token number">4194304</span>net.core.wmem_default <span class="token operator">=</span> <span class="token number">262144</span>net.core.wmem_max <span class="token operator">=</span> <span class="token number">1048576</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中kernel.shmmax = 1073741824为本机物理内存（2G）的一半，单位为byte。</p><h3 id="8-修改用户的限制文件"><a href="#8-修改用户的限制文件" class="headerlink" title="8. 修改用户的限制文件"></a>8. 修改用户的限制文件</h3><p>修改/etc/security/limits.conf文件：</p><blockquote><p>[root@oracle software]# vim /etc/security/limits.conf</p></blockquote><p>在末尾添加以下内容：</p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">oracle          soft    nproc           2047oracle          hard    nproc           16384oracle          soft    nofile          1024oracle          hard    nofile          65536oracle          soft    stack           10240<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改/etc/pam.d/login文件：</p><blockquote><p> [root@oracle software]# vim /etc/pam.d/login</p></blockquote><p>在末尾添加以下内容：</p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf"># oraclesession    required     &#x2F;lib64&#x2F;security&#x2F;pam_limits.sosession    required     pam_limits.so<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>修改/etc/profile文件：</p><blockquote><p>[root@oracle software]# vim /etc/profile</p></blockquote><p>在末尾添加以下内容：</p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">#oracle配置if [ $USER &#x3D; &quot;oracle&quot; ]; then  if [ $SHELL &#x3D; &quot;&#x2F;bin&#x2F;ksh&quot; ]; then      ulimit -p 16384      ulimit -n 65536  else      ulimit -u 16384 -n 65536  fifi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-创建安装目录和设置文件权限"><a href="#9-创建安装目录和设置文件权限" class="headerlink" title="9. 创建安装目录和设置文件权限"></a>9. 创建安装目录和设置文件权限</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@oracle software<span class="token punctuation">]</span><span class="token comment"># mkdir -p /data/oracle/product/11.2.0</span><span class="token punctuation">[</span>root@oracle software<span class="token punctuation">]</span><span class="token comment"># mkdir /data/oracle/oradata</span><span class="token punctuation">[</span>root@oracle software<span class="token punctuation">]</span><span class="token comment"># mkdir /data/oracle/inventory</span><span class="token punctuation">[</span>root@oracle software<span class="token punctuation">]</span><span class="token comment"># mkdir /data/oracle/fast_recovery_area</span><span class="token punctuation">[</span>root@oracle software<span class="token punctuation">]</span><span class="token comment"># chown -R oracle:oinstall /data/oracle</span><span class="token punctuation">[</span>root@oracle software<span class="token punctuation">]</span><span class="token comment"># chmod -R 775 /data/oracle</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-设置oracle用户环境变量"><a href="#10-设置oracle用户环境变量" class="headerlink" title="10. 设置oracle用户环境变量"></a>10. 设置oracle用户环境变量</h3><p>首先切换到oracle用户下：</p><blockquote><p>[root@oracle software]# su -l oracle</p></blockquote><p>配置环境变量</p><blockquote><p>[oracle@oracle ~]$ vim .bash_profile</p></blockquote><p>在末尾添加如下内容：</p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">ORACLE_BASE&#x3D;&#x2F;data&#x2F;oracleORACLE_HOME&#x3D;$ORACLE_BASE&#x2F;product&#x2F;11.2.0ORACLE_SID&#x3D;orclPATH&#x3D;$PATH:$ORACLE_HOME&#x2F;binexport ORACLE_BASE ORACLE_HOME ORACLE_SID PATH<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意，标红处必须与创建的数据库实例名称一致，否则数据库启动后无法访问。第一次配置完记得source一下。</strong></p><p>让其生效</p><blockquote><p>[oracle@oracle ~]$ source .bash_profile</p></blockquote><h3 id="11-编辑静默安装响应文件"><a href="#11-编辑静默安装响应文件" class="headerlink" title="11. 编辑静默安装响应文件"></a>11. 编辑静默安装响应文件</h3><p>复制安装文件夹response到当前oracle用户的家目录下：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>oracle@oracle ~<span class="token punctuation">]</span>$ <span class="token function">cp</span> -R /home/software/database/response/ <span class="token builtin class-name">.</span><span class="token punctuation">[</span>oracle@oracle ~<span class="token punctuation">]</span>$ <span class="token builtin class-name">cd</span> response/<span class="token punctuation">[</span>oracle@oracle response<span class="token punctuation">]</span>$ <span class="token function">vim</span> db_install.rsp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>需要设置的选项如下：</p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">oracle.install.option&#x3D;INSTALL_DB_SWONLYORACLE_HOSTNAME&#x3D;CentOS           #使用hostname指令即可查看hostname名UNIX_GROUP_NAME&#x3D;oinstallINVENTORY_LOCATION&#x3D;&#x2F;data&#x2F;oracle&#x2F;inventorySELECTED_LANGUAGES&#x3D;en,zh_CNORACLE_HOME&#x3D;&#x2F;data&#x2F;oracle&#x2F;product&#x2F;11.2.0ORACLE_BASE&#x3D;&#x2F;data&#x2F;oracleoracle.install.db.InstallEdition&#x3D;EEoracle.install.db.DBA_GROUP&#x3D;dbaoracle.install.db.OPER_GROUP&#x3D;dbaDECLINE_SECURITY_UPDATES&#x3D;true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="12-根据响应文件静默安装Oracle11g"><a href="#12-根据响应文件静默安装Oracle11g" class="headerlink" title="12. 根据响应文件静默安装Oracle11g"></a>12. 根据响应文件静默安装Oracle11g</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>oracle@oracle response<span class="token punctuation">]</span>$ <span class="token builtin class-name">cd</span> /home/software/database/<span class="token punctuation">[</span>oracle@oracle database<span class="token punctuation">]</span>$ ./runInstaller -silent -responseFile /home/oracle/response/db_install.rsp -ignorePrereq<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果执行以上命令出错，会提示有参数格式，按照提示参数格式修改修改即可，一般是由于word中的字体、符号格式复制到客户端命令行后不一致引起，修改即可。</p><p>开始Oracle在后台静默安装。安装过程中，如果提示[WARNING]不必理会，此时安装程序仍在后台进行，如果出现Successfully Setup Software，则安装程序已经停止了。</p><p>可以在以下位置找到本次安装会话的日志:/data/oracle/inventory/logs/installActions2022-08-16_01-56-42PM.log</p><p>可以切换终端执行top命令查看后台进程一直是在安装的，/data目录也在不断增大，</p><p>当出现以下提示时，代表安装成功：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>oracle@oracle database<span class="token punctuation">]</span>$ ./runInstaller -silent -responseFile /home/oracle/response/db_install.rsp -ignorePrereqStarting Oracle Universal Installer<span class="token punctuation">..</span>.Checking Temp space: must be greater than <span class="token number">120</span> MB.   Actual <span class="token number">279616</span> MB    PassedChecking swap space: must be greater than <span class="token number">150</span> MB.   Actual <span class="token number">15257</span> MB    PassedPreparing to launch Oracle Universal Installer from /tmp/OraInstall2022-08-16_01-56-42PM. Please <span class="token function">wait</span> <span class="token punctuation">..</span>.<span class="token punctuation">[</span>oracle@oracle database<span class="token punctuation">]</span>$ <span class="token punctuation">[</span>WARNING<span class="token punctuation">]</span> <span class="token punctuation">[</span>INS-32016<span class="token punctuation">]</span> The selected Oracle home contains directories or files.   CAUSE: The selected Oracle home contained directories or files.   ACTION: To start with an empty Oracle home, either remove its contents or choose another location.<span class="token punctuation">[</span>WARNING<span class="token punctuation">]</span> <span class="token punctuation">[</span>INS-32055<span class="token punctuation">]</span> The Central Inventory is located <span class="token keyword">in</span> the Oracle base.   CAUSE: The Central Inventory is located <span class="token keyword">in</span> the Oracle base.   ACTION: Oracle recommends placing this Central Inventory <span class="token keyword">in</span> a location outside the Oracle base directory.<span class="token punctuation">[</span>WARNING<span class="token punctuation">]</span> <span class="token punctuation">[</span>INS-32016<span class="token punctuation">]</span> The selected Oracle home contains directories or files.   CAUSE: The selected Oracle home contained directories or files.   ACTION: To start with an empty Oracle home, either remove its contents or choose another location.<span class="token punctuation">[</span>WARNING<span class="token punctuation">]</span> <span class="token punctuation">[</span>INS-32055<span class="token punctuation">]</span> The Central Inventory is located <span class="token keyword">in</span> the Oracle base.   CAUSE: The Central Inventory is located <span class="token keyword">in</span> the Oracle base.   ACTION: Oracle recommends placing this Central Inventory <span class="token keyword">in</span> a location outside the Oracle base directory.You can <span class="token function">find</span> the log of this <span class="token function">install</span> session at: /data/oracle/inventory/logs/installActions2022-08-16_01-56-42PM.logThe following configuration scripts need to be executed as the <span class="token string">"root"</span> user.  <span class="token comment">#!/bin/sh </span> <span class="token comment">#Root scripts to run</span>/data/oracle/inventory/orainstRoot.sh/data/oracle/product/11.2.0/root.shTo execute the configuration scripts:         <span class="token number">1</span>. Open a terminal window          <span class="token number">2</span>. Log <span class="token keyword">in</span> as <span class="token string">"root"</span>          <span class="token number">3</span>. Run the scripts          <span class="token number">4</span>. Return to this window and hit <span class="token string">"Enter"</span> key to <span class="token builtin class-name">continue</span> Successfully Setup Software.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Successfully Setup Software.就是安装成功！</p><p>按照要求执行脚本。</p><p>打开终端，退出到root身份登录，执行脚本：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>oracle@oracle database<span class="token punctuation">]</span>$ <span class="token builtin class-name">exit</span><span class="token builtin class-name">logout</span><span class="token punctuation">[</span>root@oracle ~<span class="token punctuation">]</span><span class="token comment"># sh /data/oracle/inventory/orainstRoot.sh</span>Changing permissions of /data/oracle/inventory.Adding read,write permissions <span class="token keyword">for</span> group.Removing read,write,execute permissions <span class="token keyword">for</span> world.Changing groupname of /data/oracle/inventory to oinstall.The execution of the script is complete.<span class="token punctuation">[</span>root@oracle ~<span class="token punctuation">]</span><span class="token comment"># sh /data/oracle/product/11.2.0/root.sh</span>Check /data/oracle/product/11.2.0/install/root_CentOS_2022-08-16_14-07-03.log <span class="token keyword">for</span> the output of root script<span class="token punctuation">[</span>root@oracle ~<span class="token punctuation">]</span><span class="token comment"># </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="13-以静默方式配置监听"><a href="#13-以静默方式配置监听" class="headerlink" title="13. 以静默方式配置监听"></a>13. 以静默方式配置监听</h3><p>重新使用oracle用户登录：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@oracle ~<span class="token punctuation">]</span><span class="token comment"># su -l oracle</span>Last login: Tue Aug <span class="token number">16</span> <span class="token number">13</span>:56:11 CST <span class="token number">2022</span> on pts/3<span class="token punctuation">[</span>oracle@oracle ~<span class="token punctuation">]</span>$ netca /silent /responseFile /home/oracle/response/netca.rspParsing <span class="token builtin class-name">command</span> line arguments:    Parameter <span class="token string">"silent"</span> <span class="token operator">=</span> <span class="token boolean">true</span>    Parameter <span class="token string">"responsefile"</span> <span class="token operator">=</span> /home/oracle/response/netca.rspDone parsing <span class="token builtin class-name">command</span> line arguments.Oracle Net Services Configuration:Profile configuration complete.Oracle Net Listener Startup:    Running Listener Control:       /data/oracle/product/11.2.0/bin/lsnrctl start LISTENER    Listener Control complete.    Listener started successfully.Listener configuration complete.Oracle Net Services configuration successful. The <span class="token builtin class-name">exit</span> code is <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意此处，必须使用/silent /responseFile格式，而不是-silent -responseFile，因为是静默安装。</p><p>成功运行后，在/data/oracle/product/11.2.0/network/admin中生成listener.ora和sqlnet.ora</p><p>通过netstat命令可以查看1521端口正在监听。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>oracle@oracle ~<span class="token punctuation">]</span>$ <span class="token function">netstat</span> -tnulp <span class="token operator">|</span> <span class="token function">grep</span> <span class="token number">1521</span><span class="token punctuation">(</span>Not all processes could be identified, non-owned process info will not be shown, you would have to be root to see it all.<span class="token punctuation">)</span>tcp6       <span class="token number">0</span>      <span class="token number">0</span> :::1521                 :::*                    LISTEN      <span class="token number">29783</span>/tnslsnr<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>没有这个工具可以安装</p><p>Yum安装netstat软件，软件包是在net-tools中。</p><blockquote><p>[root@oracle/]# yum install net-tools</p></blockquote><blockquote><p>[root@oracle/]# yum install net-tools</p></blockquote><h3 id="14-以静默方式建立新库，同时也建立一个对应的实例"><a href="#14-以静默方式建立新库，同时也建立一个对应的实例" class="headerlink" title="14. 以静默方式建立新库，同时也建立一个对应的实例"></a>14. 以静默方式建立新库，同时也建立一个对应的实例</h3><blockquote><p>[oracle@oracle~]$ vim /home/oracle/response/dbca.rsp</p></blockquote><p>修改文件中以下参数：</p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">[GENERAL]# oracle版本，不能更改RESPONSEFILE_VERSION &#x3D; &quot;11.2.0&quot;# Description   : Type of operationOPERATION_TYPE &#x3D; &quot;createDatabase&quot;[CREATEDATABASE]# Description   : Global database name of the database# 全局数据库的名字&#x3D;SID+主机域名# 第三方工具链接数据库的时候使用的service名称GDBNAME &#x3D; &quot;orcl.test&quot;# Description   : System identifier (SID) of the database# 对应的实例名字SID &#x3D; &quot;orcl&quot;# Description   : Name of the template# 建库用的模板文件TEMPLATENAME &#x3D; &quot;General_Purpose.dbc&quot;# Description   : Password for SYS user# SYS管理员密码SYSPASSWORD &#x3D; &quot;123456&quot;# Description   : Password for SYSTEM user# SYSTEM管理员密码SYSTEMPASSWORD &#x3D; &quot;123456&quot;# Description   : Password for SYSMAN user# SYSMAN管理员密码SYSMANPASSWORD &#x3D; &quot;123456&quot;# Description   : Password for DBSNMP user# DBSNMP管理员密码DBSNMPPASSWORD &#x3D; &quot;123456&quot;# Description   : Location of the data file&#39;s# 数据文件存放目录DATAFILEDESTINATION &#x3D;&#x2F;data&#x2F;oracle&#x2F;oradata# Description   : Location of the data file&#39;s# 恢复数据存放目录RECOVERYAREADESTINATION&#x3D;&#x2F;data&#x2F;oracle&#x2F;fast_recovery_area# Description   : Character set of the database# 字符集，重要!!! 建库后一般不能更改，所以建库前要确定清楚。# (CHARACTERSET &#x3D; &quot;AL32UTF8&quot; NATIONALCHARACTERSET&#x3D; &quot;UTF8&quot;)CHARACTERSET &#x3D; &quot;ZHS16GBK&quot;# Description   : total memory in MB to allocate to Oracle# oracle内存1638MB,物理内存2G*80%TOTALMEMORY &#x3D; &quot;1638&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>进行静默配置：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>oracle@oracle ~<span class="token punctuation">]</span>$ dbca -silent -responseFile /home/oracle/response/dbca.rspCopying database files<span class="token number">1</span>% complete<span class="token number">3</span>% complete<span class="token number">11</span>% complete<span class="token number">18</span>% complete<span class="token number">26</span>% complete<span class="token number">37</span>% completeCreating and starting Oracle instance<span class="token number">40</span>% complete<span class="token number">45</span>% complete<span class="token number">50</span>% complete<span class="token number">55</span>% complete<span class="token number">56</span>% complete<span class="token number">60</span>% complete<span class="token number">62</span>% completeCompleting Database Creation<span class="token number">66</span>% complete<span class="token number">70</span>% complete<span class="token number">73</span>% complete<span class="token number">85</span>% complete<span class="token number">96</span>% complete<span class="token number">100</span>% completeLook at the log <span class="token function">file</span> <span class="token string">"/data/oracle/cfgtoollogs/dbca/orcl/orcl.log"</span> <span class="token keyword">for</span> further details.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>建库后进行实例进程检查：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>oracle@oracle ~<span class="token punctuation">]</span>$ <span class="token function">ps</span> -ef <span class="token operator">|</span> <span class="token function">grep</span> ora_ <span class="token operator">|</span> <span class="token function">grep</span> -v <span class="token function">grep</span>oracle   <span class="token number">31249</span>     <span class="token number">1</span>  <span class="token number">0</span> <span class="token number">14</span>:23 ?        00:00:00 ora_pmon_orcloracle   <span class="token number">31251</span>     <span class="token number">1</span>  <span class="token number">0</span> <span class="token number">14</span>:23 ?        00:00:00 ora_vktm_orcloracle   <span class="token number">31255</span>     <span class="token number">1</span>  <span class="token number">0</span> <span class="token number">14</span>:23 ?        00:00:00 ora_gen0_orcloracle   <span class="token number">31257</span>     <span class="token number">1</span>  <span class="token number">0</span> <span class="token number">14</span>:23 ?        00:00:00 ora_diag_orcloracle   <span class="token number">31259</span>     <span class="token number">1</span>  <span class="token number">0</span> <span class="token number">14</span>:23 ?        00:00:00 ora_dbrm_orcloracle   <span class="token number">31261</span>     <span class="token number">1</span>  <span class="token number">0</span> <span class="token number">14</span>:23 ?        00:00:00 ora_psp0_orcloracle   <span class="token number">31263</span>     <span class="token number">1</span>  <span class="token number">0</span> <span class="token number">14</span>:23 ?        00:00:00 ora_dia0_orcloracle   <span class="token number">31265</span>     <span class="token number">1</span>  <span class="token number">0</span> <span class="token number">14</span>:23 ?        00:00:00 ora_mman_orcloracle   <span class="token number">31267</span>     <span class="token number">1</span>  <span class="token number">0</span> <span class="token number">14</span>:23 ?        00:00:00 ora_dbw0_orcloracle   <span class="token number">31269</span>     <span class="token number">1</span>  <span class="token number">0</span> <span class="token number">14</span>:23 ?        00:00:00 ora_lgwr_orcloracle   <span class="token number">31271</span>     <span class="token number">1</span>  <span class="token number">0</span> <span class="token number">14</span>:23 ?        00:00:00 ora_ckpt_orcloracle   <span class="token number">31273</span>     <span class="token number">1</span>  <span class="token number">0</span> <span class="token number">14</span>:23 ?        00:00:00 ora_smon_orcloracle   <span class="token number">31275</span>     <span class="token number">1</span>  <span class="token number">0</span> <span class="token number">14</span>:23 ?        00:00:00 ora_reco_orcloracle   <span class="token number">31277</span>     <span class="token number">1</span>  <span class="token number">0</span> <span class="token number">14</span>:23 ?        00:00:00 ora_mmon_orcloracle   <span class="token number">31279</span>     <span class="token number">1</span>  <span class="token number">0</span> <span class="token number">14</span>:23 ?        00:00:00 ora_mmnl_orcloracle   <span class="token number">31281</span>     <span class="token number">1</span>  <span class="token number">0</span> <span class="token number">14</span>:23 ?        00:00:00 ora_d000_orcloracle   <span class="token number">31283</span>     <span class="token number">1</span>  <span class="token number">0</span> <span class="token number">14</span>:23 ?        00:00:00 ora_s000_orcloracle   <span class="token number">31329</span>     <span class="token number">1</span>  <span class="token number">0</span> <span class="token number">14</span>:23 ?        00:00:00 ora_qmnc_orcloracle   <span class="token number">31345</span>     <span class="token number">1</span>  <span class="token number">0</span> <span class="token number">14</span>:23 ?        00:00:00 ora_cjq0_orcloracle   <span class="token number">31363</span>     <span class="token number">1</span>  <span class="token number">0</span> <span class="token number">14</span>:23 ?        00:00:00 ora_q000_orcloracle   <span class="token number">31365</span>     <span class="token number">1</span>  <span class="token number">0</span> <span class="token number">14</span>:23 ?        00:00:00 ora_q001_orcl<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看监听状态：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">lsnrctl statusLSNRCTL <span class="token keyword">for</span> Linux: Version <span class="token number">11.2</span>.0.1.0 - Production on <span class="token number">16</span>-AUG-2022 <span class="token number">14</span>:25:52Copyright <span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token number">1991</span>, <span class="token number">2009</span>, Oracle.  All rights reserved.Connecting to <span class="token punctuation">(</span>DESCRIPTION<span class="token operator">=</span><span class="token punctuation">(</span>ADDRESS<span class="token operator">=</span><span class="token punctuation">(</span>PROTOCOL<span class="token operator">=</span>IPC<span class="token punctuation">)</span><span class="token punctuation">(</span>KEY<span class="token operator">=</span>EXTPROC1521<span class="token punctuation">))</span><span class="token punctuation">)</span>STATUS of the LISTENER------------------------Alias                     LISTENERVersion                   TNSLSNR <span class="token keyword">for</span> Linux: Version <span class="token number">11.2</span>.0.1.0 - ProductionStart Date                <span class="token number">16</span>-AUG-2022 <span class="token number">14</span>:08:25Uptime                    <span class="token number">0</span> days <span class="token number">0</span> hr. <span class="token number">17</span> min. <span class="token number">26</span> secTrace Level               offSecurity                  ON: Local OS AuthenticationSNMP                      OFFListener Parameter File   /data/oracle/product/11.2.0/network/admin/listener.oraListener Log File         /data/oracle/diag/tnslsnr/oracle/listener/alert/log.xmlListening Endpoints Summary<span class="token punctuation">..</span>.  <span class="token punctuation">(</span>DESCRIPTION<span class="token operator">=</span><span class="token punctuation">(</span>ADDRESS<span class="token operator">=</span><span class="token punctuation">(</span>PROTOCOL<span class="token operator">=</span>ipc<span class="token punctuation">)</span><span class="token punctuation">(</span>KEY<span class="token operator">=</span>EXTPROC1521<span class="token punctuation">))</span><span class="token punctuation">)</span>  <span class="token punctuation">(</span>DESCRIPTION<span class="token operator">=</span><span class="token punctuation">(</span>ADDRESS<span class="token operator">=</span><span class="token punctuation">(</span>PROTOCOL<span class="token operator">=</span>tcp<span class="token punctuation">)</span><span class="token punctuation">(</span>HOST<span class="token operator">=</span>CentOS<span class="token punctuation">)</span><span class="token punctuation">(</span>PORT<span class="token operator">=</span><span class="token number">1521</span><span class="token punctuation">))</span><span class="token punctuation">)</span>Services Summary<span class="token punctuation">..</span>.Service <span class="token string">"orcl.test"</span> has <span class="token number">1</span> instance<span class="token punctuation">(</span>s<span class="token punctuation">)</span>.  Instance <span class="token string">"orcl"</span>, status READY, has <span class="token number">1</span> handler<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token keyword">for</span> this service<span class="token punctuation">..</span>.Service <span class="token string">"orclXDB.test"</span> has <span class="token number">1</span> instance<span class="token punctuation">(</span>s<span class="token punctuation">)</span>.  Instance <span class="token string">"orcl"</span>, status READY, has <span class="token number">1</span> handler<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token keyword">for</span> this service<span class="token punctuation">..</span>.The <span class="token builtin class-name">command</span> completed successfully<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>数据库创建完成。</p><p>有关详细信息, 请查看以下位置的日志文件: /data/oracle/cfgtoollogs/dbca/orcl/orcl.log。</p><p>数据库信息:</p><ul><li><p>全局数据库名:orcl.test</p></li><li><p>系统标识符 (SID):orcl</p></li></ul><p>登录查看实例状态：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>oracle@oracle ~<span class="token punctuation">]</span>$ sqlplus / as sysdbaSQL*Plus: Release <span class="token number">11.2</span>.0.1.0 Production on Tue Aug <span class="token number">16</span> <span class="token number">14</span>:26:48 <span class="token number">2022</span>Copyright <span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token number">1982</span>, <span class="token number">2009</span>, Oracle.  All rights reserved.Connected to:Oracle Database 11g Enterprise Edition Release <span class="token number">11.2</span>.0.1.0 - 64bit ProductionWith the Partitioning, OLAP, Data Mining and Real Application Testing optionsSQL<span class="token operator">></span> <span class="token keyword">select</span> status from <span class="token function">v</span><span class="token variable">$instance</span><span class="token punctuation">;</span>STATUS------------OPEN<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、创建用户实例"><a href="#二、创建用户实例" class="headerlink" title="二、创建用户实例"></a>二、创建用户实例</h2><h3 id="1-创建用户"><a href="#1-创建用户" class="headerlink" title="1. 创建用户"></a>1. 创建用户</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@oracle ~<span class="token punctuation">]</span>$ <span class="token function">su</span> -l oracle<span class="token punctuation">[</span>oracle@oracle ~<span class="token punctuation">]</span>$ sqlplus / as sysdb<span class="token comment">#创建用户及密码</span>SQL<span class="token operator">></span> create <span class="token environment constant">USER</span> <span class="token builtin class-name">test</span> IDENTIFIED BY <span class="token number">123456</span><span class="token punctuation">;</span>User created.<span class="token comment">#授予会话权限</span>SQL<span class="token operator">></span> grant create session to <span class="token builtin class-name">test</span><span class="token punctuation">;</span>Grant succeeded.<span class="token comment">#授予dba权限</span>SQL<span class="token operator">></span> grant dba to same_business<span class="token punctuation">;</span>Grant succeeded.<span class="token comment">#测试登录</span>SQL<span class="token operator">></span> connect test/123456<span class="token punctuation">;</span>Connected.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-额外补充"><a href="#2-额外补充" class="headerlink" title="2. 额外补充"></a>2. 额外补充</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment">#用户解锁</span>SQL<span class="token operator">></span> alter user <span class="token builtin class-name">test</span> account unlock<span class="token punctuation">;</span><span class="token comment">#用户上锁</span>SQL<span class="token operator">></span> alter user <span class="token builtin class-name">test</span> account lock<span class="token punctuation">;</span><span class="token comment">#删除用户</span>SQL<span class="token operator">></span> drop user <span class="token builtin class-name">test</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、配置远程连接监听器"><a href="#三、配置远程连接监听器" class="headerlink" title="三、配置远程连接监听器"></a>三、配置远程连接监听器</h2><h3 id="1-进入-network-admin"><a href="#1-进入-network-admin" class="headerlink" title="1. 进入/network/admin"></a>1. 进入/network/admin</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>oracle@oracle ~<span class="token punctuation">]</span>$ <span class="token builtin class-name">cd</span> /data/oracle/product/11.2.0/network/admin/<span class="token punctuation">[</span>oracle@oracle admin<span class="token punctuation">]</span>$ lltotal <span class="token number">16</span>-rw-r--r-- <span class="token number">1</span> oracle oinstall <span class="token number">365</span> Aug <span class="token number">16</span> <span class="token number">14</span>:08 listener.oradrwxr-xr-x <span class="token number">2</span> oracle oinstall  <span class="token number">64</span> Aug <span class="token number">16</span> <span class="token number">11</span>:15 samples-rw-r--r-- <span class="token number">1</span> oracle oinstall <span class="token number">187</span> May  <span class="token number">7</span>  <span class="token number">2007</span> shrept.lst-rw-r--r-- <span class="token number">1</span> oracle oinstall <span class="token number">208</span> Aug <span class="token number">16</span> <span class="token number">14</span>:08 sqlnet.ora-rw-r----- <span class="token number">1</span> oracle oinstall <span class="token number">327</span> Aug <span class="token number">16</span> <span class="token number">14</span>:23 tnsnames.ora<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-修改listener-ora-【LISTENER的host】为修改成你的ip，添加【SID-LIST-LISTENER】监听"><a href="#2-修改listener-ora-【LISTENER的host】为修改成你的ip，添加【SID-LIST-LISTENER】监听" class="headerlink" title="2.  修改listener.ora 【LISTENER的host】为修改成你的ip，添加【SID_LIST_LISTENER】监听"></a>2.  修改listener.ora 【LISTENER的host】为修改成你的ip，添加【SID_LIST_LISTENER】监听</h3><blockquote><p>[oracle@oracle admin]$ vim listener.ora</p></blockquote><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf"># listener.ora Network Configuration File: &#x2F;data&#x2F;oracle&#x2F;product&#x2F;11.2.0&#x2F;network&#x2F;admin&#x2F;listener.ora# Generated by Oracle configuration tools.LISTENER &#x3D;  (DESCRIPTION_LIST &#x3D;    (DESCRIPTION &#x3D;      (ADDRESS &#x3D; (PROTOCOL &#x3D; IPC)(KEY &#x3D; EXTPROC1521))      (ADDRESS &#x3D; (PROTOCOL &#x3D; TCP)(HOST &#x3D; 修改成你的ip)(PORT &#x3D; 1521))    )  )SID_LIST_LISTENER &#x3D;  (SID_LIST &#x3D;    (SID_DESC &#x3D;      (SID_NAME &#x3D; orcl)      (ORACLE_HOME &#x3D; &#x2F;data&#x2F;oracle&#x2F;product&#x2F;11.2.0)      (GLOBAL_HOME &#x3D; orcl)    )  )ADR_BASE_LISTENER &#x3D; &#x2F;data&#x2F;oracle<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-修改tnsnames-ora-的【ORCL的host】，修改成你的ip"><a href="#3-修改tnsnames-ora-的【ORCL的host】，修改成你的ip" class="headerlink" title="3. 修改tnsnames.ora 的【ORCL的host】，修改成你的ip"></a>3. 修改tnsnames.ora 的【ORCL的host】，修改成你的ip</h3><blockquote><p>[oracle@oracle admin]$ vim tnsnames.ora</p></blockquote><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf"># tnsnames.ora Network Configuration File: &#x2F;data&#x2F;oracle&#x2F;product&#x2F;11.2.0&#x2F;network&#x2F;admin&#x2F;tnsnames.ora# Generated by Oracle configuration tools.ORCL &#x3D;  (DESCRIPTION &#x3D;    (ADDRESS &#x3D; (PROTOCOL &#x3D; TCP)(HOST &#x3D; 修改成你的ip)(PORT &#x3D; 1521))    (CONNECT_DATA &#x3D;      (SERVER &#x3D; DEDICATED)      (SERVICE_NAME &#x3D; orcl)    )  )<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-重启监听服务"><a href="#4-重启监听服务" class="headerlink" title="4. 重启监听服务"></a>4. 重启监听服务</h3><blockquote><p>lsnrctl stop 和 lsnrctl start</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>oracle@oracle admin<span class="token punctuation">]</span>$ lsnrctl stopLSNRCTL <span class="token keyword">for</span> Linux: Version <span class="token number">11.2</span>.0.1.0 - Production on <span class="token number">16</span>-AUG-2022 <span class="token number">15</span>:14:01Copyright <span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token number">1991</span>, <span class="token number">2009</span>, Oracle.  All rights reserved.Connecting to <span class="token punctuation">(</span>DESCRIPTION<span class="token operator">=</span><span class="token punctuation">(</span>ADDRESS<span class="token operator">=</span><span class="token punctuation">(</span>PROTOCOL<span class="token operator">=</span>IPC<span class="token punctuation">)</span><span class="token punctuation">(</span>KEY<span class="token operator">=</span>EXTPROC1521<span class="token punctuation">))</span><span class="token punctuation">)</span>The <span class="token builtin class-name">command</span> completed successfully<span class="token punctuation">[</span>oracle@oracle admin<span class="token punctuation">]</span>$ lsnrctl startLSNRCTL <span class="token keyword">for</span> Linux: Version <span class="token number">11.2</span>.0.1.0 - Production on <span class="token number">16</span>-AUG-2022 <span class="token number">15</span>:14:06Copyright <span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token number">1991</span>, <span class="token number">2009</span>, Oracle.  All rights reserved.Starting /data/oracle/product/11.2.0/bin/tnslsnr: please wait<span class="token punctuation">..</span>.TNSLSNR <span class="token keyword">for</span> Linux: Version <span class="token number">11.2</span>.0.1.0 - ProductionSystem parameter <span class="token function">file</span> is /data/oracle/product/11.2.0/network/admin/listener.oraLog messages written to /data/oracle/diag/tnslsnr/oracle/listener/alert/log.xmlListening on: <span class="token punctuation">(</span>DESCRIPTION<span class="token operator">=</span><span class="token punctuation">(</span>ADDRESS<span class="token operator">=</span><span class="token punctuation">(</span>PROTOCOL<span class="token operator">=</span>ipc<span class="token punctuation">)</span><span class="token punctuation">(</span>KEY<span class="token operator">=</span>EXTPROC1521<span class="token punctuation">))</span><span class="token punctuation">)</span>Listening on: <span class="token punctuation">(</span>DESCRIPTION<span class="token operator">=</span><span class="token punctuation">(</span>ADDRESS<span class="token operator">=</span><span class="token punctuation">(</span>PROTOCOL<span class="token operator">=</span>tcp<span class="token punctuation">)</span><span class="token punctuation">(</span>HOST<span class="token operator">=</span>**你的ip**<span class="token punctuation">)</span><span class="token punctuation">(</span>PORT<span class="token operator">=</span><span class="token number">1521</span><span class="token punctuation">))</span><span class="token punctuation">)</span>Connecting to <span class="token punctuation">(</span>DESCRIPTION<span class="token operator">=</span><span class="token punctuation">(</span>ADDRESS<span class="token operator">=</span><span class="token punctuation">(</span>PROTOCOL<span class="token operator">=</span>IPC<span class="token punctuation">)</span><span class="token punctuation">(</span>KEY<span class="token operator">=</span>EXTPROC1521<span class="token punctuation">))</span><span class="token punctuation">)</span>STATUS of the LISTENER------------------------Alias                     LISTENERVersion                   TNSLSNR <span class="token keyword">for</span> Linux: Version <span class="token number">11.2</span>.0.1.0 - ProductionStart Date                <span class="token number">16</span>-AUG-2022 <span class="token number">15</span>:14:07Uptime                    <span class="token number">0</span> days <span class="token number">0</span> hr. <span class="token number">0</span> min. <span class="token number">0</span> secTrace Level               offSecurity                  ON: Local OS AuthenticationSNMP                      OFFListener Parameter File   /data/oracle/product/11.2.0/network/admin/listener.oraListener Log File         /data/oracle/diag/tnslsnr/oracle/listener/alert/log.xmlListening Endpoints Summary<span class="token punctuation">..</span>.  <span class="token punctuation">(</span>DESCRIPTION<span class="token operator">=</span><span class="token punctuation">(</span>ADDRESS<span class="token operator">=</span><span class="token punctuation">(</span>PROTOCOL<span class="token operator">=</span>ipc<span class="token punctuation">)</span><span class="token punctuation">(</span>KEY<span class="token operator">=</span>EXTPROC1521<span class="token punctuation">))</span><span class="token punctuation">)</span>  <span class="token punctuation">(</span>DESCRIPTION<span class="token operator">=</span><span class="token punctuation">(</span>ADDRESS<span class="token operator">=</span><span class="token punctuation">(</span>PROTOCOL<span class="token operator">=</span>tcp<span class="token punctuation">)</span><span class="token punctuation">(</span>HOST<span class="token operator">=</span>**你的ip**<span class="token punctuation">)</span><span class="token punctuation">(</span>PORT<span class="token operator">=</span><span class="token number">1521</span><span class="token punctuation">))</span><span class="token punctuation">)</span>Services Summary<span class="token punctuation">..</span>.Service <span class="token string">"orcl"</span> has <span class="token number">1</span> instance<span class="token punctuation">(</span>s<span class="token punctuation">)</span>.  Instance <span class="token string">"orcl"</span>, status UNKNOWN, has <span class="token number">1</span> handler<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token keyword">for</span> this service<span class="token punctuation">..</span>.The <span class="token builtin class-name">command</span> completed successfully<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、命令行模式静默删除"><a href="#四、命令行模式静默删除" class="headerlink" title="四、命令行模式静默删除"></a>四、命令行模式静默删除</h2><h3 id="1-首先查看dbca的帮助信息"><a href="#1-首先查看dbca的帮助信息" class="headerlink" title="1. 首先查看dbca的帮助信息"></a>1. 首先查看dbca的帮助信息</h3><blockquote><p>dbca -help</p></blockquote><p>修改/home/oracle/response/dbca.rsp文件里以下几个参数，下面三个参数根据建库实际情况进行修改：</p><p>OPERATION_TYPE = “deleteDatabase”</p><p>SOURCEDB = “orcl”</p><p>SYSDBAUSERNAME = “sys”</p><p>SYSDBAPASSWORD = “123456”</p><h3 id="2-运行指令"><a href="#2-运行指令" class="headerlink" title="2. 运行指令"></a>2. 运行指令</h3><blockquote><p>dbca -silent -responseFile /home/oracle/response/dbca.rsp</p></blockquote><p>各参数含义如下:</p><p>-silent 表示以静默方式删除</p><p>-responseFile 表示使用哪个响应文件,必需使用绝对路径</p><p>RESPONSEFILE_VERSION 响应文件模板的版本,该参数不要更改</p><p>OPERATION_TYPE 安装类型，该参数不要更改</p><p>SOURCEDB 数据库名，不是全局数据库名,即不包含db_domain</p><p><strong>很简单数据库卸载完成了，请注意，只是数据库卸载完了，数据库软件还是在的。</strong></p><h3 id="3-使用DBCA卸载数据库"><a href="#3-使用DBCA卸载数据库" class="headerlink" title="3. 使用DBCA卸载数据库"></a>3. 使用DBCA卸载数据库</h3><blockquote><p>dbca -silent -delete Database -responseFile dbca.rsp</p></blockquote><ul><li><p>选项-silent表示静默安装，免安装交互，大部分安装信息也不输出</p></li><li><p>选项-responseFile指定应答文件，要求用绝对路径</p></li></ul><h2 id="遇到问题"><a href="#遇到问题" class="headerlink" title="遇到问题"></a>遇到问题</h2><ul><li>invalid entry CRC (expected * but *) 这个问题大部分是安装包有问题</li></ul><p>以上就是安装oracle的全部教程了！！喜欢的话留个赞~ </p>]]></content>
      
      
      
        <tags>
            
            <tag> Oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jwt的签名算法</title>
      <link href="/blog/2022/08/12/java-jwt/"/>
      <url>/blog/2022/08/12/java-jwt/</url>
      
        <content type="html"><![CDATA[<h1 id="jwt的签名算法"><a href="#jwt的签名算法" class="headerlink" title="jwt的签名算法"></a>jwt的签名算法</h1><h2 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a>一、背景</h2><p>JWT（Json Web Token，RFC 7519）是常用的轻量级授权认证手段，常用于Web服务校验客户端身份。JWT分为三部分：</p><ul><li>Header：头部，明文，比如密钥IDkid、或者签名算法alg等等</li><li>Payload：内容，明文，包含了业务的信息，比如可以加入一些不敏感的clientId等字段</li><li>Signature：签名，利用“加密算法”对JWT进行签名，保证没有被篡改过</li></ul><p>值得注意的是，这里的数据都是明文的，算法实际上执行的是最后的数据签名功能，只能保证“不被篡改”，而不是保证“不被解密”，所以后面看到“加密、解密”，其实都是为签名服务的。</p><h3 id="签名"><a href="#签名" class="headerlink" title="签名"></a>签名</h3><p>例如，一个完整的JWT形式是”Header.Payload.Signature”，中间用英文句号的“.”连接起来，如果选择的算法为HS256，那么会将前面的部分进行Base64编码之后，用密钥进行哈希签名，用表达式就是：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">HMACSHA256</span><span class="token punctuation">(</span><span class="token function">base64UrlEncode</span><span class="token punctuation">(</span>header<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span><span class="token function">base64UrlEncode</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">,</span> secret<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>如何验证JWT的有效性呢，比较重要的方法就是验证是否被篡改，当JWT传给服务器之后，服务器用Header和Payload再次执行一次签名，然后比对本次计算得出的签名和JWT传过来的签名是否一致，就可以验证是否被篡改。另外还有一些对“过期时间”之类的校验，这些属于JWT的机制，和签名算法无关。</p><h2 id="二、组件支持的加密方式"><a href="#二、组件支持的加密方式" class="headerlink" title="二、组件支持的加密方式"></a>二、组件支持的加密方式</h2><p>利用官方 （<a href="https://jwt.io/%EF%BC%89">https://jwt.io/）</a> 推荐的java库，我们使用了 <a href="https://github.com/auth0/java-jwt">com.auth0</a> 的JWT组件：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.auth0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>java-jwt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.4.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>com.auth0</strong> 它的加密方式支持情况如下：</p><table><thead><tr><th align="left">加密方式</th><th align="left">支持情况</th><th align="left">全称</th></tr></thead><tbody><tr><td align="left">HS256</td><td align="left">✔</td><td align="left">HMAC with SHA-256</td></tr><tr><td align="left">HS384</td><td align="left">✔</td><td align="left">HMAC with SHA-384</td></tr><tr><td align="left">HS512</td><td align="left">✔</td><td align="left">HMAC with SHA-512</td></tr><tr><td align="left">PS256</td><td align="left">✖</td><td align="left">RSAPSS with SHA-256</td></tr><tr><td align="left">PS384</td><td align="left">✖</td><td align="left">RSAPSS with SHA-384</td></tr><tr><td align="left">RS256</td><td align="left">✔</td><td align="left">RSAPSS with SHA-512</td></tr><tr><td align="left">RS384</td><td align="left">✔</td><td align="left">RSASSA-PKCS1-v1_5 with SHA-256</td></tr><tr><td align="left">RS512</td><td align="left">✔</td><td align="left">RSASSA-PKCS1-v1_5 with SHA-384</td></tr><tr><td align="left">ES256</td><td align="left">✔</td><td align="left">RSASSA-PKCS1-v1_5 with SHA-512</td></tr><tr><td align="left">ES256K</td><td align="left">✔</td><td align="left">ECDSA with curve P-256 and SHA-256</td></tr><tr><td align="left">ES384</td><td align="left">✔</td><td align="left"></td></tr><tr><td align="left">ES512</td><td align="left">✔</td><td align="left">ECDSA with curve P-384 and SHA-384</td></tr><tr><td align="left">EdDSA</td><td align="left">✖</td><td align="left">Edwards-curve DSA</td></tr></tbody></table><p>另外功能性更强大的io.jsonwebtoken的jjwt</p><p><strong>jjwt</strong> 它的加密方式支持情况如下：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- token --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.jsonwebtoken<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jjwt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.9.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th align="left">加密方式</th><th align="left">支持情况</th><th align="left">全称</th></tr></thead><tbody><tr><td align="left">HS256</td><td align="left">✔</td><td align="left">HMAC with SHA-256</td></tr><tr><td align="left">HS384</td><td align="left">✔</td><td align="left">HMAC with SHA-384</td></tr><tr><td align="left">HS512</td><td align="left">✔</td><td align="left">HMAC with SHA-512</td></tr><tr><td align="left">PS256</td><td align="left">✔</td><td align="left">RSASSA-PSS using SHA-256 and MGF1 with SHA-256</td></tr><tr><td align="left">PS384</td><td align="left">✔</td><td align="left">RSASSA-PSS using SHA-384 and MGF1 with SHA-384</td></tr><tr><td align="left">PS512</td><td align="left">✔</td><td align="left">RSASSA-PSS using SHA-512 and MGF1 with SHA-512</td></tr><tr><td align="left">RS256</td><td align="left">✔</td><td align="left">RSASSA-PKCS-v1_5 using SHA-256</td></tr><tr><td align="left">RS384</td><td align="left">✔</td><td align="left">RSASSA-PKCS-v1_5 using SHA-384</td></tr><tr><td align="left">RS512</td><td align="left">✔</td><td align="left">RSASSA-PKCS-v1_5 using SHA-512</td></tr><tr><td align="left">ES256</td><td align="left">✔</td><td align="left">ECDSA using P-256 and SHA-256</td></tr><tr><td align="left">ES384</td><td align="left">✔</td><td align="left">ECDSA using P-384 and SHA-384</td></tr><tr><td align="left">ES512</td><td align="left">✔</td><td align="left">ECDSA using P-512 and SHA-512</td></tr><tr><td align="left">EdDSA</td><td align="left">✖</td><td align="left">Edwards-curve DSA</td></tr></tbody></table><p>有关具体选择什么组件，其实国内常见的就是上面的com.auth0，和 <a href="https://github.com/jwtk/jjwt">jwtk/jjwt</a> 两种，当然也有博主推荐其他的组件，这些组件都大同小异，jjwt支持的加密算法更多一些，但是jwtk是一个个人账号，且contributor不多；而com.auth0是一个公司，相对而言我会倾向于能够盈利的公司，因为他们有能力提供长期开源支持。至于组件性能方面暂未测试，是马上要着手研究的方向。</p><h2 id="三、算法加密方式简介"><a href="#三、算法加密方式简介" class="headerlink" title="三、算法加密方式简介"></a>三、算法加密方式简介</h2><p>在比较签名算法之前，需要先了解一下原理，对算法有基本认知，便于测试预期。</p><h3 id="3-1-SHA简介"><a href="#3-1-SHA简介" class="headerlink" title="3.1 SHA简介"></a>3.1 SHA简介</h3><p>SHA-2是一种散列算法（哈希函数），细分了6个算法标准，SHA-224、SHA-256、SHA-384、SHA-512、SHA-512/224、SHA-512/256，他们的差异大概是一些生成摘要长度、循环运行次数等。 </p><h3 id="3-2-HMAC简介"><a href="#3-2-HMAC简介" class="headerlink" title="3.2 HMAC简介"></a>3.2 HMAC简介</h3><p>HMAC（Hash-based Message Authentication Code）是对称加密，加密和解密用的是相同的密钥，主要用于消息防篡改，哈希算法可以选择md5、sha1、sha2（sha256，sha385，sha512）。 </p><p><img src="jwt-1.png" alt="jwt-1"></p><ul><li>如果密钥比分组长度短，则末尾填充0直到达到分组长度；如果密钥比分组长度还长，则会用哈希计算出密钥的散列值，然后让这个散列值作为HMAC的密钥，散列长度一般仍然小于分组长度，所以散列之后仍然要填充0。 </li><li>如果是SHA-1或SHA-256，则分组长度为64；如果是SHA-384和SHA-512。 </li><li>密钥长度如果小于哈希输出数据字长（SHA-256输出256位，所以为32，384为48，512为64），则加密效果不佳，如果超出这个长度，并不能带来显著的安全强度提升。 </li></ul><p>另外，从官方jwt.io的网页推荐可以看出，也是希望使用和哈希函数匹配的长度（your-256-bit-secret）：</p><p><img src="jwt-2.png" alt="jwt-2"></p><h3 id="3-3-RSA相关简介"><a href="#3-3-RSA相关简介" class="headerlink" title="3.3 RSA相关简介"></a>3.3 RSA相关简介</h3><p>RSA是非对称加密，算法运行较慢。RSA没有加入随机数，因此如果攻击者遍历猜测所有的原文，可以通过对比相同的加密密文选择出真实原文，为了防止这种情况，RSA加入了padding机制，对数据进行填充。 </p><p><img src="jwt-3.png" alt="jwt-3"></p><p><img src="jwt-4.png" alt="jwt-4"></p><p>RSA主流的签名模式为RSA-PSS（Probabilistic Signature Scheme）和RSA-PCKS#1_v1.5（Public Key Cryptography Standards），PSS是私钥签名的填充模式（padding mode），相对而言这种方式更加安全，openssl-1.1.x以后（server key exchange阶段）默认使用PSS填充。 </p><p>发送方加密并不是对数据直接进行加密，而是通过SHA等散列函数对数据内容进行哈希之后，再对这个哈希值用公钥进行加密。接收方同样对内容计算SHA散列函数哈希值，然后用私钥解开加密的哈希值，比对两个哈希值是否一致，如果一致则说明数据内容没有被篡改过。 </p><p>如果业务上面只是自己签发自己验证JWT，公钥私钥都存放在同一个地方，从便利性角度而言和HMAC没有差异。</p><p>RSA有个选项是“密钥位数”，有512、1024、2048、4096等，尽管公私钥都是存在服务器的，但为了防止暴力猜测破解，仍然使用1024位以上比较安全。 </p><h3 id="3-4-ECDSA"><a href="#3-4-ECDSA" class="headerlink" title="3.4 ECDSA"></a>3.4 ECDSA</h3><p>ECDSA（Elliptic Curve Digital Signature Algorithm，椭圆曲线数字签名算法）常常被用于比特币等区块链项目。防破解程度高，且计算比RSA更快。RSA是基于大数分解的原理，而ECDSA基于离散对数原理，没有亚指数时间的解决方法，因此强度更高。 </p><p><img src="jwt-5.jpeg" alt="jwt-5"></p><p>我们定义一个椭圆曲线的数学方程，所有的数字都规定只能使用整数：</p><p><img src="jwt-6.png" alt="jwt-6"></p><p>x只能是整数，y关于x轴对称，p是一个素数且确保所有数值都在160位之内，y^2取值范围在0~p-1之间共p个可能值（由于y也必须是整数，所以只有部分能够取到）。整数限制和mod限制，使得这条曲线上只能够有有限的N个点（x，y坐标对）。 椭圆曲线的参数都是公开的，私钥是一个随机数，公钥是将原点G与私钥相乘后曲线上的一个点P。校验方式仍然是通过计算内容的SHA哈希，然后利用“椭圆曲线点乘法”，计算出相关的参数进行比对。只要初始随机数k是随机的，那么ECDSA在普通时间是无法被攻击者破解的。</p><p>这部分的内容我能够理解它的目的，但实际上并没有完全地看懂为什么，以后有机会一定要研究透彻，因为椭圆曲线其实是现在常用的算法了。相关资料贴一下：<a href="https://zhuanlan.zhihu.com/p/97953640">《一文读懂ECDSA算法如何保护数据》</a></p><p>有几个问题值得注意：</p><ul><li>jdk1.7才开始内置SCDSA的支持（<a href="https://docs.oracle.com/javase/7/docs/technotes/guides/security/p11guide.html#ALG%EF%BC%89%E3%80%82">https://docs.oracle.com/javase/7/docs/technotes/guides/security/p11guide.html#ALG）。</a></li><li>椭圆曲线的选择十分重要，好的椭圆曲线可以提升性能等。普通的ECDSA使用p-256曲线，ES256K是指区块链常用的secp256k1曲线（在一些区块链文档中经常被提到，比如 <a href="https://www.doc88.com/p-8941799846501.html%EF%BC%8C%E4%BD%86%E8%B5%84%E6%96%99%E5%A4%AA%E5%B0%91%E6%9C%AA%E6%9F%A5%E8%AF%81%EF%BC%89%E3%80%82">https://www.doc88.com/p-8941799846501.html，但资料太少未查证）。</a> </li></ul><h3 id="3-5-EdDSA"><a href="#3-5-EdDSA" class="headerlink" title="3.5 EdDSA"></a>3.5 EdDSA</h3><p>区块链相关的加密算法通常采用ECDSA，但配置不好的话很容易产生安全问题，且速度仍然较慢，EdDSA（Edwards-curve Digital Signature Algorithm）是2012年提出的爱德华曲线数字签名算法，不牺牲安全性的同时提高签名、验签的速度，是目前最好的算法，但资料较少，没有搜索到原理，组件支持方面也不太好。官方的java组件全都是“支持中”的问号： </p><p><strong>？EdDsA</strong></p><p>在Go组件中也很多问号，只有2个没有太多star的组件支持了该算法。因此即使这种方式又快又好，也暂时不考虑，因为无法应用到生产中去。</p><h2 id="四、加密算法对比测试"><a href="#四、加密算法对比测试" class="headerlink" title="四、加密算法对比测试"></a>四、加密算法对比测试</h2><p>暂时不对比PS256系列算法（安全性仅仅比RSA普通padding略好）、ES256k（不常见且支持不太好），EdDSA系列算法（最新算法，没有支持的组件）。</p><h3 id="4-1-测试方法"><a href="#4-1-测试方法" class="headerlink" title="4.1 测试方法"></a>4.1 测试方法</h3><p>代码放在了：<a href="https://github.com/BEWINDOWEB/bwbscripts/tree/main/jwttest">https://github.com/BEWINDOWEB/bwbscripts/tree/main/jwttest</a></p><p>直接用Springboot打印测试的，记得在<strong>冷启动</strong>之后等待Springboot消耗的CPU<strong>稳定</strong>后再测试。</p><p>（1）使用com.auth0 java-jwt 3.4.1组件进行生成和校验。</p><p>（2）采用Prometheus采集CPU指标，通过打印内容采集时间指标，采集间隔为30秒，所以可能存在一定误差，计算CPU指标的方式为：根据打印的开始、结束时间戳，找到对应的坐标位置数据进行计算，如果坐标位置恰好处于30秒期间没有被采集，则利用两个端点的值进行加权平均计算。</p><p>（3）测试资源为1000mCPU、1G内存的K8S pod。每测试一项，就重启一次pod（模拟冷启动），避免因为GC导致占用CPU或者HotSpot导致优化而影响实验结果。每次重启完毕，等待CPU指标稳定后，再开始测试。（在pod启动之后CPU指标会上下波动，应该是在初始化处理一些什么内容，然后过4分钟左右，会有一个CPU指标突然下降的过程，下降完之后就会保持平稳了。另外不要只开1个pod等待，不然会耗费很长时间测试，可以开4个pod轮换着使用） </p><p><img src="jwt-7.png" alt="jwt-7"></p><p>（4）请求的方式为通过Sleep的pod执行curl发起携带参数的HTTP请求触发执行。</p><p>（5）内存消耗都在合理范围。</p><p>（6）间接测试指的是，按照100W请求直接测试，将会消耗掉100%的单核CPU而崩溃，因此间接以10W、50W循环次数进行测试，再乘以10、2倍数，最后取得平均值，来符合100W的循环次数。（该方法并不是严谨的方法）</p><p>（7）所有测试都是单线程循环，没有线程池。</p><p>（8）生成密钥的方式：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">// rsaopenssl genrsa -out RSA_512_pri.pem <span class="token number">512</span>openssl rsa -in RSA_512_pri.pem -out RSA_512_pub.txt -puboutopenssl genrsa -out RSA_1024_pri.pem <span class="token number">1024</span>openssl rsa -in RSA_1024_pri.pem -out RSA_1024_pub.txt -puboutopenssl genrsa -out RSA_2048_pri.pem <span class="token number">2048</span>openssl rsa -in RSA_2048_pri.pem -out RSA_2048_pub.txt -puboutopenssl pkcs8 -topk8 -inform PEM -in RSA_512_pri.pem -outform PEM -nocrypt <span class="token operator">></span> RSA_512_pri.txtopenssl pkcs8 -topk8 -inform PEM -in RSA_1024_pri.pem -outform PEM -nocrypt <span class="token operator">></span> RSA_1024_pri.txtopenssl pkcs8 -topk8 -inform PEM -in RSA_2048_pri.pem -outform PEM -nocrypt <span class="token operator">></span> RSA_2048_pri.txt // ecdsaopenssl ecparam -name prime256v1 -genkey -out ECDSA_p256_pri.pemopenssl ec -in ECDSA_p256_pri.pem -pubout -out ECDSA_p256_pub.txtopenssl pkcs8 -topk8 -inform PEM -in ECDSA_p256_pri.pem -outform PEM -nocrypt <span class="token operator">></span>ECDSA_p256_pri.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-测试结果"><a href="#4-2-测试结果" class="headerlink" title="4.2 测试结果"></a>4.2 测试结果</h3><p><img src="jwt-8.jpeg" alt="jwt-8"></p><p>4.2.1 JWT signature长度</p><p><img src="jwt-9.png" alt="jwt-9"></p><ul><li>在JWT signature长度方面，目前HS256是长度最小的（43个字符），其余的长度均比它大。</li><li>在同样的加密算法中，任意的密钥长度对signature长度没有影响。</li></ul><p>4.2.2 生成JWT速度比较</p><p><img src="jwt-10.png" alt="jwt-10"></p><ul><li>在生成JWT速度方面，HMAC &gt; RSA = ECDSA。</li><li>在同类加密算法里，SHA位数对加密算法没有太大影响；</li><li>在同类加密算法里，密钥位数的升高会导致时延升高，但也控制在1ms内，几乎可以忽略不计。</li><li>ECDSA在和同等复杂度的RSA比较时，会优于RSA一点点，但也可以忽略不计。 </li></ul><p>4.2.3 校验JWT速度</p><p><img src="jwt-11.png" alt="jwt-11"></p><ul><li>在校验JWT速度方面，HMAC &gt; RSA &gt; ECDSA。</li><li>在同类加密算法里，SHA位数对加密算法没有太大影响</li><li>在同类加密算法里，密钥位数的升高会导致时延升高，同样控制在1ms左右，几乎可以忽略不计。</li><li>RSA解密速度优于ECDSA。 </li></ul><p>4.2.4 生成JWT的CPU消耗</p><p><img src="jwt-12.png" alt="jwt-12"></p><ul><li>在生成JWT的CPU消耗方面，HMAC &lt;&lt; ECDSA &lt; RSA。</li><li>在同类加密算法里，SHA位数越高，CPU消耗越多，而且升高非常巨大。</li><li>在同类加密算法里，密钥位数的升高会导致CPU使用率升高，但变化在10%左右，不明显。 </li></ul><p>4.2.5 校验JWT的CPU消耗</p><p><img src="jwt-13.png" alt="jwt-13"></p><ul><li>在校验JWT的CPU消耗方面，HAMC &lt; RSA &lt;&lt; ECDSA</li><li>在同类加密算法里，SHA位数越高，CPU消耗越多，但变化不明显。</li><li>在同类加密算法里，密钥位数的升高会导致CPU使用率升高，但变化不明显 </li></ul><p>4.2.6 列表比较</p><table><thead><tr><th align="left">比较项</th><th align="left">考虑因素</th><th align="left">结论</th></tr></thead><tbody><tr><td align="left">签名长度</td><td align="left">使用方的内存占用</td><td align="left">HS、ES可以接受，RS过长</td></tr><tr><td align="left">生成速度</td><td align="left">频繁生成JWT的业务</td><td align="left">HS最快，RS和ES接近</td></tr><tr><td align="left">校验速度</td><td align="left">频繁校验JWT的业务</td><td align="left">HS最快，RS略慢，ES很慢</td></tr><tr><td align="left">生成CPU</td><td align="left">对CPU资源有要求</td><td align="left">HS最少，RS、ES都较多，RS略少于ES</td></tr><tr><td align="left">校验CPU</td><td align="left">对CPU资源有要求</td><td align="left">HS和RS都很少，ES较多</td></tr></tbody></table><h3 id="4-3-优缺点和适用场景"><a href="#4-3-优缺点和适用场景" class="headerlink" title="4.3 优缺点和适用场景"></a>4.3 优缺点和适用场景</h3><p>（1）HS256 / HS384 / HS512</p><p>优点：速度快、生成校验CPU少、签名位数少</p><p>缺点：对称加密，密钥泄漏影响大；不适合多服务校验场景</p><p>注意：密钥位数的提高并不能显著提高安全性。</p><p>（2）RS256 / RS384 / RS512</p><p>优点：校验速度可以接受、安全等级高、适合多服务校验场景</p><p>缺点：CPU消耗较大，生成速度较慢（但生成一般都是低频率事件），签名位数多（有嵌入式设备一定要注意了）</p><p>（3）ES256 / ES256K / ES384 / ES512</p><p>优点：安全等级高、适合多服务校验场景</p><p>缺点：CPU消耗严重（对普通应用不划算的）、生成和校验速度较慢，尤其是校验速度</p><p><strong>【推荐方案选择】</strong></p><ul><li><p>普通应用推荐使用HS，并且定期轮换密钥避免对称性加密密钥泄漏的风险；</p></li><li><p>较为复杂的应用可用RS</p></li><li><p>安全应用可用ES</p></li></ul><p>本文转载自： <a href="http://www.bewindoweb.com/301.html">http://www.bewindoweb.com/301.html | 三颗豆子</a> ，原作者允许转载。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>maven导入私有jar包</title>
      <link href="/blog/2022/08/10/maven-import-personaljar/"/>
      <url>/blog/2022/08/10/maven-import-personaljar/</url>
      
        <content type="html"><![CDATA[<h1 id="maven-导入私有jar包"><a href="#maven-导入私有jar包" class="headerlink" title="maven 导入私有jar包"></a>maven 导入私有jar包</h1><p>在开发工程中，有些jar是自己开发的，当被引用到其他工程或项目中时，需要把自己开发的jar添加到其他工程中。</p><ul><li><p>maven 导入私有jar包 以<strong>systemPath</strong>方式加载，配置<strong>resouces</strong>方式打包</p></li><li><p>打包后的lib一般在jar里面的<strong>BOOT-INF\lib</strong>下，可以自行查看自己的jar是否引入！</p></li></ul><h2 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h2><p>ojdbc6的jar包在项目根路径的<strong>lib</strong>下</p><p>在pom.xml文件中添加配置如下：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.oracle<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>ojdbc6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>11.2.0.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>system<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>systemPath</span><span class="token punctuation">></span></span>$&#123;project.basedir&#125;/lib/ojdbc6-11.2.0.1.0.jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>systemPath</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解释：</p><ul><li><p>groupId：组织名，最好与jar包内部包结构一致；</p></li><li><p>artifactId：机构名，这个最好与加载的jar(ojdbc6-11.2.0.1.0.jar)名称保持一致，我要加载的jar名称为ojdbc6-11.2.0.1.0.jar)，artifactId名称通常不加版本号，artifactId名称与加载的jar名称保持以下，因此artifactId的名称可定义为ojdbc6</p></li><li><p>version：jar版本号，最好与加载的jar保持一致，加载的jar名称为ojdbc6-11.2.0.1.0.jar，版本号为后面的数字。这个可修改，但是version不能丢失。</p></li></ul><h2 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h2><p>需要将pom资源文件引入进来</p><p>需要在pom.xml文件中添加 <strong>resources</strong> 配置如下：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 最终打包名称：rest-boot.jar --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>finalName</span><span class="token punctuation">></span></span>rest-boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>finalName</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--java文件的路径--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- &lt;filtering>false&lt;/filtering>--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/resources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--资源文件的路径--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- &lt;filtering>false&lt;/filtering>--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 加入如下配置，吧jar包以资源形式打包进指定路径 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>$&#123;project.basedir&#125;/lib<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>targetPath</span><span class="token punctuation">></span></span>BOOT-INF/lib/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>targetPath</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- spring-boot-maven-plugin (提供了直接运行项目的插件：如果是通过parent方式继承spring-boot-starter-parent则不用此插件) --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;spring-boot.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executions</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>execution</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">></span></span>repackage<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>execution</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executions</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mybatis防止sql注入原理</title>
      <link href="/blog/2022/08/09/mybatis-sql-inject/"/>
      <url>/blog/2022/08/09/mybatis-sql-inject/</url>
      
        <content type="html"><![CDATA[<h1 id="mybatis-防止sql注入原理"><a href="#mybatis-防止sql注入原理" class="headerlink" title="mybatis 防止sql注入原理"></a>mybatis 防止sql注入原理</h1><h2 id="一、SQL注入"><a href="#一、SQL注入" class="headerlink" title="一、SQL注入"></a>一、SQL注入</h2><p>​        SQL注入是在Web页面的查询入口传入SQL非法参数，在事先定义好的查询语句的结尾上添加额外的SQL语句，修改拼接成SQL语句，传递给Web服务器，进而传给数据库服务器执行，威胁数据库数据信息安全。</p><h2 id="二、SQL注入方法"><a href="#二、SQL注入方法" class="headerlink" title="二、SQL注入方法"></a>二、SQL注入方法</h2><p>​        由于编写程序时未对用户输入数据的合理性进行判断，导致攻击者能在SQL的注入点中夹杂代码进行执行，并通过页面返回的提示，获取进行下一步攻击所需的信息。根据输入的参数，可将SQL注入方式大致分为两类：数字型注入、字符型注入。</p><ul><li><strong>数字型注入</strong><br>当输入的参数为整型时，如ID、年龄、页码等，如果存在注入漏洞，则可以认为是数字型注入。这种数字型注入最多出现在ASP、PHP等弱类型语言中，弱类型语言会自动推导变量类型，例如，参数id=8，PHP会自动推导变量id的数据类型为int类型，那么id=8 and 1=1，则会推导为string类型，这是弱类型语言的特性。而对于Java、C#这类强类型语言，如果试图把一个字符串转换为int类型，则会抛出异常，无法继续执行。所以，强类型的语言很少存在数字型注入漏洞。</li><li><strong>字符型注入</strong><br>当输入参数为字符串时，称为字符型。数字型与字符型注入最大的区别在于：数字型不需要单引号闭合，而字符串类型一般要使用单引号来闭合。</li></ul><h2 id="三、mybatis中的-和-的区别"><a href="#三、mybatis中的-和-的区别" class="headerlink" title="三、mybatis中的#和$的区别"></a>三、mybatis中的#和$的区别</h2><p><strong>让我们看两个例子：</strong></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectUser<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java.util.Map<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>BaseResultMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select id, username, password from user    where username = #&#123;username,jdbcType=VARCHAR&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectUser<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java.util.Map<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>BaseResultMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select id, username, password from user    where username = $&#123;username,jdbcType=VARCHAR&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>#将传入的数据都当成一个字符串，会对自动传入的数据加一个双引号。<br>如：where username=#{username}，如果传入的值是111,那么解析成sql时的值为where username=”111”, 如果传入的值是id，则解析成的sql为where username=”id”。</li><li>$将传入的数据直接显示生成在sql中。<br>如：where username=${username}，如果传入的值是111,那么解析成sql时的值为where username=111；<br>如果传入的值是;drop table user;，则解析成的sql为：select id, username, password, role from user where username=;drop table user;</li><li>#方式能够很大程度防止sql注入，$方式无法防止Sql注入。</li><li>$方式一般用于传入数据库对象，例如传入表名。</li><li>一般能用#的就别用$，若不得不使用“${xxx}”这样的参数，要手工地做好过滤工作，来防止sql注入攻击。</li><li>在MyBatis中，“${xxx}”这样格式的参数会直接参与SQL编译，从而不能避免注入攻击。但涉及到动态表名和列名时，只能使用“${xxx}”这样的参数格式。所以，这样的参数需要我们在代码中手工进行处理来防止注入。</li></ul><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>​        在编写MyBatis的映射语句时，尽量采用“#{xxx}”这样的格式。若不得不使用“${xxx}”这样的参数，要手工地做好过滤工作，来防止SQL注入攻击。</p><h2 id="四、MyBatis如何防止SQL注入"><a href="#四、MyBatis如何防止SQL注入" class="headerlink" title="四、MyBatis如何防止SQL注入"></a>四、MyBatis如何防止SQL注入</h2><p>​        <a href="https://mybatis.github.io/mybatis-3/">MyBatis</a>框架作为一款半自动化的持久层框架，其SQL语句都要我们自己手动编写，这个时候当然需要防止SQL注入。其实，MyBatis的SQL是一个具有”<strong>输入+输出</strong>“的功能，类似于函数的结构，参考上面的两个例子。其中，parameterType表示了输入的参数类型，resultType表示了输出的参数类型。回应上文，如果我们想防止SQL注入，理所当然地要在输入参数上下功夫。</p><p>​        上面代码中使用”#{}”的即输入参数在SQL中拼接的部分，传入参数后，打印出执行的SQL语句，会看到SQL是这样的：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> id<span class="token punctuation">,</span> username<span class="token punctuation">,</span> password <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">where</span> username<span class="token operator">=</span>?<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        不管输入什么参数，打印出的SQL都是这样的。这是因为MyBatis启用了预编译功能，在SQL执行前，会先将上面的SQL发送给数据库进行编译；执行时，直接使用编译好的SQL，替换占位符“?”就可以了。因为SQL注入只能对编译过程起作用，所以这样的方式就很好地避免了SQL注入的问题。</p><h2 id="五、mybatis底层实现原理"><a href="#五、mybatis底层实现原理" class="headerlink" title="五、mybatis底层实现原理"></a>五、mybatis底层实现原理</h2><p>​        MyBatis是如何做到SQL预编译的呢？其实在框架底层，是JDBC中的PreparedStatement类在起作用，PreparedStatement是我们很熟悉的Statement的子类，它的对象包含了编译好的SQL语句。这种“准备好”的方式不仅能提高安全性，而且在多次执行同一个SQL时，能够提高效率。原因是SQL已编译好，再次执行时无需再编译。</p><ul><li>“${}”：表示拼接sql串，将接收到的参数的内容不加修饰拼接在sql中，可能引发sql注入。</li><li>“#{}”：是预编译处理，mybatis在处理“#{}”时，它会将sql中的“#{}”替换为占位符“?”，然后调用PreparedStatement的set方法来赋值。传入字符串后，会在值的两边加上单引号，使用占位符的方式提高效率，防止sql注入。</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>​        总的来说，#{}是经过预编译的，是安全的；${}是未经过预编译的，仅仅是取变量的值，是非安全的，存在SQL注入。因此在编写mybatis的映射语句时，尽量采用“#{xxx}”这样的格式。若不得不使用“${xxx}”这样的参数，要手工地做好过滤工作，来防止sql注入攻击。</p>]]></content>
      
      
      
        <tags>
            
            <tag> mybaits </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java设计模式-代理模式</title>
      <link href="/blog/2022/08/03/design-proxy/"/>
      <url>/blog/2022/08/03/design-proxy/</url>
      
        <content type="html"><![CDATA[<h1 id="Java设计模式-代理模式"><a href="#Java设计模式-代理模式" class="headerlink" title="Java设计模式-代理模式"></a>Java设计模式-代理模式</h1><h2 id="什么是代理模式"><a href="#什么是代理模式" class="headerlink" title="什么是代理模式"></a>什么是代理模式</h2><p>代理模式是通过创建一个代理对象，用这个代理对象去代表真实的对象，客户端得到这个代理对象后，对客户端并没有什么影响，就跟得到了真实对象一样来使用。</p><p>当客户端操作这个代理对象的时候，实际上功能最终还是会由真实的对象来完成，只不过是通过代理操作的，也就是客户端操作代理，代理操作真正的对象。</p><p>正是因为有代理对象夹在客户端和被代理的真实对象中间，相当于一个中转，那么在中转的时候就有很多花招可以玩，比如，判断一下权限，如果没有足够的权限那就不给你中转了，等等。</p><h2 id="代理分类"><a href="#代理分类" class="headerlink" title="代理分类"></a>代理分类</h2><p>事实上代理又被分成多种，大致有如下一些。</p><ul><li>虚代理：根据需要来创建开销很大的对象，该对象只有在需要的时候才会被真正创建。</li><li>远程代理：用来在不同的地址空间上代表同一个对象，这个不同的地址空间可以是在本机，也可以在其他机器上。在java里面最典型的就是rmi技术。</li><li>抄写代理：在客户端操作的时候，只有对象确实改变了，才会真的拷贝(或克隆)一个目标对象，算是虚代理的一个分支。</li><li>保护代理：控制对原始对象的访问，如果有需要，可以给不同的用户提供不同的访问权限，以控制他们对原始对象的访问。</li><li>缓存代理：为那些昂贵操作的结果提供临时的存储空间，以便多个客户端可以共享这些结果。</li><li>防火墙代理：保护对象不被恶意用户访问和操作。</li><li>同步代理：使多个用户能够同时访问目标对象而没有冲突。</li><li>智能指引：在访问对象时执行一些附加操作，比如，对指向实际对象的引用计数、第一次引用一个持久对象时，将它装入内存等。</li></ul><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><p>代理模式在客户和被客户访问的对象之间，引入了一定程度的间接性，客户是直接使用代理，让代理来与被访问的对象进行交互。不同的代理类型，这种附加的间接性有不同的用途，也就具有不同的特点。</p><ul><li>【远程代理】隐藏了一个对象存在于不同的地址空间的事实，也即是客户通过远程代理去访问一个对象，根本就不关心这个对象在哪里，也不关心如何通过网络去访问到这个对象。从客户的角度来讲，它只是在使用代理对象而已。</li><li>【虚代理】可以根据需要来创建“大”对象，只有到必须创建对象的时候，虚代理才会创建对象，从而大大加快程序运行速度，并节省资源。通过虚代理可以对系统进行优化。</li><li>【保护代理】可以在访问一个对象的前后，执行很多附加的操作，除了进行权限控制之外，还可以进行很多跟业务相关的处理，而不需要修改被代理的对象。也就是说，可以通过代理来给目标对象增加功能。</li><li>【智能指引】和保护代理类似，也是允许在访问一个对象的前后，执行很多附加的操作，这样一来就可以做很多额外的事情，比如，引用计数等。</li></ul><h3 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h3><p><img src="proxy-1.png" alt="proxy-1"></p><h2 id="何时使用"><a href="#何时使用" class="headerlink" title="何时使用"></a>何时使用</h2><p>建议在如下情况时选用代理模式</p><ul><li><p>需要为一个对象在不同的地址空间提供局部代表的时候，可以使用远程代理。</p></li><li><p>需要按照需要创建开销很大的对象的时候，可以使用虚代理。</p></li><li><p>需要控制对原始对象的访问的时候，可以使用保护代理。</p></li><li><p>需要在访问对象执行一些附加操作的时候，可以使用智能指引代理。</p></li></ul><h2 id="具体实现-懒加载示例"><a href="#具体实现-懒加载示例" class="headerlink" title="具体实现 - 懒加载示例"></a>具体实现 - 懒加载示例</h2><h3 id="用户类"><a href="#用户类" class="headerlink" title="用户类"></a>用户类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span></span><span class="token punctuation">;</span><span class="token comment">/** * @Author: Sam * @Date: 2022-08-03 09:53 * @Description: 用户类 */</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserModel</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> userId<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> deptId<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> sex<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="定义用户对象接口"><a href="#定义用户对象接口" class="headerlink" title="定义用户对象接口"></a>定义用户对象接口</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Author: Sam * @Date: 2022-08-03 09:51 * @Description: 定义用户对象接口 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserModelApi</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> <span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">setUserId</span><span class="token punctuation">(</span><span class="token class-name">String</span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> <span class="token function">getDeptId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">setDeptId</span><span class="token punctuation">(</span><span class="token class-name">String</span> deptId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> <span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">setSex</span><span class="token punctuation">(</span><span class="token class-name">String</span> sex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="模拟数据库用户表"><a href="#模拟数据库用户表" class="headerlink" title="模拟数据库用户表"></a>模拟数据库用户表</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span><span class="token comment">/** * @Author: Sam * @Date: 2022-08-03 10:23 * @Description: 模拟数据库用户表 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDB</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 模式数据库用户数据     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserModel</span><span class="token punctuation">></span></span> USER_DB_LIST <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">UserModel</span> u1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        u1<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span><span class="token string">"1001"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        u1<span class="token punctuation">.</span><span class="token function">setDeptId</span><span class="token punctuation">(</span><span class="token string">"100"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        u1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        u1<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span><span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        USER_DB_LIST<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>u1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">UserModel</span> u2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        u2<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span><span class="token string">"1002"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        u2<span class="token punctuation">.</span><span class="token function">setDeptId</span><span class="token punctuation">(</span><span class="token string">"100"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        u2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        u2<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span><span class="token string">"女"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        USER_DB_LIST<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>u2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">UserModel</span> u3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        u3<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span><span class="token string">"1003"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        u3<span class="token punctuation">.</span><span class="token function">setDeptId</span><span class="token punctuation">(</span><span class="token string">"200"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        u3<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"王五"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        u3<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span><span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        USER_DB_LIST<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>u3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="实现示例要求的功能"><a href="#实现示例要求的功能" class="headerlink" title="实现示例要求的功能"></a>实现示例要求的功能</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Collection</span></span><span class="token punctuation">;</span><span class="token comment">/** * @Author: Sam * @Date: 2022-08-03 09:56 * @Description: 实现示例要求的功能 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserManager</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 根据部门id查询用户信息     *     * @param deptId 部门id     * @return     */</span>    <span class="token keyword">public</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserModelApi</span><span class="token punctuation">></span></span> <span class="token function">getUserByDeptId</span><span class="token punctuation">(</span><span class="token class-name">String</span> deptId<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserModelApi</span><span class="token punctuation">></span></span> col <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//模拟请求数据库</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">UserModel</span> db <span class="token operator">:</span> <span class="token class-name">UserDB</span><span class="token punctuation">.</span>USER_DB_LIST<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>db<span class="token punctuation">.</span><span class="token function">getDeptId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>deptId<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Proxy</span> proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UserModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                proxy<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span>db<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                proxy<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>db<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                col<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>proxy<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> col<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="代理类"><a href="#代理类" class="headerlink" title="代理类"></a>代理类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Author: Sam * @Date: 2022-08-03 09:55 * @Description: 代理类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Proxy</span> <span class="token keyword">implements</span> <span class="token class-name">UserModelApi</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 被代理对象     */</span>    <span class="token keyword">private</span> <span class="token class-name">UserModel</span> realSubject <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 标识是否重载过数据     */</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> loaded <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span><span class="token class-name">UserModel</span> realSubject<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>realSubject <span class="token operator">=</span> realSubject<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> realSubject<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUserId</span><span class="token punctuation">(</span><span class="token class-name">String</span> userId<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        realSubject<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getDeptId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>loaded<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//从数据库中重载对象</span>            <span class="token function">reload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//设置重载标志为true</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>loaded <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> realSubject<span class="token punctuation">.</span><span class="token function">getDeptId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDeptId</span><span class="token punctuation">(</span><span class="token class-name">String</span> deptId<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        realSubject<span class="token punctuation">.</span><span class="token function">setDeptId</span><span class="token punctuation">(</span>deptId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> realSubject<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        realSubject<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>loaded<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//从数据库中重载对象</span>            <span class="token function">reload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//设置重载标志为true</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>loaded <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> realSubject<span class="token punctuation">.</span><span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSex</span><span class="token punctuation">(</span><span class="token class-name">String</span> sex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        realSubject<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span>sex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 重新查询数据库获取完整数据     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">reload</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//模拟请求数据库</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">UserModel</span> db <span class="token operator">:</span> <span class="token class-name">UserDB</span><span class="token punctuation">.</span>USER_DB_LIST<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>db<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>realSubject <span class="token operator">=</span> db<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="客户端调用类"><a href="#客户端调用类" class="headerlink" title="客户端调用类"></a>客户端调用类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Collection</span></span><span class="token punctuation">;</span><span class="token comment">/** * @Author: Sam * @Date: 2022-08-03 11:08 * @Description: 代理客户端 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//代理模式-懒加载示例</span>        <span class="token class-name">UserManager</span> userManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserModelApi</span><span class="token punctuation">></span></span> col <span class="token operator">=</span> userManager<span class="token punctuation">.</span><span class="token function">getUserByDeptId</span><span class="token punctuation">(</span><span class="token string">"100"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//如果只是显示用户名称，则不需要重新查询数据库</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">UserModelApi</span> umApi <span class="token operator">:</span> col<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"用户编号："</span> <span class="token operator">+</span> umApi<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 用户姓名："</span> <span class="token operator">+</span> umApi<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//如果访问非用户编号和用户姓名外的属性，那就会重新查询数据库</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">UserModelApi</span> umApi <span class="token operator">:</span> col<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"用户编号："</span> <span class="token operator">+</span> umApi<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>                    <span class="token string">" 用户姓名："</span> <span class="token operator">+</span> umApi<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>                    <span class="token string">" 所属部门："</span> <span class="token operator">+</span> umApi<span class="token punctuation">.</span><span class="token function">getDeptId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>                    <span class="token string">" 性别："</span> <span class="token operator">+</span> umApi<span class="token punctuation">.</span><span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">用户编号：1001 用户姓名：张三用户编号：1002 用户姓名：李四用户编号：1001 用户姓名：张三 所属部门：100 性别：男用户编号：1002 用户姓名：李四 所属部门：100 性别：女<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上就是<code>代理模式</code>介绍和示例了~</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java设计模式-中介者模式</title>
      <link href="/blog/2022/08/02/design-mediator/"/>
      <url>/blog/2022/08/02/design-mediator/</url>
      
        <content type="html"><![CDATA[<h1 id="Java设计模式-中介者模式"><a href="#Java设计模式-中介者模式" class="headerlink" title="Java设计模式-中介者模式"></a>Java设计模式-中介者模式</h1><h2 id="什么是中介者模式"><a href="#什么是中介者模式" class="headerlink" title="什么是中介者模式"></a>什么是中介者模式</h2><p>中介者的功能非常简单，就是封装对象之间的交互。如果一个对象的操作会引起其他相关对象的变化，或者是某个操作需要引起其他对象的后续或连带操作，而这个对象又不希望自己来处理这些关系，那么就可以找中介者，把所有的麻烦扔给它，只在需要的时候通知中介者，其他的就让中介者去处理就可以了。</p><p>反过来，其他的对象在操作的时候，可能会引起这个对象的变化，也可以这么做。最后对象之间就完全分离了，谁都不直接跟其他对象交互，那么相互的关系全部被集中到中介者对象里面了，所有的对象就只是跟中介者对象进行通信，相互之间不再有联系。</p><p>把所有对象之间的交互都封装在中介者当中，无形中还可以得到另外一个好处，就是能够集中地控制这些对象的交互关系，这样当有变化的时候，修改起来就很方便。</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>【松散耦合】中介者模式通过把多个同事对象之间的交互封装到中介者对象里面，从而使得同事对象之间松散耦合，基本上可以做到互不依赖。这样一来，同事对象就可以独立地变化和复用，而不再像以前那样“牵一发而动全身”了。</li><li>【集中控制交互】多个同事对象的交互，被封装在中介者对象里面集中管理，使得这些交互行为发生变化的时候，只需要修改中介者对象就可以了，当然如果是已经做好的系统，那就扩展中介者对象，而各个同事类不需要做修改。</li><li>【多对多变成一对多】没有使用中介者模式的时候，同事对象之间的关系通常是多对多的，引入中介者对象以后，中介者对象和同事对象的关系通常变成了双向的一对多，这会让对象的关系更容易理解和实现。</li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li>中介者模式的一个潜在缺点是，过度集中化。如果同事对象的交互非常多，而且比较复杂，当这些复杂性全部集中到中介者的时候，会导致中介者对象变得十分复杂，而且难于管理和维护。</li></ul><h3 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h3><p><img src="mediator-1.png" alt="mediator-1"></p><h2 id="何时使用"><a href="#何时使用" class="headerlink" title="何时使用"></a>何时使用</h2><p>建议在如下情况时选用中介者模式</p><ul><li><p>如果一组对象之间的通信方式比较复杂，导致相互依赖、结构混乱，可以采用中介者模式，把这些对象相互的交互管理起来，各个对象都只需要和中介者交互，从而使得各个对象松散耦合，结构也更清晰易懂。</p></li><li><p>如果一个对象引用很多的对象，并直接跟这些对象交互，导致难以复用该对象，可以采用中介者模式，把这个对象跟其他对象的交互封装到中介者对象里面，这个对象只需要和中介者对象交互就可以了。</p></li></ul><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><h3 id="中介者接口"><a href="#中介者接口" class="headerlink" title="中介者接口"></a>中介者接口</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Author: Sam * @Date: 2022-08-02 11:18 * @Description: 中介者 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Mediator</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 同事对象在自身改变的时候来通知中介者的方法     * 让中介者去负责相应的与其他同事对象的交互     *     * @param colleague 同事对象自身，好让中介者对象通过对象实例去获取同事对象的状态     */</span>    <span class="token keyword">void</span> <span class="token function">changed</span><span class="token punctuation">(</span><span class="token class-name">Colleague</span> colleague<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="同事类的抽象父类"><a href="#同事类的抽象父类" class="headerlink" title="同事类的抽象父类"></a>同事类的抽象父类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Author: Sam * @Date: 2022-08-02 11:14 * @Description: 同事类的抽象父类 */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Colleague</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Mediator</span> mediator<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Colleague</span><span class="token punctuation">(</span><span class="token class-name">Mediator</span> mediator<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mediator <span class="token operator">=</span> mediator<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Mediator</span> <span class="token function">getMediator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> mediator<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="同事类：光驱类"><a href="#同事类：光驱类" class="headerlink" title="同事类：光驱类"></a>同事类：光驱类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Author: Sam * @Date: 2022-08-02 11:20 * @Description: 同事类：光驱类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CDDriver</span> <span class="token keyword">extends</span> <span class="token class-name">Colleague</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 光驱数据     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> data <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">CDDriver</span><span class="token punctuation">(</span><span class="token class-name">Mediator</span> mediator<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>mediator<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 读取光盘     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">readCD</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token string">"设计模式,值得好好研究"</span><span class="token punctuation">;</span>        <span class="token comment">//通知主板，自己的状态发生了改变</span>        <span class="token function">getMediator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">changed</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 获取光驱数据     */</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> data<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="同事类：CPU类"><a href="#同事类：CPU类" class="headerlink" title="同事类：CPU类"></a>同事类：CPU类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Author: Sam * @Date: 2022-08-02 11:20 * @Description: 同事类：CPU类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CPU</span> <span class="token keyword">extends</span> <span class="token class-name">Colleague</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 分解出来的视频数据     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> videoData <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 分解出来的声音数据     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> soundData <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">CPU</span><span class="token punctuation">(</span><span class="token class-name">Mediator</span> mediator<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>mediator<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 处理数据，把数据分成音频和视频的数据     *     * @param data 被处理的数据     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">executeData</span><span class="token punctuation">(</span><span class="token class-name">String</span> data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//把数据分解开，前面的是视频数据，后面的是音频数据</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ss <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>videoData <span class="token operator">=</span> ss<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>soundData <span class="token operator">=</span> ss<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">//通知主板，CPU的工作完成</span>        <span class="token function">getMediator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">changed</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getVideoData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> videoData<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getSoundData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> soundData<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="同事类：声卡类"><a href="#同事类：声卡类" class="headerlink" title="同事类：声卡类"></a>同事类：声卡类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Author: Sam * @Date: 2022-08-02 11:20 * @Description: 同事类：声卡类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SoundCard</span> <span class="token keyword">extends</span> <span class="token class-name">Colleague</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">SoundCard</span><span class="token punctuation">(</span><span class="token class-name">Mediator</span> mediator<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>mediator<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 按照声频数据发出声音     *     * @param data 发出声音的数据     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">soundData</span><span class="token punctuation">(</span><span class="token class-name">String</span> data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"画外音："</span> <span class="token operator">+</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="同事类：显卡类"><a href="#同事类：显卡类" class="headerlink" title="同事类：显卡类"></a>同事类：显卡类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Author: Sam * @Date: 2022-08-02 11:20 * @Description: 同事类：显卡类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VideoCard</span> <span class="token keyword">extends</span> <span class="token class-name">Colleague</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">VideoCard</span><span class="token punctuation">(</span><span class="token class-name">Mediator</span> mediator<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>mediator<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 显示视频数据     *     * @param data 被显示的数据     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showData</span><span class="token punctuation">(</span><span class="token class-name">String</span> data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"您正观看的是："</span> <span class="token operator">+</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="中介者实现：主板类"><a href="#中介者实现：主板类" class="headerlink" title="中介者实现：主板类"></a>中介者实现：主板类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Author: Sam * @Date: 2022-08-02 11:24 * @Description: 主板类，实现中介者接口 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MotherBoard</span> <span class="token keyword">implements</span> <span class="token class-name">Mediator</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 持有并维护同事类-光驱类     */</span>    <span class="token keyword">public</span> <span class="token class-name">CDDriver</span> cdDriver<span class="token punctuation">;</span>    <span class="token comment">/**     * 持有并维护同事类-CPU类     */</span>    <span class="token keyword">public</span> <span class="token class-name">CPU</span> cpu<span class="token punctuation">;</span>    <span class="token comment">/**     * 持有并维护同事类-显卡类     */</span>    <span class="token keyword">public</span> <span class="token class-name">VideoCard</span> videoCard<span class="token punctuation">;</span>    <span class="token comment">/**     * 持有并维护同事类-声卡类     */</span>    <span class="token keyword">public</span> <span class="token class-name">SoundCard</span> soundCard<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">changed</span><span class="token punctuation">(</span><span class="token class-name">Colleague</span> colleague<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>colleague <span class="token operator">==</span> cdDriver<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//表示光驱读取数据了</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">opeCDDriverReadData</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">CDDriver</span><span class="token punctuation">)</span> colleague<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>colleague <span class="token operator">==</span> cpu<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//表示CPU处理完了</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">opeCPU</span><span class="token punctuation">(</span><span class="token punctuation">(</span>CPU<span class="token punctuation">)</span> colleague<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">opeCDDriverReadData</span><span class="token punctuation">(</span><span class="token class-name">CDDriver</span> cd<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//1：先获取光驱读取的数据</span>        <span class="token class-name">String</span> data <span class="token operator">=</span> cd<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2：把这些数据传递给CPU进行处理</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cpu<span class="token punctuation">.</span><span class="token function">executeData</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">opeCPU</span><span class="token punctuation">(</span><span class="token class-name">CPU</span> cpu<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//1：先获取CPU处理后的数据</span>        <span class="token class-name">String</span> videoData <span class="token operator">=</span> cpu<span class="token punctuation">.</span><span class="token function">getVideoData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> soundData <span class="token operator">=</span> cpu<span class="token punctuation">.</span><span class="token function">getSoundData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2：把这些数据传递给显卡和声卡展示出来</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>videoCard<span class="token punctuation">.</span><span class="token function">showData</span><span class="token punctuation">(</span>videoData<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>soundCard<span class="token punctuation">.</span><span class="token function">soundData</span><span class="token punctuation">(</span>soundData<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCdDriver</span><span class="token punctuation">(</span><span class="token class-name">CDDriver</span> cdDriver<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cdDriver <span class="token operator">=</span> cdDriver<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCpu</span><span class="token punctuation">(</span><span class="token class-name">CPU</span> cpu<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cpu <span class="token operator">=</span> cpu<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setVideoCard</span><span class="token punctuation">(</span><span class="token class-name">VideoCard</span> videoCard<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>videoCard <span class="token operator">=</span> videoCard<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSoundCard</span><span class="token punctuation">(</span><span class="token class-name">SoundCard</span> soundCard<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>soundCard <span class="token operator">=</span> soundCard<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="客户端调用类"><a href="#客户端调用类" class="headerlink" title="客户端调用类"></a>客户端调用类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Author: Sam * @Date: 2022-08-02 14:01 * @Description: 中介者客户端 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//1：创建中介者--主板对象</span>        <span class="token class-name">MotherBoard</span> mediator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MotherBoard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2：创建同事类</span>        <span class="token class-name">CDDriver</span> cd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CDDriver</span><span class="token punctuation">(</span>mediator<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">CPU</span> cpu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CPU</span><span class="token punctuation">(</span>mediator<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">VideoCard</span> vc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VideoCard</span><span class="token punctuation">(</span>mediator<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SoundCard</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SoundCard</span><span class="token punctuation">(</span>mediator<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3：让中介者知道所有的同事</span>        mediator<span class="token punctuation">.</span><span class="token function">setCdDriver</span><span class="token punctuation">(</span>cd<span class="token punctuation">)</span><span class="token punctuation">;</span>        mediator<span class="token punctuation">.</span><span class="token function">setCpu</span><span class="token punctuation">(</span>cpu<span class="token punctuation">)</span><span class="token punctuation">;</span>        mediator<span class="token punctuation">.</span><span class="token function">setVideoCard</span><span class="token punctuation">(</span>vc<span class="token punctuation">)</span><span class="token punctuation">;</span>        mediator<span class="token punctuation">.</span><span class="token function">setSoundCard</span><span class="token punctuation">(</span>sc<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//4：开始看电影，把光盘放入光驱，光驱开始读盘</span>        cd<span class="token punctuation">.</span><span class="token function">readCD</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">您正观看的是：设计模式画外音：值得好好研究<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上就是<code>中介者模式</code>介绍和示例了~</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java设计模式-原型模式</title>
      <link href="/blog/2022/08/02/design-prototype/"/>
      <url>/blog/2022/08/02/design-prototype/</url>
      
        <content type="html"><![CDATA[<h1 id="Java设计模式-原型模式"><a href="#Java设计模式-原型模式" class="headerlink" title="Java设计模式-原型模式"></a>Java设计模式-原型模式</h1><h2 id="什么是原型模式"><a href="#什么是原型模式" class="headerlink" title="什么是原型模式"></a>什么是原型模式</h2><ol><li>原型模式的功能</li></ol><p>原型模式要实现的主要功能就是:通过克隆来创建新的对象实例。一般来讲，新创建出来的实例的数据是和原型实例一样的。但是具体如何实现克隆，需要由程序自行实现，原型模式并没有统一的要求和实现算法。</p><ol start="2"><li>原型与new</li></ol><p>原型模式从某种意义上说，就像是新操作，在前面的例子实现中，克隆方法就是使用新来实现的。但请注意，只是“类似于新的”而不是“就是新”。</p><p>克隆方法和新操作最明显的不同就在于：新一个对象实例，一般属性是没有值的，或者是只有默认值；如果是克隆得到的一个实例，通常属性是有值的，属性的值就是原型对象实例在克隆的时候，原型对象实例的属性的值。</p><ol start="3"><li>原型实例和克隆的实例</li></ol><p>原型实例和克隆出来的实例，本质上是不同的实例，克隆完成后，它们之间是没有关联的，如果克隆完成后，克隆出来的实例的属性值发生了改变，是不会影响到原型实例的。</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>【对客户端隐藏具体的实现类型】原型模式的客户端只知道原型接口的类型，并不知道具体的实现类型，从而减少了客户端对这些具体实现类型的依赖。</li><li>【在运行时动态改变具体的实现类型】原型模式可以在运行期间，由客户来注册符合原型接口的实现类型，也可以动态地改变具体的实现类型，看起来接口没有任何变化，但其实运行的已经是另外一个类实例了。因为克隆一个原型就类似于实例化一个类。</li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li>原型模式最大的缺点就在于每个原型的子类都必须实现克隆的操作，尤其在包含引用类型的对象时，克隆方法会比较麻烦，必须要能够递归地让所有的相关对象都要正确地实现克隆。</li></ul><h3 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h3><p><img src="prototype-1.png" alt="prototype-1"></p><h2 id="何时使用"><a href="#何时使用" class="headerlink" title="何时使用"></a>何时使用</h2><p>建议在如下情况时选用原型模式</p><ul><li><p>如果一个系统想要独立于它想要使用的对象时，可以使用原型模式，让系统只面向接口编程，在系统需要新的对象的时候，可以通过克隆原型来得到。</p></li><li><p>如果需要实例化的类是在运行时刻动态指定时，可以使用原型模式，通过克隆原型来得到需要的实例。</p></li></ul><h2 id="浅度克隆和深度克隆"><a href="#浅度克隆和深度克隆" class="headerlink" title="浅度克隆和深度克隆"></a>浅度克隆和深度克隆</h2><p>无论你是自己实现克隆方法，还是采用提供的克隆方法，都存在一个浅度克隆和深度克隆的问题，那么什么是浅度克隆？什么是深度克隆呢?简单地解释一下。</p><ul><li><p>浅度克隆：只负责克隆按值传递的数据(比如基本数据类型、字符串类型)。</p></li><li><p>深度克隆：除了浅度克隆要克隆的值外，还负责克隆引用类型的数据，基本上就是被克隆实例所有的属性数据都会被克隆出来。</p></li></ul><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><h3 id="订单接口"><a href="#订单接口" class="headerlink" title="订单接口"></a>订单接口</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Author: Sam * @Date: 2022-08-02 10:28 * @Description: 订单接口 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">OrderApi</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> <span class="token function">getOrderProductNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">setOrderProductNum</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 克隆方法     */</span>    <span class="token class-name">OrderApi</span> <span class="token function">cloneOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="个人订单对象实现类"><a href="#个人订单对象实现类" class="headerlink" title="个人订单对象实现类"></a>个人订单对象实现类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Author: Sam * @Date: 2022-08-02 10:30 * @Description: 个人订单对象实现类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PersonalOrder</span> <span class="token keyword">implements</span> <span class="token class-name">OrderApi</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> customerName<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> productId<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> orderProductNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getOrderProductNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>orderProductNum<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setOrderProductNum</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>orderProductNum <span class="token operator">=</span> num<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">OrderApi</span> <span class="token function">cloneOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">PersonalOrder</span> order <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PersonalOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        order<span class="token punctuation">.</span><span class="token function">setCustomerName</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>customerName<span class="token punctuation">)</span><span class="token punctuation">;</span>        order<span class="token punctuation">.</span><span class="token function">setProductId</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>productId<span class="token punctuation">)</span><span class="token punctuation">;</span>        order<span class="token punctuation">.</span><span class="token function">setOrderProductNum</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>orderProductNum<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> order<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getCustomerName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> customerName<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCustomerName</span><span class="token punctuation">(</span><span class="token class-name">String</span> customerName<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>customerName <span class="token operator">=</span> customerName<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getProductId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> productId<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setProductId</span><span class="token punctuation">(</span><span class="token class-name">String</span> productId<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>productId <span class="token operator">=</span> productId<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"PersonalOrder&#123;"</span> <span class="token operator">+</span>                <span class="token string">"customerName='"</span> <span class="token operator">+</span> customerName <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token string">", productId='"</span> <span class="token operator">+</span> productId <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token string">", orderProductNum="</span> <span class="token operator">+</span> orderProductNum <span class="token operator">+</span>                <span class="token char">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="订单业务"><a href="#订单业务" class="headerlink" title="订单业务"></a>订单业务</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Author: Sam * @Date: 2022-08-02 10:35 * @Description: 订单业务 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderBusiness</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveOrder</span><span class="token punctuation">(</span><span class="token class-name">OrderApi</span> order<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//1：判断当前的预订产品数量是否大于1000</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>order<span class="token punctuation">.</span><span class="token function">getOrderProductNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//2：如果大于，还需要继续拆分</span>            <span class="token comment">//2.1：在新建一份订单，跟传入的订单除了数量不一样外，其他相同</span>            <span class="token class-name">OrderApi</span> newOder <span class="token operator">=</span> order<span class="token punctuation">.</span><span class="token function">cloneOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//然后进行赋值，产品数量为1000</span>            newOder<span class="token punctuation">.</span><span class="token function">setOrderProductNum</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//2.2：原来的订单保留，把数量设置成减少1000</span>            order<span class="token punctuation">.</span><span class="token function">setOrderProductNum</span><span class="token punctuation">(</span>order<span class="token punctuation">.</span><span class="token function">getOrderProductNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//然后是业务功能处理</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"拆分成生成订单："</span> <span class="token operator">+</span> newOder<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//3：不超过，那就直接业务功能处理</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"订单："</span> <span class="token operator">+</span> order<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="客户端调用类"><a href="#客户端调用类" class="headerlink" title="客户端调用类"></a>客户端调用类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Author: Sam * @Date: 2022-07-21 10:45 * @Description: 原型客户端 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">PersonalOrder</span> orderApi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PersonalOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        orderApi<span class="token punctuation">.</span><span class="token function">setProductId</span><span class="token punctuation">(</span><span class="token string">"1001"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        orderApi<span class="token punctuation">.</span><span class="token function">setCustomerName</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        orderApi<span class="token punctuation">.</span><span class="token function">setOrderProductNum</span><span class="token punctuation">(</span><span class="token number">2300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">OrderBusiness</span> ob <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrderBusiness</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ob<span class="token punctuation">.</span><span class="token function">saveOrder</span><span class="token punctuation">(</span>orderApi<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">现在在操作A模块里面的testA方法现在在操作B模块里面拆分成生成订单：PersonalOrder&#123;customerName&#x3D;&#39;张三&#39;, productId&#x3D;&#39;1001&#39;, orderProductNum&#x3D;1000&#125;拆分成生成订单：PersonalOrder&#123;customerName&#x3D;&#39;张三&#39;, productId&#x3D;&#39;1001&#39;, orderProductNum&#x3D;1000&#125;订单：PersonalOrder&#123;customerName&#x3D;&#39;张三&#39;, productId&#x3D;&#39;1001&#39;, orderProductNum&#x3D;300&#125;的testB方法现在在操作C模块里面的testC方法<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上就是<code>原型模式</code>介绍和示例了~</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java设计模式-建筑者模式</title>
      <link href="/blog/2022/07/25/design-builder/"/>
      <url>/blog/2022/07/25/design-builder/</url>
      
        <content type="html"><![CDATA[<h1 id="Java设计模式-建筑者模式"><a href="#Java设计模式-建筑者模式" class="headerlink" title="Java设计模式-建筑者模式"></a>Java设计模式-建筑者模式</h1><h2 id="什么是建筑者模式"><a href="#什么是建筑者模式" class="headerlink" title="什么是建筑者模式"></a>什么是建筑者模式</h2><p>生成器模式的主要功能是构建复杂的产品，而且是细化的、分步骤的构建产品，也就是生成器模式重在一步一步解决构造复杂对象的问题.如果仅仅这么认识生成器模式的功能是不够的.</p><p>要特别注意，生成器模式分成两个很重要的部分</p><ul><li>一个部分是Builder接口，这里是定义了如何构建各个部件，也就是知道每个部件功能如何实现，以及如何装配这些部件到产品中去；</li><li>另外一个部分是Direcotr，Direcotr是知道如何组合来构建产品，也就是说Direcotr负责整体的构建算法，而且通常是分步骤地来执行。</li></ul><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>【松散耦合】生成器模式可以用同一个构建算法构建出表现上完全不同的产品，实现产品构建和产品表现上的分离.生成器模式正是把产品构建的过程独立出来，使它和具体产品的表现松散耦合，从而使得构建算法可以复用，而具体产品表现也可以灵活地、方便地扩展和切换。</li><li>【可以很容易地改变产品的内部表示】在生成器模式中，由于Builder对象只是提供接口给使用，那么具体的部件创建和装配方式是被Builder接口隐藏了的导演并不知道这些具体的实现细节。这样一来，要想改变产品的内部表示，只需要切换Builder的具体实现即可，不用管主管，因此变得很容易。</li><li>【更好的复用性】生成器模式很好地实现了构建算法和具体产品实现的分离.这样一来，使得构建产品的算法可以复用.同样的道理，具体产品的实现也可以复用，同一个产品的实现，可以配合不同的构建算法使用。</li></ul><h3 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h3><p><img src="builder-1.png" alt="builder-1"></p><h2 id="何时使用"><a href="#何时使用" class="headerlink" title="何时使用"></a>何时使用</h2><p>建议在如下情况时选用生成器模式</p><ul><li><p>如果创建对象的算法，应该独立于该对象的组成部分以及它们的装配方式时。</p></li><li><p>如果同一个构建过程有着不同的表示时</p></li></ul><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><h3 id="1-构造装配"><a href="#1-构造装配" class="headerlink" title="1. 构造装配"></a>1. 构造装配</h3><h4 id="输出文件头对象"><a href="#输出文件头对象" class="headerlink" title="输出文件头对象"></a>输出文件头对象</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span></span><span class="token punctuation">;</span><span class="token comment">/** * @Author: Sam * @Date: 2022-07-25 09:48 * @Description: 输出文件头对象 */</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExportHeaderModel</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 分公司id     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> deptId<span class="token punctuation">;</span>    <span class="token comment">/**     * 导出数据的日期     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> exportDate<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="输出文件数据对象"><a href="#输出文件数据对象" class="headerlink" title="输出文件数据对象"></a>输出文件数据对象</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span></span><span class="token punctuation">;</span><span class="token comment">/** * @Author: Sam * @Date: 2022-07-25 09:48 * @Description: 输出文件数据对象 */</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExportDataModel</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 产品编号     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> productId<span class="token punctuation">;</span>    <span class="token comment">/**     * 产品编号     */</span>    <span class="token keyword">private</span> <span class="token class-name">Double</span> price<span class="token punctuation">;</span>    <span class="token comment">/**     * 产品编号     */</span>    <span class="token keyword">private</span> <span class="token class-name">Double</span> amount<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="输出文件尾对象"><a href="#输出文件尾对象" class="headerlink" title="输出文件尾对象"></a>输出文件尾对象</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span></span><span class="token punctuation">;</span><span class="token comment">/** * @Author: Sam * @Date: 2022-07-25 09:48 * @Description: 输出文件尾对象 */</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExportFooterModel</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 输出人     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> exportUser<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="生成器接口"><a href="#生成器接口" class="headerlink" title="生成器接口"></a>生成器接口</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Collection</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span><span class="token comment">/** * @Author: Sam * @Date: 2022-07-25 09:42 * @Description: 生成器接口，定义创建一个产品对象所需的各个部件的操作 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Builder</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 构建输出文件的头的部分     */</span>    <span class="token keyword">void</span> <span class="token function">buildHeader</span><span class="token punctuation">(</span><span class="token class-name">ExportHeaderModel</span> ehm<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 构建输出文件的内容的部分     */</span>    <span class="token keyword">void</span> <span class="token function">buildBody</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Collection</span><span class="token punctuation">&lt;</span><span class="token class-name">ExportDataModel</span><span class="token punctuation">></span><span class="token punctuation">></span></span> mapData<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 构建输出文件的尾的部分     */</span>    <span class="token keyword">void</span> <span class="token function">buildFooter</span><span class="token punctuation">(</span><span class="token class-name">ExportFooterModel</span> efm<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="文本的生成器对象"><a href="#文本的生成器对象" class="headerlink" title="文本的生成器对象"></a>文本的生成器对象</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Collection</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span><span class="token comment">/** * @Author: Sam * @Date: 2022-07-25 09:43 * @Description: 实现导出数据到文本的生成器对象 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TxtBuilder</span> <span class="token keyword">implements</span> <span class="token class-name">Builder</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 生成器最终构建的产品对象，相当于产品     */</span>    <span class="token keyword">private</span> <span class="token class-name">StringBuffer</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">StringBuffer</span> <span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> buffer<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildHeader</span><span class="token punctuation">(</span><span class="token class-name">ExportHeaderModel</span> ehm<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>ehm<span class="token punctuation">.</span><span class="token function">getDeptId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> ehm<span class="token punctuation">.</span><span class="token function">getExportDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildBody</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Collection</span><span class="token punctuation">&lt;</span><span class="token class-name">ExportDataModel</span><span class="token punctuation">></span><span class="token punctuation">></span></span> mapData<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> tblName <span class="token operator">:</span> mapData<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>tblName <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ExportDataModel</span> edm <span class="token operator">:</span> mapData<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>tblName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>edm<span class="token punctuation">.</span><span class="token function">getProductId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> edm<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> edm<span class="token punctuation">.</span><span class="token function">getAmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildFooter</span><span class="token punctuation">(</span><span class="token class-name">ExportFooterModel</span> efm<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>efm<span class="token punctuation">.</span><span class="token function">getExportUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Xml的生成器对象"><a href="#Xml的生成器对象" class="headerlink" title="Xml的生成器对象"></a>Xml的生成器对象</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Collection</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span><span class="token comment">/** * @Author: Sam * @Date: 2022-07-25 09:43 * @Description: 实现导出数据到Xml的生成器对象 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XmlBuilder</span> <span class="token keyword">implements</span> <span class="token class-name">Builder</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 生成器最终构建的产品对象，相当于产品     */</span>    <span class="token keyword">private</span> <span class="token class-name">StringBuffer</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">StringBuffer</span> <span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> buffer<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildHeader</span><span class="token punctuation">(</span><span class="token class-name">ExportHeaderModel</span> ehm<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;?xml version='1.0' encoding='gb2312'?>\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;Report>\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"  &lt;Header>\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"    &lt;DeptId>"</span> <span class="token operator">+</span> ehm<span class="token punctuation">.</span><span class="token function">getDeptId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;/DeptId>\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"    &lt;ExportDate>"</span> <span class="token operator">+</span> ehm<span class="token punctuation">.</span><span class="token function">getExportDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;/ExportDate>\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"  &lt;/Header>\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildBody</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Collection</span><span class="token punctuation">&lt;</span><span class="token class-name">ExportDataModel</span><span class="token punctuation">></span><span class="token punctuation">></span></span> mapData<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"  &lt;Body>\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> tblName <span class="token operator">:</span> mapData<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"    &lt;Datas TableName =\""</span> <span class="token operator">+</span> tblName <span class="token operator">+</span> <span class="token string">"\">\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ExportDataModel</span> edm <span class="token operator">:</span> mapData<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>tblName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"      &lt;Data>\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"        &lt;ProductId>"</span> <span class="token operator">+</span> edm<span class="token punctuation">.</span><span class="token function">getProductId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;/ProductId>\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"        &lt;Price>"</span> <span class="token operator">+</span> edm<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;/Price>\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"        &lt;Amount>"</span> <span class="token operator">+</span> edm<span class="token punctuation">.</span><span class="token function">getAmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;/Amount>\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"      &lt;/Data>\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"    &lt;/Datas>\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"  &lt;/Body>\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildFooter</span><span class="token punctuation">(</span><span class="token class-name">ExportFooterModel</span> efm<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"  &lt;Footer>\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"    &lt;ExportUser>"</span> <span class="token operator">+</span> efm<span class="token punctuation">.</span><span class="token function">getExportUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;/ExportUser>\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"  &lt;/Footer>\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;/Report>\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="生成器客户端"><a href="#生成器客户端" class="headerlink" title="生成器客户端"></a>生成器客户端</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Collection</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span><span class="token comment">/** * @Author: Sam * @Date: 2022-07-25 10:17 * @Description: 生成器客户端 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ExportHeaderModel</span> ehm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExportHeaderModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ehm<span class="token punctuation">.</span><span class="token function">setDeptId</span><span class="token punctuation">(</span><span class="token string">"一分公司"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ehm<span class="token punctuation">.</span><span class="token function">setExportDate</span><span class="token punctuation">(</span><span class="token string">"2022-07-25"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Collection</span><span class="token punctuation">&lt;</span><span class="token class-name">ExportDataModel</span><span class="token punctuation">></span><span class="token punctuation">></span></span> mapData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ExportDataModel</span><span class="token punctuation">></span></span> col <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ExportDataModel</span> edm1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExportDataModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        edm1<span class="token punctuation">.</span><span class="token function">setProductId</span><span class="token punctuation">(</span><span class="token string">"产品001号"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        edm1<span class="token punctuation">.</span><span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token number">100d</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        edm1<span class="token punctuation">.</span><span class="token function">setAmount</span><span class="token punctuation">(</span><span class="token number">80d</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ExportDataModel</span> edm2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExportDataModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        edm2<span class="token punctuation">.</span><span class="token function">setProductId</span><span class="token punctuation">(</span><span class="token string">"产品002号"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        edm2<span class="token punctuation">.</span><span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token number">99d</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        edm2<span class="token punctuation">.</span><span class="token function">setAmount</span><span class="token punctuation">(</span><span class="token number">55d</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        col<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>edm1<span class="token punctuation">)</span><span class="token punctuation">;</span>        col<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>edm2<span class="token punctuation">)</span><span class="token punctuation">;</span>        mapData<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"销售记录表"</span><span class="token punctuation">,</span> col<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ExportFooterModel</span> efm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExportFooterModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        efm<span class="token punctuation">.</span><span class="token function">setExportUser</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//测试输出到文本文件</span>        <span class="token class-name">TxtBuilder</span> txtBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TxtBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建指导者对象</span>        <span class="token class-name">Director</span> director <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Director</span><span class="token punctuation">(</span>txtBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>        director<span class="token punctuation">.</span><span class="token function">construct</span><span class="token punctuation">(</span>ehm<span class="token punctuation">,</span> mapData<span class="token punctuation">,</span> efm<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//输出控制台</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输出到文本文件的内容：\n"</span> <span class="token operator">+</span> txtBuilder<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">XmlBuilder</span> xmlBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XmlBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Director</span> director2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Director</span><span class="token punctuation">(</span>xmlBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>        director2<span class="token punctuation">.</span><span class="token function">construct</span><span class="token punctuation">(</span>ehm<span class="token punctuation">,</span> mapData<span class="token punctuation">,</span> efm<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输出到xml文件的内容：\n"</span> <span class="token operator">+</span> xmlBuilder<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h4><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">输出到文本文件的内容：一分公司,2022-07-25销售记录表产品001号,100.0,80.0产品002号,99.0,55.0张三输出到xml文件的内容：&lt;?xml version&#x3D;&#39;1.0&#39; encoding&#x3D;&#39;gb2312&#39;?&gt;&lt;Report&gt;  &lt;Header&gt;    &lt;DeptId&gt;一分公司&lt;&#x2F;DeptId&gt;    &lt;ExportDate&gt;2022-07-25&lt;&#x2F;ExportDate&gt;  &lt;&#x2F;Header&gt;  &lt;Body&gt;    &lt;Datas TableName &#x3D;&quot;销售记录表&quot;&gt;      &lt;Data&gt;        &lt;ProductId&gt;产品001号&lt;&#x2F;ProductId&gt;        &lt;Price&gt;100.0&lt;&#x2F;Price&gt;        &lt;Amount&gt;80.0&lt;&#x2F;Amount&gt;      &lt;&#x2F;Data&gt;      &lt;Data&gt;        &lt;ProductId&gt;产品002号&lt;&#x2F;ProductId&gt;        &lt;Price&gt;99.0&lt;&#x2F;Price&gt;        &lt;Amount&gt;55.0&lt;&#x2F;Amount&gt;      &lt;&#x2F;Data&gt;    &lt;&#x2F;Datas&gt;  &lt;&#x2F;Body&gt;  &lt;Footer&gt;    &lt;ExportUser&gt;张三&lt;&#x2F;ExportUser&gt;  &lt;&#x2F;Footer&gt;&lt;&#x2F;Report&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-构造复杂对象"><a href="#2-构造复杂对象" class="headerlink" title="2. 构造复杂对象"></a>2. 构造复杂对象</h3><h4 id="认证配置对象"><a href="#认证配置对象" class="headerlink" title="认证配置对象"></a>认证配置对象</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Author: Sam * @Date: 2022-07-25 11:26 * @Description: 认证配置对象 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AuthConfig</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> appId<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> secret<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> expireTime<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">AuthConfig</span><span class="token punctuation">(</span><span class="token class-name">AuthConfigBuilder</span> builder<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>appId <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">getAppId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>secret <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">getSecret</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>expireTime <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">getExpireTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"AuthConfig&#123;"</span> <span class="token operator">+</span>                <span class="token string">"appId='"</span> <span class="token operator">+</span> appId <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token string">", secret='"</span> <span class="token operator">+</span> secret <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token string">", expireTime="</span> <span class="token operator">+</span> expireTime <span class="token operator">+</span>                <span class="token char">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * @Author: Sam * @Date: 2022-07-21 10:45 * @Description: 客户端 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//使用Facade</span>        <span class="token keyword">new</span> <span class="token class-name">Facade</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="认证配置类生成器对象"><a href="#认证配置类生成器对象" class="headerlink" title="认证配置类生成器对象"></a>认证配置类生成器对象</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Author: Sam * @Date: 2022-07-25 11:35 * @Description: 认证配置类生成器对象 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AuthConfigBuilder</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> appId<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> secret<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> expireTime<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">AuthConfigBuilder</span><span class="token punctuation">(</span><span class="token class-name">String</span> appId<span class="token punctuation">,</span> <span class="token class-name">String</span> secret<span class="token punctuation">,</span> <span class="token keyword">long</span> expireTime<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>appId <span class="token operator">=</span> appId<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>secret <span class="token operator">=</span> secret<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>expireTime <span class="token operator">=</span> expireTime<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">AuthConfigBuilder</span> <span class="token function">setAppId</span><span class="token punctuation">(</span><span class="token class-name">String</span> appId<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>appId <span class="token operator">=</span> appId<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">AuthConfigBuilder</span> <span class="token function">setSecret</span><span class="token punctuation">(</span><span class="token class-name">String</span> secret<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>secret <span class="token operator">=</span> secret<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">AuthConfigBuilder</span> <span class="token function">setExpireTime</span><span class="token punctuation">(</span><span class="token keyword">long</span> expireTime<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>expireTime <span class="token operator">=</span> expireTime<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">AuthConfig</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"AuthConfig通过AuthConfigBuilder进行创建"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AuthConfig</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getAppId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> appId<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getSecret</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> secret<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getExpireTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> expireTime<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="生成器客户端-1"><a href="#生成器客户端-1" class="headerlink" title="生成器客户端"></a>生成器客户端</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Author: Sam * @Date: 2022-07-25 10:17 * @Description: 生成器客户端 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">AuthConfigBuilder</span> authConfigBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AuthConfigBuilder</span><span class="token punctuation">(</span><span class="token string">"ASDJiuNV"</span><span class="token punctuation">,</span> <span class="token string">"FOYWInlxUI"</span><span class="token punctuation">,</span> <span class="token number">1200</span> <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">AuthConfig</span> authConfig <span class="token operator">=</span> authConfigBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"authConfig = "</span> <span class="token operator">+</span> authConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h4><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">AuthConfig通过AuthConfigBuilder进行创建authConfig &#x3D; AuthConfig&#123;appId&#x3D;&#39;ASDJiuNV&#39;, secret&#x3D;&#39;FOYWInlxUI&#39;, expireTime&#x3D;72000&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上就是<code>建筑者模式</code>介绍和示例了~</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java设计模式-单例模式</title>
      <link href="/blog/2022/07/22/design-singleton/"/>
      <url>/blog/2022/07/22/design-singleton/</url>
      
        <content type="html"><![CDATA[<h1 id="Java设计模式-单例模式"><a href="#Java设计模式-单例模式" class="headerlink" title="Java设计模式-单例模式"></a>Java设计模式-单例模式</h1><h2 id="什么是单例模式"><a href="#什么是单例模式" class="headerlink" title="什么是单例模式"></a>什么是单例模式</h2><p>单例模式是用来保证这个类在运行期间只会被创建一个类实例，另外，单例模式还提供了一个全局唯一访问这个类实例的访问点，就是getInstance方法.不管采用懒汉式还是饿汉式的实现方式，这个全局访问点是一样的。</p><p>对于单例模式而言，不管采用何种实现方式，它都是只关心类实例的创建问题，并不关心具体的业务功能。</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li><p>【实例控制】单例模式会阻止其他对象实例化其自己的单例对象的副本，从而确保所有对象都访问唯一实例。</p></li><li><p>【减少性能开销】因为单例模式只生成一个实例，减少了系统性能开销。当一个对象的产生需要比较多的资源时，如读取配置、产生其他依赖对象时，则可以通过在应用启动时直接产生一个单例对象，然后永久驻留内存的方式来解决。</p></li></ul><h2 id="何时使用"><a href="#何时使用" class="headerlink" title="何时使用"></a>何时使用</h2><p>建议在如下情况时选用单例模式</p><ul><li>当您想控制实例数目，节省系统资源的时候</li></ul><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><h3 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h3><p><img src="singleton-1.png" alt="singleton-1"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Author: Sam * @Date: 2022-07-22 15:40 * @Description: 单例模式-懒汉式 线程不安全 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LazySingleton</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//定义一个变量来存储类实例</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">LazySingleton</span> instance <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token comment">//私有化构造方法，好在内部控制创建实例的数目</span>    <span class="token keyword">private</span> <span class="token class-name">LazySingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">LazySingleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//判断存储实例的变量是否有值</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//如果没有就创建一个实例</span>            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LazySingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>优点：节省内存空间，在使用的时候才会创建；</strong></p><p><strong>缺点：线程不安全</strong>，在多线程下，可能会创建多个实例(一定要重视这个问题，有时候如果在单例对象的构造方法中做了某些重要操作，创建多个实例可能会造成可怕后果。</p><h3 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h3><p><img src="singleton-2.png" alt="singleton-2"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Author: Sam * @Date: 2022-07-22 15:45 * @Description: 单例模式-饿汉式 线程安全 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HungrySingleton</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//定义一个变量来存储类实例 并先初始化好</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">HungrySingleton</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HungrySingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//私有化构造方法，好在内部控制创建实例的数目</span>    <span class="token keyword">private</span> <span class="token class-name">HungrySingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">HungrySingleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//直接返回实例</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>优点：实现简单，不存在多线程问题</strong>，直接声明一个私有对象，然后对外提供一个获取对象的方法。</p><p><strong>缺点</strong>：class 类在被加载的时候创建Singleton实例，如果对象创建后一直没有使用，则会浪费很大的内存空间，此方法不适合创建大对象。</p><h3 id="懒汉式-双重检查加锁机制"><a href="#懒汉式-双重检查加锁机制" class="headerlink" title="懒汉式 双重检查加锁机制"></a>懒汉式 双重检查加锁机制</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Author: Sam * @Date: 2022-07-22 15:40 * @Description: 单例模式-懒汉式 双重检查加锁机制 线程安全 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LazySafeSingleton</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//定义一个变量来存储类实例 用volatile修饰 使得执行可见性</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">static</span> <span class="token class-name">LazySafeSingleton</span> instance <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token comment">//私有化构造方法，好在内部控制创建实例的数目</span>    <span class="token keyword">private</span> <span class="token class-name">LazySafeSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">LazySafeSingleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//先检查实例是否存在，如果不存在就进去下面的同步块</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//同步块，线程安全地创建实例</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">LazySafeSingleton</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token comment">//再次检测实例是否存在，如果不存在就创建个实例</span>                    instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LazySafeSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>优点</strong>：支持多线程，并发量高，且以懒汉式加载，不浪费内存空间。</p><p><strong>缺点</strong>：实现比较麻烦。</p><h3 id="内部类创建"><a href="#内部类创建" class="headerlink" title="内部类创建"></a>内部类创建</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Author: Sam * @Date: 2022-07-22 15:45 * @Description: 单例模式-内部类创建 线程安全 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InnerSingleton</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 类级的内部类，也就是静态的成员式内部类，该内部类的实例与外部类的实例没有绑定关系，     * 而且只有被调用时才会装载，从而实现了延迟加载     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">InnerSingletonHolder</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//静态初始化器，由JVM来保证线程安全</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">InnerSingleton</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InnerSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//私有化构造方法</span>    <span class="token keyword">private</span> <span class="token class-name">InnerSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">InnerSingleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//直接返回实例</span>        <span class="token keyword">return</span> <span class="token class-name">InnerSingletonHolder</span><span class="token punctuation">.</span>instance<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>推荐</strong>：第一次加载Singleton类时并不会初始化单例，只有第一次调用getInstance方法时虚拟机加载SingletonHolder 并初始化单例 ，这样不仅能确保线程安全也能保证Singleton类实例的唯一性，所以推荐使用静态内部类单例模式。</p><h3 id="枚举类创建"><a href="#枚举类创建" class="headerlink" title="枚举类创建"></a>枚举类创建</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Author: Sam * @Date: 2022-07-22 16:06 * @Description: 单例模式-枚举类创建 线程安全 */</span><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">EnumSingleton</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 定义一个枚举的元素，他就代表了Singleton的一个实例     */</span>    INSTANCE<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">EnumSingleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> INSTANCE<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>优点</strong>：代码简洁，线程安全，也是<strong>推荐</strong>使用的！</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上就是<code>单例模式</code>介绍和示例了~</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java设计模式-适配器模式</title>
      <link href="/blog/2022/07/22/design-adapter/"/>
      <url>/blog/2022/07/22/design-adapter/</url>
      
        <content type="html"><![CDATA[<h1 id="Java设计模式-适配器模式"><a href="#Java设计模式-适配器模式" class="headerlink" title="Java设计模式-适配器模式"></a>Java设计模式-适配器模式</h1><h2 id="什么是适配器模式"><a href="#什么是适配器模式" class="headerlink" title="什么是适配器模式"></a>什么是适配器模式</h2><p>适配器模式的主要功能是进行转换匹配，目的是复用已有的功能，而不是来实现新的接口.也就是说，客户端需要的功能应该是已经实现好了的，不需要适配器模式来实现，适配器模式主要负责把不兼容的接口转换成客户端期望的样子就可以了。</p><p>但这并不是说，在适配器里面就不能实现功能.适配器里面可以实现功能，称这种适配器为智能适配器.再说了，在接口匹配和转换的过程中，也有可能需要额外实现一定的功能，才能够转换过来，比如需要调整参数以进行匹配等.</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>【更好的复用性】如果功能是已经有了的，只是接口不兼容，那么通过适配器模式就可以让这些功能得到更好的复用。</li><li>【更好的可扩展性】在实现适配器功能的时候，可以调用自己开发的功能，从而自然地扩展系统的功能。</li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li>过多地使用适配器，会让系统非常零乱，不容易整体进行把握</li></ul><h3 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h3><p><img src="adapter-1.png" alt="adapter-1"></p><p><img src="adapter-2.png" alt="adapter-2"></p><h2 id="何时使用"><a href="#何时使用" class="headerlink" title="何时使用"></a>何时使用</h2><p>建议在如下情况时选用适配器模式</p><ul><li><p>如果你想要使用一个已经存在的类，但是它的接口不符合你的需求，这种情况可以使用适配器模式，来把已有的实现转换成你需要的接口。</p></li><li><p>如果你想创建一个可以复用的类，这个类可能和一些不兼容的类一起工作，这种情况可以使用适配器模式，到时候需要什么就适配什么。</p></li><li><p>如果你想使用一些已经存在的子类，但是不可能对每一个子类都进行适配，这种情况可以选用对象适配器，直接适配这些子类的父类就可以了。</p></li></ul><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><h3 id="图解-1"><a href="#图解-1" class="headerlink" title="图解"></a>图解</h3><p><img src="adapter-3.png" alt="adapter-3"></p><h3 id="日志类"><a href="#日志类" class="headerlink" title="日志类"></a>日志类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Serializable</span></span><span class="token punctuation">;</span><span class="token comment">/** * @Author: Sam * @Date: 2022-07-21 17:49 * @Description: 日志类 */</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LogModel</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">1L</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 日志编号     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> logId<span class="token punctuation">;</span>    <span class="token comment">/**     * 操作人员     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> operateUser<span class="token punctuation">;</span>    <span class="token comment">/**     * 操作时间，以yyyy-MM-dd HH:mm:ss的格式记录     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> operateTime<span class="token punctuation">;</span>    <span class="token comment">/**     * 日志内容     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> logContent<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="日志文件操作接口"><a href="#日志文件操作接口" class="headerlink" title="日志文件操作接口"></a>日志文件操作接口</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span><span class="token comment">/** * @Author: Sam * @Date: 2022-07-21 17:53 * @Description: 日志文件操作接口 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">LogFileOperateApi</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 读取日志文件，从文件里面获取存储的日志列表对象     */</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LogModel</span><span class="token punctuation">></span></span> <span class="token function">readLogFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 写日志文件，把日志列表写出到日志文件中     */</span>    <span class="token keyword">void</span> <span class="token function">writeLogFile</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LogModel</span><span class="token punctuation">></span></span> list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="日志文件操作接口实现类"><a href="#日志文件操作接口实现类" class="headerlink" title="日志文件操作接口实现类"></a>日志文件操作接口实现类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span><span class="token comment">/** * @Author: Sam * @Date: 2022-07-21 17:55 * @Description: 实现对日志文件的操作 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LogFileOperate</span> <span class="token keyword">implements</span> <span class="token class-name">LogFileOperateApi</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 日志文件的路径和文件名称，默认是当前项目根目录下的logs/AdapterLog.log     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> logFilePathName <span class="token operator">=</span> <span class="token string">"logs/AdapterLog.log"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">LogFileOperate</span><span class="token punctuation">(</span><span class="token class-name">String</span> logFilePathName<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>logFilePathName <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> logFilePathName<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>logFilePathName <span class="token operator">=</span> logFilePathName<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LogModel</span><span class="token punctuation">></span></span> <span class="token function">readLogFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LogModel</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">File</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>logFilePathName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">ObjectInputStream</span> oin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                list <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LogModel</span><span class="token punctuation">></span></span><span class="token punctuation">)</span> oin<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">writeLogFile</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LogModel</span><span class="token punctuation">></span></span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">File</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>logFilePathName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">ObjectOutputStream</span> oout <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            oout<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="定义操作日志的应用接口"><a href="#定义操作日志的应用接口" class="headerlink" title="定义操作日志的应用接口"></a>定义操作日志的应用接口</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span><span class="token comment">/** * @Author: Sam * @Date: 2022-07-21 17:48 * @Description: 定义操作日志的应用接口 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">LogDbOperateApi</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 新增日志     */</span>    <span class="token keyword">void</span> <span class="token function">createLog</span><span class="token punctuation">(</span><span class="token class-name">LogModel</span> lm<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 修改日志     */</span>    <span class="token keyword">void</span> <span class="token function">updateLog</span><span class="token punctuation">(</span><span class="token class-name">LogModel</span> lm<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 删除日志     */</span>    <span class="token keyword">void</span> <span class="token function">removeLog</span><span class="token punctuation">(</span><span class="token class-name">LogModel</span> lm<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 获取所有日志     */</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LogModel</span><span class="token punctuation">></span></span> <span class="token function">getAllLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="适配器对象"><a href="#适配器对象" class="headerlink" title="适配器对象"></a>适配器对象</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span><span class="token comment">/** * @Author: Sam * @Date: 2022-07-21 17:47 * @Description: 适配器对象，将记录日志到文件的功能适配成第二版需要的增删改查功能 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Adapter</span> <span class="token keyword">implements</span> <span class="token class-name">LogDbOperateApi</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">LogFileOperateApi</span> adaptee<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Adapter</span><span class="token punctuation">(</span><span class="token class-name">LogFileOperateApi</span> adaptee<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>adaptee <span class="token operator">=</span> adaptee<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createLog</span><span class="token punctuation">(</span><span class="token class-name">LogModel</span> lm<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LogModel</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> adaptee<span class="token punctuation">.</span><span class="token function">readLogFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>lm<span class="token punctuation">)</span><span class="token punctuation">;</span>        adaptee<span class="token punctuation">.</span><span class="token function">writeLogFile</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateLog</span><span class="token punctuation">(</span><span class="token class-name">LogModel</span> lm<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LogModel</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> adaptee<span class="token punctuation">.</span><span class="token function">readLogFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLogId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>lm<span class="token punctuation">.</span><span class="token function">getLogId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                list<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> lm<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        adaptee<span class="token punctuation">.</span><span class="token function">writeLogFile</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeLog</span><span class="token punctuation">(</span><span class="token class-name">LogModel</span> lm<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LogModel</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> adaptee<span class="token punctuation">.</span><span class="token function">readLogFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>lm<span class="token punctuation">)</span><span class="token punctuation">;</span>        adaptee<span class="token punctuation">.</span><span class="token function">writeLogFile</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LogModel</span><span class="token punctuation">></span></span> <span class="token function">getAllLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> adaptee<span class="token punctuation">.</span><span class="token function">readLogFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="客户端调用类"><a href="#客户端调用类" class="headerlink" title="客户端调用类"></a>客户端调用类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span><span class="token comment">/** * @Author: Sam * @Date: 2022-07-22 09:35 * @Description: 适配器客户端 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 原接口调用     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">LogModel</span> lm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LogModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lm<span class="token punctuation">.</span><span class="token function">setLogId</span><span class="token punctuation">(</span><span class="token string">"001"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lm<span class="token punctuation">.</span><span class="token function">setOperateUser</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lm<span class="token punctuation">.</span><span class="token function">setOperateTime</span><span class="token punctuation">(</span><span class="token string">"2022-07-22 09:00:00"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lm<span class="token punctuation">.</span><span class="token function">setLogContent</span><span class="token punctuation">(</span><span class="token string">"这是一个测试"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LogModel</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>lm<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建操作日志文件对象</span>        <span class="token class-name">LogFileOperateApi</span> api <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LogFileOperate</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//保存日志文件</span>        api<span class="token punctuation">.</span><span class="token function">writeLogFile</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//读取日志文件的内容</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LogModel</span><span class="token punctuation">></span></span> readLog <span class="token operator">=</span> api<span class="token punctuation">.</span><span class="token function">readLogFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"readLog = "</span> <span class="token operator">+</span> readLog<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 使用适配器进行匹配转换     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">LogModel</span> lm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LogModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lm<span class="token punctuation">.</span><span class="token function">setLogId</span><span class="token punctuation">(</span><span class="token string">"001"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lm<span class="token punctuation">.</span><span class="token function">setOperateUser</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lm<span class="token punctuation">.</span><span class="token function">setOperateTime</span><span class="token punctuation">(</span><span class="token string">"2022-07-22 09:00:00"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lm<span class="token punctuation">.</span><span class="token function">setLogContent</span><span class="token punctuation">(</span><span class="token string">"这是一个测试"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建操作日志文件对象</span>        <span class="token class-name">LogFileOperateApi</span> logFileOperateApi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LogFileOperate</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">LogDbOperateApi</span> api <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Adapter</span><span class="token punctuation">(</span>logFileOperateApi<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//保存日志文件</span>        api<span class="token punctuation">.</span><span class="token function">createLog</span><span class="token punctuation">(</span>lm<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//读取日志文件的内容</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LogModel</span><span class="token punctuation">></span></span> allLog <span class="token operator">=</span> api<span class="token punctuation">.</span><span class="token function">getAllLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"allLog = "</span> <span class="token operator">+</span> allLog<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">allLog &#x3D; [LogModel(logId&#x3D;001, operateUser&#x3D;admin, operateTime&#x3D;2022-07-22 09:00:00, logContent&#x3D;这是一个测试), LogModel(logId&#x3D;001, operateUser&#x3D;admin, operateTime&#x3D;2022-07-22 09:00:00, logContent&#x3D;这是一个测试)]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上就是<code>适配器模式</code>介绍和示例了~</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java设计模式-外观模式</title>
      <link href="/blog/2022/07/22/design-facade/"/>
      <url>/blog/2022/07/22/design-facade/</url>
      
        <content type="html"><![CDATA[<h1 id="Java设计模式-外观模式"><a href="#Java设计模式-外观模式" class="headerlink" title="Java设计模式-外观模式"></a>Java设计模式-外观模式</h1><h2 id="什么是外观模式"><a href="#什么是外观模式" class="headerlink" title="什么是外观模式"></a>什么是外观模式</h2><p>外观（Facade）模式又叫作门面模式，是一种通过为多个复杂的子系统提供一个一致的接口，而使这些子系统更加容易被访问的模式。该模式对外有一个统一接口，外部应用程序不用关心内部子系统的具体细节，这样会大大降低应用程序的复杂度，提高了程序的可维护性。</p><p>外观模式的目的不是给子系统添加新的功能接口，而是为了让外部减少与子系统内多个模块的交互，松散耦合，从而让外部能够更简单地使用子系统。</p><p>这点要特别注意，因为外观是当作子系统对外的接口出现的，虽然也可以在这里定义一些子系统没有的功能，但不建议这么做.外观应该是包装已有的功能，它主要负责组合已有功能来实现客户需要，而不是添加新的实现。</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>【松散耦合】外观模式松散了客户端与子系统的耦合关系，让子系统内部的模块能更容易扩展和维护。</li><li>【简单易用】外观模式让子系统更加易用，客户端不再需要了解子系统内部的实现，也不需要跟众多子系统内部的模块进行交互，只需要跟外观交互就可以了，相当于外观类为外部客户端使用子系统提供了一站式服务。</li><li>【更好地划分访问的层次】通过合理使用Facade，可以帮助我们更好地划分访问的层次.有些方法是对系统外的，有些方法是系统内部使用的.把需要暴露给外部的功能集中到外观中，这样既方便客户端使用，也很好地隐藏了内部的细节。</li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li>过多的或者是不太合理的Facade也容易让人迷惑.到底是调用Facade好呢，还是直接调用模块好.</li></ul><h3 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h3><p><img src="facade-1.png" alt="facade-1"></p><h2 id="何时使用"><a href="#何时使用" class="headerlink" title="何时使用"></a>何时使用</h2><p>建议在如下情况时选用外观模式</p><ul><li><p>如果你希望为一个复杂的子系统提供一个简单接口的时候，可以考虑使用外观模式.使用外观对象来实现大部分客户需要的功能，从而简化客户的使用.如果想要让客户程序和抽象类的实现部分松散耦合，可以考虑使用外观模式，使用外观对象来将这个子系统与它的客户分离开来，从而提高子系统的独立性和可移植性.</p></li><li><p>如果构建多层结构的系统，可以考虑使用外观模式，使用外观对象作为每层的入口，这样可以简化层间调用，也可以松散层次之间的依赖关系.</p></li></ul><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><h3 id="A模块接口"><a href="#A模块接口" class="headerlink" title="A模块接口"></a>A模块接口</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Author: Sam * @Date: 2022-07-21 10:36 * @Description: A模块接口 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AModuleApi</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">testA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="A模块接口实现类"><a href="#A模块接口实现类" class="headerlink" title="A模块接口实现类"></a>A模块接口实现类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Author: Sam * @Date: 2022-07-21 10:37 * @Description: 实现类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AModuleApiImpl</span> <span class="token keyword">implements</span> <span class="token class-name">AModuleApi</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"现在在操作A模块里面的testA方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="B模块接口"><a href="#B模块接口" class="headerlink" title="B模块接口"></a>B模块接口</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Author: Sam * @Date: 2022-07-21 10:36 * @Description: B模块接口 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BModuleApi</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">testB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="B模块接口实现类"><a href="#B模块接口实现类" class="headerlink" title="B模块接口实现类"></a>B模块接口实现类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Author: Sam * @Date: 2022-07-21 10:37 * @Description: 实现类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BModuleApiImpl</span> <span class="token keyword">implements</span> <span class="token class-name">BModuleApi</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"现在在操作B模块里面的testB方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="C模块接口"><a href="#C模块接口" class="headerlink" title="C模块接口"></a>C模块接口</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Author: Sam * @Date: 2022-07-21 10:36 * @Description: C模块接口 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CModuleApi</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">testC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="C模块接口实现类"><a href="#C模块接口实现类" class="headerlink" title="C模块接口实现类"></a>C模块接口实现类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Author: Sam * @Date: 2022-07-21 10:37 * @Description: 实现类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CModuleApiImpl</span> <span class="token keyword">implements</span> <span class="token class-name">CModuleApi</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testC</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"现在在操作C模块里面的testC方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="外观对象"><a href="#外观对象" class="headerlink" title="外观对象"></a>外观对象</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Author: Sam * @Date: 2022-07-21 10:39 * @Description: 外观对象 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Facade</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 示意方法，满足客户需要的功能     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">AModuleApi</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AModuleApiImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token punctuation">.</span><span class="token function">testA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">BModuleApi</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BModuleApiImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        b<span class="token punctuation">.</span><span class="token function">testB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">CModuleApi</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CModuleApiImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">testC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="客户端调用类"><a href="#客户端调用类" class="headerlink" title="客户端调用类"></a>客户端调用类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Author: Sam * @Date: 2022-07-21 10:45 * @Description: 客户端 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//使用Facade</span>        <span class="token keyword">new</span> <span class="token class-name">Facade</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">现在在操作A模块里面的testA方法现在在操作B模块里面的testB方法现在在操作C模块里面的testC方法<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上就是<code>外观模式</code>介绍和示例了~</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java设计模式-简单工厂</title>
      <link href="/blog/2022/07/21/design-factory/"/>
      <url>/blog/2022/07/21/design-factory/</url>
      
        <content type="html"><![CDATA[<h1 id="Java设计模式-简单工厂"><a href="#Java设计模式-简单工厂" class="headerlink" title="Java设计模式-简单工厂"></a>Java设计模式-简单工厂</h1><h2 id="什么是简单工厂模式"><a href="#什么是简单工厂模式" class="headerlink" title="什么是简单工厂模式"></a>什么是简单工厂模式</h2><p>定义一个工厂类，该类提供一个静态方法，该方法会根据传入的参数的不同来创建不同的实例。</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>【帮助封装】简单工厂虽然很简单，但是非常友好地帮助我们实现了组件的封装，然后让组件外部能真正面向接口编程。</li><li>【解耦】通过简单工厂，实现了客户端和具体实现类的解耦。</li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li>【可能增加客户端的复杂度】如果通过客户端的参数来选择具体的实现类，那么就必须让客户端能理解各个参数所代表的具体功能和含义，这样会增加客户端使用的难度，也部分暴露了内部实现，这种情况可以选用可配置的方式来实现。</li><li>【不方便扩展子工厂】私有化简单工厂的构造方法，使用静态方法来创建接口，也就不能通过写简单工厂类的子类来改变创建接口的方法的行为了.不过，通常情况下是不需要为简单工厂创建子类的。</li></ul><h3 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h3><p><img src="factory-1.png" alt="factory-1"></p><h2 id="何时使用"><a href="#何时使用" class="headerlink" title="何时使用"></a>何时使用</h2><p>建议在以下情况中选用简单工厂</p><ul><li><p>如果想要完全封装隔离具体实现，让外部只能通过接口来操作封装体，那么可以选用简单工厂，让客户端通过工厂来获取相应的接口，而无须关心具体的实现。</p></li><li><p>如果想要把对外创建对象的职责集中管理和控制，可以选用简单工厂，一个简单工厂可以创建很多的、不相关的对象，可以把对外创建对象的职责集中到一个简单工厂来，从而实现集中管理和控制。</p></li></ul><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><h3 id="创建工厂类"><a href="#创建工厂类" class="headerlink" title="创建工厂类"></a>创建工厂类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Author: Sam * @Date: 2022/7/21 9:41 * @Description: 简单工厂创建 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Api</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">operation</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="创建实现类A"><a href="#创建实现类A" class="headerlink" title="创建实现类A"></a>创建实现类A</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Author: Sam * @Date: 2022-07-21 09:41 * @Description: 具体实现对象A */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ImpA</span> <span class="token keyword">implements</span> <span class="token class-name">Api</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operation</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ImpA s = "</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="创建实现类B"><a href="#创建实现类B" class="headerlink" title="创建实现类B"></a>创建实现类B</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Author: Sam * @Date: 2022-07-21 09:41 * @Description: 具体实现对象B */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ImpB</span> <span class="token keyword">implements</span> <span class="token class-name">Api</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operation</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ImpB s = "</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="创建工厂类-1"><a href="#创建工厂类-1" class="headerlink" title="创建工厂类"></a>创建工厂类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Author: Sam * @Date: 2022-07-21 09:43 * @Description: 工厂类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Factory</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 具体创建Api对象的方法     *     * @param condition     * @return 创建好的Api对象     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Api</span> <span class="token function">createApi</span><span class="token punctuation">(</span><span class="token keyword">int</span> condition<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//应该根据某些条件去选择究竟创建哪一个具体的实现对象</span>        <span class="token comment">//这些条件可以从外部传入,也可以从其他途径来获取。</span>        <span class="token comment">//如果只有一个实现,可以省略条件,因为没有选择的必要。</span>        <span class="token comment">//示意使用条件</span>        <span class="token class-name">Api</span> api <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>condition <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            api <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ImpA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>condition <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            api <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ImpB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> api<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="客户端调用类"><a href="#客户端调用类" class="headerlink" title="客户端调用类"></a>客户端调用类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Author: Sam * @Date: 2022-07-21 09:48 * @Description: 客户端使用Api */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Api</span> api <span class="token operator">=</span> <span class="token class-name">Factory</span><span class="token punctuation">.</span><span class="token function">createApi</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        api<span class="token punctuation">.</span><span class="token function">operation</span><span class="token punctuation">(</span><span class="token string">"正在使用简单工厂"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><blockquote><p>ImpA s = 正在使用简单工厂</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上就是<code>简单工厂</code>介绍和示例了~</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql-帮助文档</title>
      <link href="/blog/2022/07/15/mysql-help/"/>
      <url>/blog/2022/07/15/mysql-help/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL帮助文档"><a href="#MySQL帮助文档" class="headerlink" title="MySQL帮助文档"></a>MySQL帮助文档</h1><h2 id="数据库一张表卡死的解决方案"><a href="#数据库一张表卡死的解决方案" class="headerlink" title="数据库一张表卡死的解决方案"></a>数据库一张表卡死的解决方案</h2><p>运行如下语句查看卡死的线程，有个时间字段可以看出卡住了多长时间</p><blockquote><p>select * from information_schema.innodb_trx;</p></blockquote><p>运行如下语句可杀死线程，全部杀死后，数据库恢复正常</p><blockquote><p>kill trx_mysql_thread_id</p></blockquote><p>查询连接池连接数</p><blockquote><p>show full processlist</p></blockquote><p>查看最大连接数</p><blockquote><p>show variables like ‘%max_connections%’;</p></blockquote><p>修改最大连接数(mysql重启后会失效)</p><blockquote><p>set GLOBAL max_connections = 8800;</p></blockquote><p>设置局域网访问权限</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">use mysql<span class="token punctuation">;</span> update user <span class="token builtin class-name">set</span> <span class="token function">host</span> <span class="token operator">=</span> <span class="token string">'%'</span> where user <span class="token operator">=</span> <span class="token string">'root'</span><span class="token punctuation">;</span>GRANT ALL PRIVILEGES ON *.* TO <span class="token string">'root'</span>@<span class="token string">'%'</span> IDENTIFIED BY <span class="token string">'root'</span> WITH GRANT OPTION<span class="token punctuation">;</span>flush privileges<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">命令中的两个星号，第一个星号表示数据库名称，第二个星号表示该数据库下的某个表名称。写成两个星号表示所有的数据库都进行授权。root表示授权root账号。“%”表示授权的用户IP可以指定，这里代表任意的IP地址都能访问MySQL数据库。“password”表示分配账号对应的密码，这里密码自己替换成你的mysql root帐号密码。“WITH GRANT OPTION” 这个选项表示该用户可以将自己拥有的权限授权给别人。注意：经常有人在创建操作用户的时候不指定WITH GRANT OPTION选项导致后来该用户不能使用GRANT命令创建用户或者给其它用户授权。如果不想这个用户有这个grant的权限，可以不加这句<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>grant all PRIVILEGES on testdabatase.testtable to username@’192.168.0.2’ identified by ‘user-pass’;</p><h2 id="基本指令"><a href="#基本指令" class="headerlink" title="基本指令"></a>基本指令</h2><ol><li>列出所有的数据库</li></ol><blockquote><p>show databases;</p></blockquote><ol start="2"><li>切换数据库</li></ol><blockquote><p>use 数据库的名字;</p></blockquote><ol start="3"><li>列出所有的表</li></ol><blockquote><p>show tables;</p></blockquote><ol start="4"><li>显示数据表结构</li></ol><blockquote><p>desc 表名;</p></blockquote><ol start="5"><li>删除数据库</li></ol><blockquote><p>drop databases 数据库名</p></blockquote><ol start="6"><li>删除数据表</li></ol><blockquote><p>drop table 数据表</p></blockquote><ol start="7"><li>查看mysql版本</li></ol><blockquote><p>select version();</p></blockquote><ol start="8"><li>查看当前的时间</li></ol><blockquote><p>select now();</p></blockquote><ol start="9"><li>查看当前登录的用户名</li></ol><blockquote><p>select user();</p></blockquote><blockquote><ol start="10"><li>查看数据库的编码方式</li></ol></blockquote><blockquote><p>show create database 数据库名;</p></blockquote><ol start="11"><li>查看错误信息</li></ol><blockquote><p>show warnings;</p></blockquote><ol start="12"><li>创建一个gbk格式的数据库</li></ol><blockquote><p>create database if not exists 数据库名 character set gbk;</p></blockquote><ol start="13"><li>修改数据库的编码方式</li></ol><blockquote><p>alter database 数据库名 character set=utf8;</p></blockquote><ol start="14"><li>直接查看某个库有多少张表</li></ol><blockquote><p>show tables from 数据库名；</p></blockquote><ol start="15"><li>直接查看当前处于哪个数据库</li></ol><blockquote><p>select database();</p></blockquote><ol start="16"><li>查看表的结构</li></ol><blockquote><p>show columns from 表名；</p></blockquote><ol start="17"><li>添加一列到某个字段的后面</li></ol><blockquote><p>alter table 表名 add 将要添加的字段 varchar(10) after 某个字段</p></blockquote><ol start="18"><li>添加一列到第一列</li></ol><blockquote><p>alter table 表名 add 添加的字段名 varchar(10) first</p></blockquote><ol start="19"><li>删除多列</li></ol><blockquote><p>alter table 表名 drop xxx,drop xxx;</p></blockquote><ol start="20"><li>增加一个主键列</li></ol><blockquote><p>alter table表名 add constraint 列名 primary key (id)</p></blockquote><ol start="21"><li>增加唯一约束列</li></ol><blockquote><p>alter table 表名 add unique (列名)</p></blockquote><ol start="22"><li>设置客户端的编码方式</li></ol><blockquote><p>set names gbk;</p></blockquote><ol start="23"><li>删除主键约束</li></ol><blockquote><p>alter table 表名 drop primary key;</p></blockquote><ol start="24"><li>删除唯一约束，不删除字段</li></ol><blockquote><p>alter table 表名 drop index 列名</p></blockquote><ol start="25"><li>查看外键约束索引</li></ol><blockquote><p>show indexes from 表名\G</p></blockquote><p>当数据库插入、修改报以下错误说明数据库被锁定了，检查是否数据库磁盘空间满了，清除部分数据后，数据库会自动解锁<br>SQL Error (1290): The MySQL server is running with the –rds-read-and-drop-only option so it cannot execute this statement</p><h2 id="导出指令"><a href="#导出指令" class="headerlink" title="导出指令"></a>导出指令</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">mysqldump -u账号 -p密码 数据库名 表名 <span class="token operator">></span>存放路径<span class="token punctuation">;</span>mysqldump -uroot -proot cloud_db sys_user <span class="token operator">></span>/home/user.sql<span class="token comment">#遇到异常</span>mysqldump: Got error: <span class="token number">2002</span>: Can<span class="token string">'t connect to local MySQL server through socket '</span>/data/mysql/mysql.sock' <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> when trying to connect<span class="token comment">#找到正确的套接字的路径</span><span class="token function">netstat</span> -ln <span class="token operator">|</span> <span class="token function">grep</span> mysql再运行dump命令：mysqldump --socket<span class="token operator">=</span>/usr/local/mysql/mysql.sock -uroot -hroot -proot cloud_db sys_user <span class="token operator">></span>/home/user.sql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql事务</title>
      <link href="/blog/2022/07/12/mysql-transaction/"/>
      <url>/blog/2022/07/12/mysql-transaction/</url>
      
        <content type="html"><![CDATA[<h1 id="Mysql事务"><a href="#Mysql事务" class="headerlink" title="Mysql事务"></a>Mysql事务</h1><h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p>1、在MySQL中只有Innodb存储引擎的数据库才支持事务</p><p>2、事务处理可以用来维护数据的完整性，保证一组数据操作，要么全部成功，要么全部失败</p><p>3、事务主要用来管理insert，update，delete语句</p><h2 id="二、事务的基本要素（ACID）"><a href="#二、事务的基本要素（ACID）" class="headerlink" title="二、事务的基本要素（ACID）"></a>二、事务的基本要素（ACID）</h2><p>1、原子性（Atomicity）：事务开始后的所有操作，<strong>要么全部完成，要么全部失败</strong>,一旦在某个环节发生错误，之前执行的操作会被<strong>回滚</strong> （Rollback）到事务开始前的状态。</p><p>2、一致性（Consistency）：在事务开始之前和结束之后，数据库的完整性没有被破坏。<strong>比如A向B转账，不可能A扣了钱，B却没收到。</strong></p><p>3、隔离性（Isolation）：同一时间，只允许一个事务请求同一条数据，不同的事务之前彼此没有任何干扰。</p><p>4、持久性（Durability）:事务完成后，事务对数据库的所有更新将被保存到数据库，不能回滚</p><h2 id="三、事务的实现原理"><a href="#三、事务的实现原理" class="headerlink" title="三、事务的实现原理"></a>三、事务的实现原理</h2><p>mysql没执行一条聚聚记录一条日志</p><p>1、start transaction，先记个日志，真正执行。</p><h2 id="四、事务的相关指令"><a href="#四、事务的相关指令" class="headerlink" title="四、事务的相关指令"></a>四、事务的相关指令</h2><p><strong>事务的开始</strong></p><p><code>begin</code>或<code>start trancaction</code>都是显式开启一个事务；</p><p><strong>事务的提交</strong></p><p><code>commit</code>或<code>commit work</code> 都是等价的</p><p><strong>事务回滚</strong></p><p><code>rollback</code>或<code>rollback word</code>也是等价的</p><p><strong>示例</strong>:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">start transaction<span class="token punctuation">;</span> <span class="token comment">#开启事务 还可以用begin开启事务</span>UPDATE user <span class="token builtin class-name">set</span> balance <span class="token operator">=</span> balance - <span class="token number">200</span> where <span class="token function">id</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> UPDATE user <span class="token builtin class-name">set</span> balance <span class="token operator">=</span> balance + <span class="token number">200</span> where <span class="token function">id</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>commit<span class="token punctuation">;</span> <span class="token comment"># 提交事务，代表事务结束。更新的数据保存到数据库</span>start transaction<span class="token punctuation">;</span> <span class="token comment">#开启事务</span>UPDATE user <span class="token builtin class-name">set</span> balance <span class="token operator">=</span> balance - <span class="token number">200</span> where <span class="token function">id</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> UPDATE user <span class="token builtin class-name">set</span> balance <span class="token operator">=</span> balance + <span class="token number">200</span> where <span class="token function">id</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> rollback<span class="token punctuation">;</span> <span class="token comment"># 事务回滚，上面更新的数据将被还原到执行前</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、事务的并发问题"><a href="#五、事务的并发问题" class="headerlink" title="五、事务的并发问题"></a>五、事务的并发问题</h2><p>1、脏读：事务A读取了事务B更新的数据，然后B回滚操作，那么A读取到的数据是脏数据</p><p>2、不可重复读：事务 A 多次读取同一数据，事务 B 在事务A多次读取的过程中，对数据作了更新并提交，导致事务A多次读取同一数据时，结果不一致。</p><p>3、幻读：系统管理员A将数据库中所有学生的成绩从具体分数改为ABCDE等级，但是系统管理员B就在这个时候插入了一条具体分数的记录，当系统管理员A改结束后发现还有一条记录没有改过来，就好像发生了幻觉一样，这就叫幻读。</p><p><strong>小结：不可重复读的和幻读很容易混淆，不可重复读侧重于修改，幻读侧重于新增或删除。解决不可重复读的问题只需锁住满足条件的行，解决幻读需要锁表</strong></p><h2 id="六、事务的隔离级别"><a href="#六、事务的隔离级别" class="headerlink" title="六、事务的隔离级别"></a>六、事务的隔离级别</h2><p><strong>MySQL的默认隔离级别是可重复读</strong></p><table><thead><tr><th align="left">事务隔离级别</th><th align="left">脏读</th><th align="left">不可重复读</th><th align="left">幻读</th></tr></thead><tbody><tr><td align="left">读未提交（Read Uncommitted）</td><td align="left">是</td><td align="left">是</td><td align="left">是</td></tr><tr><td align="left">读已提交（Read Committed）</td><td align="left">否</td><td align="left">是</td><td align="left">是</td></tr><tr><td align="left">可重复读（Repeatable Read）</td><td align="left">否</td><td align="left">否</td><td align="left">是</td></tr><tr><td align="left">串行化（Serializable）</td><td align="left">否</td><td align="left">否</td><td align="left">否</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql索引</title>
      <link href="/blog/2022/07/12/mysql-index/"/>
      <url>/blog/2022/07/12/mysql-index/</url>
      
        <content type="html"><![CDATA[<h1 id="Mysql索引"><a href="#Mysql索引" class="headerlink" title="Mysql索引"></a>Mysql索引</h1><h3 id="一、什么是索引？"><a href="#一、什么是索引？" class="headerlink" title="一、什么是索引？"></a>一、什么是索引？</h3><p>拿汉语字典的目录页（索引）打比方，我们可以按拼音、笔画、偏旁部首等排序的目录（索引）快速查找到需要的字。</p><h3 id="二、索引的优缺点"><a href="#二、索引的优缺点" class="headerlink" title="二、索引的优缺点?"></a>二、索引的优缺点?</h3><p><strong>优点：</strong></p><p>1、索引可以大大提高MySQL的检索速度。</p><p>2、所有的MySql列类型(字段类型)都可以被索引，可以给任意字段设置索引</p><p><strong>缺点：</strong></p><p>1、虽然索引大大提高了查询速度，同时却会降低更新表的速度，如对表进行INSERT、UPDATE和DELETE。因为更新表时，MySQL不仅要保存数据，还要保存索引文件。<br>2、建立索引会占用磁盘空间的索引文件。一般情况这个问题不太严重，但如果你在一个大表上创建了多种组合索引，索引文件的会膨胀很快。<br>3、对于离散度较差的数据，为它建立索引就没有太大的实际效果。比如：性别字段<br>4、对于非常小的表，大部分情况下简单的全表扫描更高效。</p><h3 id="三、索引的分类"><a href="#三、索引的分类" class="headerlink" title="三、索引的分类"></a>三、索引的分类</h3><h4 id="1、按列来区分："><a href="#1、按列来区分：" class="headerlink" title="1、按列来区分："></a>1、按列来区分：</h4><p><strong>索引分单列索引和复合索引。</strong></p><p><strong>单列索引：</strong>即一个索引只包含单个列，一个表可以有多个单列索引，但这不是组合索引。</p><p><strong>复合索引：</strong>即一个索引包含多个列。</p><hr><p><strong>注1：复合索引有哪些好处？</strong></p><p><strong>减少开销：</strong>建一个复合索引 (Gid,Cid,SId) ，实际相当于建了 (Gid)、(Gid,Cid)、(Gid,Cid,SId) 三个索引。每多一个索引，都会增加写操作的开销和磁盘空间的开销。对于大量数据的表，使用复合索引会大大的减少开销！</p><p><strong>覆盖索引：</strong><code>select Gid,Cid,SId from student where Gid =1 and Cid =2</code>。那么MySQL可以直接通过遍历索引取得数据，而无需回表，这减少了很多的随机IO操作。减少IO操作，特别的随机IO其实是DBA主要的优化策略。所以，在真正的实际应用中，覆盖索引是主要的提升性能的优化手段之一。</p><p><strong>效率高：</strong>索引列越多，通过索引筛选出的数据越少。有1000W条数据的表，有如下sql:<code>select from table where Gid =1 and Cid =2 and SId =3</code>,假设假设每个条件可以筛选出10%的数据，如果只有单值索引，那么通过该索引能筛选出1000W10%=100w条数据，然后再回表从100w条数据中找到符合<code> Gid =2 and Cid = 3</code>的数据，然后再排序，再分页；如果是复合索引，通过索引筛选出1000w10% 10% *10%=1w，效率提升可想而知！</p><p><strong>缺点：</strong>复合索引越多，索引列越多，则创建的索引越多，索引都是存储在磁盘里的，通过索引算法 BTree代表索引算法使用二叉树的形式来做索引的)来查找数据，的确可以极大的提高查询效率，但是与此同时增删改的同时，需要更新索引，同样是需要花时间的，并且索引所占的磁盘空间也不小。</p><p><strong>建议：</strong>单表尽可能不要超过一个复合索引，单列索引不超过3个</p><p><strong>注2：复合索引的注意事项</strong><br>1、<strong>最左前缀匹配原则：</strong> 非常重要的原则，mysql会一直向右匹配直到遇到范围查询(&gt;、&lt;、between、 like)就停止匹配，比如a = 1 and b = 2 and c &gt; 3 and d = 4 如果建立(a,b,c,d)顺序的索引，d是用不到索引的，如果建立(a,b,d,c)的索引则都可以用到，a,b,d的顺序可以任意调整。<br>2、=和in可以乱序，比如a = 1 and b = 2 and c = 3 建立(a,b,c)索引可以任意顺序，mysql的查询优化器会 帮你优化成索引可以识别的形式。</p><hr><h4 id="2、按数据存储方式区分："><a href="#2、按数据存储方式区分：" class="headerlink" title="2、按数据存储方式区分："></a>2、按数据存储方式区分：</h4><p><strong>索引分聚簇索引和非聚簇索引</strong></p><p><strong>聚簇索引：</strong>聚簇索引就是按照每张表的主键构造一颗B+树 。 同时叶子节点中存放的就是整张表的行记录数据，也将聚集索引的叶子节点称为数据页。 这个特性决定了索引组织表中数据也是索引的一部分，每张表只能拥有一个聚簇索引。</p><hr><p><strong>注</strong>：Innodb通过主键聚集数据，如果没有定义主键，innodb会选择非空的唯一索引代替。如果没有这样的索引，innodb会隐式的定义一个主键来作为聚簇索引。</p><hr><p><strong>非聚簇索引：</strong>聚簇索引之上创建的索引称之为非聚簇索引（也称为辅助索引）。辅助索引访问数据需要二次查找，辅助索引叶子节点存储的不再是行的物理位置，而是主键值。通过辅助索引首先找到的是主键值，再通过主键值找到数据行的数据页（这个过程叫<strong>回表</strong>）</p><h4 id="3、按作用区分"><a href="#3、按作用区分" class="headerlink" title="3、按作用区分"></a>3、按作用区分</h4><p><strong>主键索引（primary key）：</strong>也简称主键，提供唯一性约束并不允许为空。一张表中只能有一个主键。被标记为自动增长的字段一定是主键，但主键不一定是自动增长。一般把主键定义在无意义的字段上（如：编号）</p><p><strong>普通索引（normal）：</strong>普通索引是最基本的索引，它没有任何限制，值可以为空，仅加速查询</p><p><strong>唯一索引（unique）：</strong> 唯一索引与普通索引类似，不同的就是：索引列的值必须唯一，但允许有空值。如果是组合索引，则列值的组合必须唯一</p><p><strong>全文索引（fulltext）：</strong>全文索引主要用来查找文本中的关键字，而不是直接与索引中的值相比较。fulltext索引跟其它索引大不相同，它更像是一个搜索引擎</p><p><strong>空间索引（spatial）：</strong>MySQL在5.7之后的版本支持了空间索引，而且支持OpenGIS几何数据模型。这是在地理位置领域使用的一种索引，其他场景用的很少</p><h3 id="四、MySQL索引失效的几种情况"><a href="#四、MySQL索引失效的几种情况" class="headerlink" title="四、MySQL索引失效的几种情况"></a>四、MySQL索引失效的几种情况</h3><p><strong>1、有or必须将or条件中的每个列都加上索引，否则索引无效;</strong></p><p><strong>2、复合索引未用左列字段;</strong></p><p><strong>3、like以%开头;</strong></p><p><strong>4、需要类型转换;</strong></p><p><strong>5、where中索引列有运算;</strong></p><p><strong>6、where中索引列使用了函数;</strong></p><p><strong>7、如果mysql觉得全表扫描更快时（数据少）;</strong></p><h3 id="五、MySQL存储引擎InnoDB和MyISAM的区别"><a href="#五、MySQL存储引擎InnoDB和MyISAM的区别" class="headerlink" title="五、MySQL存储引擎InnoDB和MyISAM的区别"></a>五、MySQL存储引擎InnoDB和MyISAM的区别</h3><p><strong>1、介绍</strong></p><ul><li><strong>MyISAM：</strong>在MySQL 5.1 及之前的版本，MyISAM是默认引擎。MyISAM提供的大量的特性，包括全文索引、压缩、空间函数（GIS）等，但MyISAM并不支持事务以及行级锁，而且一个毫无疑问的缺陷是崩溃后无法安全恢复。</li><li><strong>InnoDB：</strong>MySQL默认的事务型引擎，也是最重要和使用最广泛的存储引擎。它被设计成为大量的短期事务，短期事务大部分情况下是正常提交的，很少被回滚。</li></ul><p><strong>2、存储结构</strong></p><ul><li><strong>MyISAM：</strong>每个MyISAM在磁盘上存储成三个文件。分别为：<strong>表定义文件、数据文件、索引文件。</strong></li><li><strong>InnoDB：</strong>基于磁盘的资源是InnoDB表空间数据文件和它的日志文件，InnoDB 表的大小只受限于操作系统文件的大小，一般为 2GB</li></ul><p><strong>3、事务支持</strong></p><ul><li><strong>MyISAM：</strong>强调的是性能，每次查询具有原子性,其执行数度比InnoDB类型更快，但是不提供事务支持。</li><li><strong>InnoDB：</strong>提供事务支持事务，外部键等高级数据库功能。 具有事务(commit)、回滚(rollback)和崩溃修复能力(crash recovery capabilities)的事务安全(transaction-safe (ACID compliant))型表。</li></ul><p><strong>4、锁支持</strong></p><ul><li><strong>MyISAM：</strong> 只支持表级锁，用户在操作myisam表时，select，update，delete，insert语句都会给表自动加锁，如果加锁以后的表满足insert并发的情况下，可以在表的尾部插入新的数据。</li><li><strong>InnoDB：</strong> 支持事务和行级锁，是innodb的最大特色。行锁大幅度提高了多用户并发操作的性能。但是InnoDB的行锁，只是在WHERE的主键是有效的，非主键的WHERE都会锁全表的。</li></ul><p><strong>5、统计行数</strong></p><ul><li><strong>MyISAM：</strong>用一个变量保存了整个表的行数，执行上述语句时只需要读出该变量即可，速度很快（注意不能加有任何WHERE条件）。</li><li><strong>InnoDB：</strong>不保存表的具体行数，执行select count(*) from table时需要全表扫描。</li></ul><p><strong>6、外键支持</strong></p><ul><li><strong>MyISAM：</strong>不支持</li><li><strong>InnoDB：</strong>支持</li></ul><p><strong>7、聚簇索引</strong></p><ul><li><strong>MyISAM：</strong>myisam不是聚集索引</li><li>**InnoDB： **InnoDB是聚集索引，使用B+Tree作为索引结构，数据文件是和（主键）索引绑在一起的（表数据文件本身就是按B+Tree组织的一个索引结构），必须要有主键，通过主键索引效率很高。</li></ul><p><strong>8、MVVC</strong></p><ul><li><strong>MyISAM：</strong>不支持</li><li><strong>InnoDB：</strong>支持</li></ul><p><strong>9、全文索引</strong></p><ul><li><strong>MyISAM：</strong>支持</li><li><strong>InnoDB：</strong>部分版本不支持(但可以使用Sphinx插件)；</li></ul><h3 id="六、索引数据结构"><a href="#六、索引数据结构" class="headerlink" title="六、索引数据结构"></a>六、索引数据结构</h3><p>MySQL中最常用的为InnoDB存储引擎，而索引的数据结构最为常用和有效为B+Tree（B树）。</p><p>B+树是B-树的变体，也是一种多路搜索树。B+Tree和B-Tree的区别在于：</p><p>1、B+Tree只在叶子节点存数据，非叶子节点存指针和键值。</p><p>2、为所有的叶子节点新增一个链指针。</p><h3 id="七、explain关键字"><a href="#七、explain关键字" class="headerlink" title="七、explain关键字"></a>七、explain关键字</h3><p>explain的执行结果</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mysql<span class="token operator">></span> explain <span class="token keyword">select</span> * from subject where <span class="token function">id</span> <span class="token operator">=</span> <span class="token number">1</span> ****************************************************** id: <span class="token number">1</span> //select查询的序列号，包含一组数字，表示查询中执行select子句或操作表的顺序select_type: SIMPLE //查询类型table: subject  //正在访问哪个表partitions: NULL  //匹配的分区type: const //访问的类型possible_keys: PRIMARY  //显示可能应用在这张表中的索引，一个或多个，但不一定实际使用到key: PRIMARY //实际使用到的索引，如果为NULL，则没有使用索引key_len: <span class="token number">4</span> //表示索引中使用的字节数，可通过该列计算查询中使用的索引的长度ref: const  //显示索引的哪一列被使用了，如果可能的话，是一个常数，哪些列或常量被用于查找索引列上的值rows: <span class="token number">1</span> //根据表统计信息及索引选用情况，大致估算出找到所需的记录所需读取的行数filtered: <span class="token number">100.00</span>  //查询的表行占表的百分比Extra: NULL  //包含不适合在其它列中显示但十分重要的额外信息******************************************************<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo配置nginx代理页面</title>
      <link href="/blog/2022/07/12/hexo-nginx-config/"/>
      <url>/blog/2022/07/12/hexo-nginx-config/</url>
      
        <content type="html"><![CDATA[<h1 id="hexo配置nginx代理页面"><a href="#hexo配置nginx代理页面" class="headerlink" title="hexo配置nginx代理页面"></a>hexo配置nginx代理页面</h1><h3 id="用hexo生成页面"><a href="#用hexo生成页面" class="headerlink" title="用hexo生成页面"></a>用hexo生成页面</h3><ol><li><p>修改hexo配置_config.yml的root资源目录根路径  当前hexo是在/home/hexo下</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">vim</span> _config.yml<span class="token comment">#将root属性的 / 改成 /blog  对应nginx </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>修改页面作者信息</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">vim</span> _config.yml  <span class="token comment">#根目录下的</span><span class="token comment">#将author 改成 Sam </span>title: Hexosubtitle: <span class="token string">''</span>description: <span class="token string">''</span>keywords:author: Samlanguage: entimezone: <span class="token string">''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>修改matery about页面下的信息</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token builtin class-name">cd</span> themes/hexo-theme-matery<span class="token function">vim</span> _config.yml<span class="token comment">#修改socialLink下的配置</span>socialLink:  github:  https://github.com/???  email: ???@qq.com  facebook: <span class="token comment"># https://www.facebook.com/xxx</span>  twitter: <span class="token comment"># https://twitter.com/xxx</span>  qq: ???  weibo: <span class="token comment"># https://weibo.com/xxx</span>  zhihu: <span class="token comment"># https://www.zhihu.com/xxx</span>  rss: <span class="token boolean">true</span> <span class="token comment"># true、false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>到根目录下运行指令</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">hexo clean    <span class="token comment">#清空原始页面</span>hexo g        <span class="token comment">#生成静态页面 /public</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h2 id="配置nginx-conf"><a href="#配置nginx-conf" class="headerlink" title="配置nginx.conf"></a>配置nginx.conf</h2><ol><li><p>配置nginx.conf</p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">location &#x2F;blog&#x2F; &#123;    alias  &#x2F;home&#x2F;hexo&#x2F;public&#x2F;;  #指定到hexo生成的public页面中&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>启动nginx</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">./nginx -t./nginx 或者 ./nginx -s reload<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>hexo生成的页面使用nginx的alias解析到绝对路径下，使用 <a href="http://ip:port/blog即可访问到！">http://ip:port/blog即可访问到！</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>maven无法识别本地jar</title>
      <link href="/blog/2022/07/11/maven-unrecognized/"/>
      <url>/blog/2022/07/11/maven-unrecognized/</url>
      
        <content type="html"><![CDATA[<h1 id="maven无法识别本地jar"><a href="#maven无法识别本地jar" class="headerlink" title="maven无法识别本地jar"></a>maven无法识别本地jar</h1><p>以前用的私服，现在不使用了，更改了maven 的 setting 设置，导致本地有jar但是maven无法引入；</p><p>可以先执行第三条，不行再执行其他的</p><h2 id="1-注意事项和位置"><a href="#1-注意事项和位置" class="headerlink" title="1.注意事项和位置"></a>1.注意事项和位置</h2><p>创建bat 文件</p><ul><li><code>.bat文件要和仓库在同一平级目录</code></li><li><code>REPOSITORY_PATH要改成你自己仓库的地址</code></li></ul><h2 id="2、删除-lastUpdated文件-失败的jar包"><a href="#2、删除-lastUpdated文件-失败的jar包" class="headerlink" title="2、删除.lastUpdated文件(失败的jar包)"></a>2、删除.lastUpdated文件(失败的jar包)</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token builtin class-name">set</span> <span class="token assign-left variable">REPOSITORY_PATH</span><span class="token operator">=</span>D:<span class="token punctuation">\</span>maven<span class="token punctuation">\</span>repository<span class="token keyword">for</span> /f <span class="token string">"delims="</span> %%i <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token string">'dir /b /s "%REPOSITORY_PATH%\*lastUpdated*"'</span><span class="token punctuation">)</span> <span class="token keyword">do</span> <span class="token punctuation">(</span>    del /s /q %%i<span class="token punctuation">)</span>pause<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3、删除-remote-repositories文件（主要）"><a href="#3、删除-remote-repositories文件（主要）" class="headerlink" title="3、删除_remote.repositories文件（主要）"></a>3、删除_remote.repositories文件（主要）</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token builtin class-name">set</span> <span class="token assign-left variable">REPOSITORY_PATH</span><span class="token operator">=</span>D:<span class="token punctuation">\</span>maven<span class="token punctuation">\</span>repositoryrem 正在搜索<span class="token punctuation">..</span>.<span class="token keyword">for</span> /f <span class="token string">"delims="</span> %%i <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token string">'dir /b /s "%REPOSITORY_PATH%\*_remote.repositories*"'</span><span class="token punctuation">)</span> <span class="token keyword">do</span> <span class="token punctuation">(</span>    del /s /q %%i<span class="token punctuation">)</span>rem 搜索完毕pause<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4、删除-maven-repositories文件-没影响可留"><a href="#4、删除-maven-repositories文件-没影响可留" class="headerlink" title="4、删除_maven.repositories文件(没影响可留)"></a>4、删除_maven.repositories文件(没影响可留)</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token builtin class-name">set</span> <span class="token assign-left variable">REPOSITORY_PATH</span><span class="token operator">=</span>D:<span class="token punctuation">\</span>maven<span class="token punctuation">\</span>repositoryrem 正在搜索<span class="token punctuation">..</span>.<span class="token keyword">for</span> /f <span class="token string">"delims="</span> %%i <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token string">'dir /b /s "%REPOSITORY_PATH%\*_maven.repositories*"'</span><span class="token punctuation">)</span> <span class="token keyword">do</span> <span class="token punctuation">(</span>    del /s /q %%i<span class="token punctuation">)</span>rem 搜索完毕pause<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>yum安装mysql8</title>
      <link href="/blog/2022/04/28/mysql-install/"/>
      <url>/blog/2022/04/28/mysql-install/</url>
      
        <content type="html"><![CDATA[<h1 id="Centos8-yum-安装mysql8"><a href="#Centos8-yum-安装mysql8" class="headerlink" title="Centos8 yum 安装mysql8"></a>Centos8 yum 安装mysql8</h1><h2 id="yum-安装mysql8"><a href="#yum-安装mysql8" class="headerlink" title="yum 安装mysql8"></a>yum 安装mysql8</h2><ol><li><p>获取官方下载地址 <a href="https://dev.mysql.com/downloads/repo/yum/">https://dev.mysql.com/downloads/repo/yum/</a></p></li><li><p>下载mysql安装包 ：wget <a href="https://repo.mysql.com//mysql80-community-release-el8-1.noarch.rpm">https://repo.mysql.com//mysql80-community-release-el8-1.noarch.rpm</a></p></li><li><p>将下载好的安装包挂载到本地 找个路径放 cd /home/package<br>yum localinstall mysql80-community-release-el8-1.noarch.rpm</p></li><li><p>查看是否挂载成功<br>yum repolist enabled | grep “mysql.<em>-community.</em>“</p></li><li><p>禁用centos8.0自带的mysql模块<br>yum module disable mysql</p></li><li><p>安装mysql：yum install mysql-community-server</p></li><li><p>启动mysql服务<br>systemctl mysqld start</p></li><li><p>查看mysql服务启动状态<br>systemctl mysqld status</p></li><li><p>查看mysql安装时生成的随机密码<br>grep ‘temporary password’ /var/log/mysqld.log</p></li><li><p>登录mysql<br>mysql -uroot -p’刚获取到的随机密码’</p></li><li><p>修改登录密码<br>ALTER USER ‘root’ @’localhost’ IDENTIFIED BY ‘您的密码’;<br>出现这个问题，表示密码过于简单<br>ERROR 1819 (HY000): Your password does not satisfy the current policy requirements</p></li><li><p>开放mysql远程访问<br>创建权限记录：<br>CREATE user ‘root‘@’%’ IDENTIFIED BY ‘您的密码’;<br>授权：<br>GRANT ALL PRIVILEGES ON <em>.</em> TO ‘root’ @’%’ WITH GRANT OPTION;<br>修改密码过期策略：<br>ALTER USER ‘root’ @’localhost’ IDENTIFIED BY ‘您的密码’ PASSWORD EXPIRE NEVER;<br>重新修改密码：<br>ALTER USER ‘root’ @’%’ IDENTIFIED WITH mysql_native_password BY ‘您的密码’;<br>刷新权限：<br>FLUSH PRIVILEGES;</p></li></ol><h2 id="相关命令"><a href="#相关命令" class="headerlink" title="相关命令"></a>相关命令</h2><p>mysql服务相关命令<br>启动服务：service mysqld start<br>停止服务：service mysqld stop<br>重启服务：service mysqld restart<br>查看服务状态：service mysqld status</p><p>设置mysql开机自启：<br>systemctl enable mysqld<br>systemctl daemon-reload<br>查看自启服务<br>systemctl list-units –type=service</p>]]></content>
      
      
      
        <tags>
            
            <tag> 安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>poi-tl word模板填充</title>
      <link href="/blog/2022/04/28/java-poi-tl/"/>
      <url>/blog/2022/04/28/java-poi-tl/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><font color=#999AAA >java poi-tl word模板填充，word填充基于com.deepoove 的 poi-tl</font><h2 id="一、引入maven库"><a href="#一、引入maven库" class="headerlink" title="一、引入maven库"></a>一、引入maven库</h2><p>注意：版本对应 poi-tl 版本 1.9.0-beta 对应 apache poi 版本 4.1.2</p><p><font color=#999AAA >代码如下（示例）：</font></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>word模板数据解析<span class="token operator">--</span><span class="token operator">></span><span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">></span></span>    <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">></span></span>com<span class="token punctuation">.</span>deepoove<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">></span></span>poi<span class="token operator">-</span>tl<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">></span></span><span class="token number">1.9</span><span class="token number">.0</span><span class="token operator">-</span>beta<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、读入数据"><a href="#二、读入数据" class="headerlink" title="二、读入数据"></a>二、读入数据</h2><p>默认采用${key}的形式进行填充！<br>原word模板：<br><img src="cgd-1.png" alt="模板图"><br>效果图：<br><img src="cgd-2.png" alt="效果图"></p><h2 id="三、示例代码"><a href="#三、示例代码" class="headerlink" title="三、示例代码"></a>三、示例代码</h2><p><font color=#999AAA >代码如下（示例）：</font></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>    <span class="token function">resolveTemp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">File</span> <span class="token function">resolveTemp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> path <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"user.dir"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"/file"</span><span class="token punctuation">;</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> datas <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    datas<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"dept"</span><span class="token punctuation">,</span> <span class="token string">"采购部"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    datas<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">LocalDate</span> date <span class="token operator">=</span> <span class="token class-name">LocalDate</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    datas<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"year"</span><span class="token punctuation">,</span> date<span class="token punctuation">.</span><span class="token function">getYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    datas<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"month"</span><span class="token punctuation">,</span> date<span class="token punctuation">.</span><span class="token function">getMonthValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    datas<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"day"</span><span class="token punctuation">,</span> date<span class="token punctuation">.</span><span class="token function">getDayOfMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span><span class="token punctuation">></span></span> itemList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> itemMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    itemMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"goods"</span><span class="token punctuation">,</span> <span class="token string">"笔记本电脑"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    itemMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"num"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    itemMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"cost"</span><span class="token punctuation">,</span> <span class="token string">"10000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    itemMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"remark"</span><span class="token punctuation">,</span> <span class="token string">"按需采购"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    itemList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>itemMap<span class="token punctuation">)</span><span class="token punctuation">;</span>    itemMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    itemMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"goods"</span><span class="token punctuation">,</span> <span class="token string">"台式电脑"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    itemMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"num"</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    itemMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"cost"</span><span class="token punctuation">,</span> <span class="token string">"8000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    itemMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"remark"</span><span class="token punctuation">,</span> <span class="token string">"按需采购"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    itemList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>itemMap<span class="token punctuation">)</span><span class="token punctuation">;</span>    datas<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"item"</span><span class="token punctuation">,</span> itemList<span class="token punctuation">)</span><span class="token punctuation">;</span>    datas<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"total"</span><span class="token punctuation">,</span> <span class="token string">"18000.00"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//读取图片</span>    <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>path <span class="token operator">+</span> <span class="token string">"/1.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">BufferedImage</span> bi <span class="token operator">=</span> <span class="token class-name">ImageIO</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> width <span class="token operator">=</span> bi<span class="token punctuation">.</span><span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//源图高度</span>    <span class="token keyword">int</span> height <span class="token operator">=</span> bi<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    datas<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"image"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">PictureRenderData</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span> height<span class="token punctuation">,</span> <span class="token class-name">PictureType</span><span class="token punctuation">.</span>PNG<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"datas = "</span> <span class="token operator">+</span> datas<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">HackLoopTableRenderPolicy</span> hackLoopTableRenderPolicy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HackLoopTableRenderPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Configure</span> config <span class="token operator">=</span> <span class="token class-name">Configure</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">buildGramer</span><span class="token punctuation">(</span><span class="token string">"$&#123;"</span><span class="token punctuation">,</span> <span class="token string">"&#125;"</span><span class="token punctuation">)</span><span class="token comment">//此处可以变更原模板$&#123;&#125;</span>            <span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">"item"</span><span class="token punctuation">,</span> hackLoopTableRenderPolicy<span class="token punctuation">)</span><span class="token comment">//标记表格参数</span>            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> sourceFile <span class="token operator">=</span> path <span class="token operator">+</span> <span class="token string">"/template/采购单.docx"</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> docNow <span class="token operator">=</span> <span class="token class-name">LocalDateTimeUtils</span><span class="token punctuation">.</span><span class="token function">formatDate</span><span class="token punctuation">(</span>date<span class="token punctuation">,</span> <span class="token string">"yyyy年MM月dd日"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> targetFile <span class="token operator">=</span> path <span class="token operator">+</span> <span class="token string">"/order/采购单"</span> <span class="token operator">+</span> docNow <span class="token operator">+</span> <span class="token string">".docx"</span><span class="token punctuation">;</span>    <span class="token class-name">XWPFTemplate</span> template <span class="token operator">=</span> <span class="token class-name">XWPFTemplate</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>sourceFile<span class="token punctuation">)</span><span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>datas<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">File</span> wordFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>targetFile<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">File</span> parentFile <span class="token operator">=</span> wordFile<span class="token punctuation">.</span><span class="token function">getParentFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>parentFile<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        parentFile<span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">FileOutputStream</span> out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>wordFile<span class="token punctuation">)</span><span class="token punctuation">;</span>    template<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>    out<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    template<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> wordFile<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><font color=#999AAA >以上就是今天要讲的内容，本文仅仅简单介绍了poi-tl的使用，喜欢就点个赞吧！</font></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/blog/2022/04/24/hello-world/"/>
      <url>/blog/2022/04/24/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo搭建博客</title>
      <link href="/blog/2022/02/15/hexo-init/"/>
      <url>/blog/2022/02/15/hexo-init/</url>
      
        <content type="html"><![CDATA[<p> Hexo 是快速、简洁且高效的博客框架</p><blockquote><p>Hexo官网:<a href="https://hexo.io/zh-cn/">https://hexo.io/zh-cn/</a></p></blockquote><h2 id="Hexo搭建步骤"><a href="#Hexo搭建步骤" class="headerlink" title="Hexo搭建步骤"></a>Hexo搭建步骤</h2><p> 1.安装Git<br> 2.安装Node.js<br> 3.安装Hexo<br> 4.Gitee创建个人仓库</p><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><h3 id="1-GIT"><a href="#1-GIT" class="headerlink" title="1.GIT"></a>1.GIT</h3><blockquote><p>Git下载地址:<a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a><br>Git安装教程 :<a href="https://blog.csdn.net/sishen47k/article/details/80211002">https://blog.csdn.net/sishen47k/article/details/80211002</a></p></blockquote><h3 id="2-Node-js"><a href="#2-Node-js" class="headerlink" title="2.Node.js"></a>2.Node.js</h3><blockquote><p>Node.js下载地址:<a href="https://nodejs.org/en/download/">https://nodejs.org/en/download/</a><br>Node.js安装教程:<a href="https://www.runoob.com/nodejs/nodejs-install-setup.html">https://www.runoob.com/nodejs/nodejs-install-setup.html</a></p></blockquote><h3 id="2-Hexo"><a href="#2-Hexo" class="headerlink" title="2.Hexo"></a>2.Hexo</h3><ul><li><p>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。</p><blockquote><p>npm install -g hexo-cli</p></blockquote></li><li><p>安装hexo-deployer-git，跟git交互</p><blockquote><p>npm install hexo-deployer-git –save</p></blockquote></li><li><p>创建一个文件夹hexo</p><blockquote><p>mkdir hexo</p></blockquote></li><li><p>进入hexo</p><blockquote><p>cd hexo</p></blockquote></li><li><p>初始化一下hexo</p><blockquote><p>hexo init</p></blockquote></li><li><p>安装依赖</p><blockquote><p>npm install</p></blockquote></li><li><p>配置认证信息</p><blockquote><p>hexo d -fg</p></blockquote></li><li><p>推送远端git</p><blockquote><p>hexo -d</p></blockquote></li><li><p>开始部署博客并推到远端git 组合指令</p><blockquote><p>hexo g -d</p></blockquote></li><li><p>启动服务</p><blockquote><p>hexo serve</p></blockquote></li><li><p>部署生成页面</p><blockquote><p>hexo g</p></blockquote></li><li><p>清除已生成的页面</p><blockquote><p>hexo clean</p></blockquote></li><li><p>文件夹出现的名称</p></li></ul><table><thead><tr><th align="left">文件名称</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">node_modules</td><td align="left">依赖包</td></tr><tr><td align="left">public</td><td align="left">存放生成的页面</td></tr><tr><td align="left">scaffolds</td><td align="left">生成文章的一些模板</td></tr><tr><td align="left">source</td><td align="left">用来存放你的文章</td></tr><tr><td align="left">themes</td><td align="left">主题</td></tr><tr><td align="left">_config.yml</td><td align="left">博客的配置文件</td></tr></tbody></table><h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><ul><li>模板使用：<a href="https://gitee.com/mirrors_blinkfox/hexo-theme-matery.git">https://gitee.com/mirrors_blinkfox/hexo-theme-matery.git</a> </li><li>安装到themes目录下<blockquote><p>cd themes<br>git clone <a href="https://gitee.com/mirrors_blinkfox/hexo-theme-matery.git">https://gitee.com/mirrors_blinkfox/hexo-theme-matery.git</a></p></blockquote></li><li>修改 Hexo 根目录下的 _config.yml 的 theme 的值：theme: hexo-theme-matery</li></ul><p>安装完后即可用<code><strong>hexo s</strong></code>在本地启动，然后访问<code><strong>localhost:4000</strong></code>查看你的博客了</p><h2 id="安装hexo-wordcount字数统计插件"><a href="#安装hexo-wordcount字数统计插件" class="headerlink" title="安装hexo-wordcount字数统计插件"></a>安装hexo-wordcount字数统计插件</h2><ol><li>在根目录安装hexo-wordcount</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">npm</span> i --save hexo-wordcount<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>在自己主题中的修改_config.yml<br>我这里是matery主题</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token builtin class-name">cd</span> themes/hexo-theme-matery<span class="token function">vim</span> _conf.yml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>修改_conf.yml</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Post word count, reading duration, site total word count.</span><span class="token comment"># Before you activate, please confirm that you have installed the hexo-wordcount plugin,</span><span class="token comment"># install the plugin command: `npm i --save hexo-wordcount`.</span><span class="token comment"># 文章字数统计、阅读时长、总字数统计等</span><span class="token comment"># 文章信息--若要开启文章字数统计，需要安装 hexo-wordcount 插件，安装命令: `npm i --save hexo-wordcount`</span><span class="token key atrule">postInfo</span><span class="token punctuation">:</span>  <span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 发布日期</span>  <span class="token key atrule">update</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 更新日期</span>  <span class="token key atrule">wordCount</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 文章字数统计</span>  <span class="token key atrule">totalCount</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 站点总文章字数</span>  <span class="token key atrule">min2read</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 文章阅读时长</span>  <span class="token key atrule">readCount</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 文章阅读次数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="引入live2D-动漫人物"><a href="#引入live2D-动漫人物" class="headerlink" title="引入live2D 动漫人物"></a>引入live2D 动漫人物</h2><ol><li>在根目录安装live2D依赖</li></ol><p>模板有很多，请自行去查找 这里引用的是koharu</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment">#引入live2d依赖</span><span class="token function">npm</span> <span class="token function">install</span> --save hexo-helper-live2d<span class="token comment">#引入koharu模型 npm install &#123;packagename&#125;</span><span class="token function">npm</span> <span class="token function">install</span> live2d-widget-model-koharu<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>在根目录下配置 _conf.yml 文件</li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># live2D</span><span class="token key atrule">live2d</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">scriptFrom</span><span class="token punctuation">:</span> local  <span class="token key atrule">model</span><span class="token punctuation">:</span>    <span class="token key atrule">use</span><span class="token punctuation">:</span> live2d<span class="token punctuation">-</span>widget<span class="token punctuation">-</span>model<span class="token punctuation">-</span>koharu <span class="token comment">#模型选择</span>  <span class="token key atrule">display</span><span class="token punctuation">:</span>    <span class="token key atrule">position</span><span class="token punctuation">:</span> left   <span class="token comment">#模型位置</span>    <span class="token key atrule">width</span><span class="token punctuation">:</span> <span class="token number">150</span>       <span class="token comment">#模型宽度</span>    <span class="token key atrule">height</span><span class="token punctuation">:</span> <span class="token number">300</span>      <span class="token comment">#模型高度</span>  <span class="token key atrule">mobile</span><span class="token punctuation">:</span>    <span class="token key atrule">show</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>      <span class="token comment">#是否在手机端显示</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>大功告成啦！！</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
